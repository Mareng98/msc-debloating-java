com.lowagie.text.Anchor -> a.a.a.a:
    java.lang.String name -> c
    java.lang.String reference -> d
    void <init>() -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    java.util.ArrayList getChunks() -> a
    int type() -> b
    java.lang.String getReference() -> c
com.lowagie.text.Annotation -> a.a.a.b:
    int annotationtype -> a
    java.util.Map annotationAttributes -> b
    float llx -> c
    float lly -> d
    float urx -> e
    float ury -> f
    void <init>(com.lowagie.text.Annotation) -> <init>
    int type() -> b
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    java.util.ArrayList getChunks() -> a
    void setDimensions(float,float,float,float) -> a
    float llx() -> c
    float lly() -> d
    float urx() -> e
    float ury() -> f
    float llx(float) -> a
    float lly(float) -> b
    float urx(float) -> c
    float ury(float) -> d
    int annotationType() -> g
    java.lang.String title() -> h
    java.lang.String content() -> i
    java.util.Map getAttributes() -> j
    boolean isContent() -> k
    boolean isNestable() -> l
com.lowagie.text.BadElementException -> a.a.a.c:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.lowagie.text.Chapter -> a.a.a.d:
    int type() -> b
    boolean isNestable() -> l
com.lowagie.text.ChapterAutoNumber -> a.a.a.e:
com.lowagie.text.Chunk -> a.a.a.f:
    com.lowagie.text.Chunk NEWLINE -> a
    java.lang.StringBuffer content -> b
    com.lowagie.text.Font font -> c
    java.util.Map attributes -> d
    void <init>() -> <init>
    void <init>(java.lang.String,com.lowagie.text.Font) -> <init>
    void <init>(java.lang.String) -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    java.lang.StringBuffer append(java.lang.String) -> a
    com.lowagie.text.Font getFont() -> c
    void setFont(com.lowagie.text.Font) -> a
    java.lang.String getContent() -> d
    java.lang.String toString() -> toString
    boolean isEmpty() -> e
    boolean hasAttributes() -> f
    java.util.Map getChunkAttributes() -> g
    void setChunkAttributes(java.util.Map) -> a
    com.lowagie.text.Chunk setAttribute$3a4bb278(java.lang.String,com.lowagie.text.pdf.HyphenationEvent) -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    com.lowagie.text.pdf.HyphenationEvent getHyphenation() -> h
    com.lowagie.text.Chunk setHyphenation(com.lowagie.text.pdf.HyphenationEvent) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.DocListener -> a.a.a.g:
    void open() -> a
    void close() -> close
    boolean newPage() -> b
    boolean setPageSize(com.lowagie.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
com.lowagie.text.DocWriter -> a.a.a.h:
    com.lowagie.text.Rectangle pageSize -> c
    com.lowagie.text.pdf.PdfDocument document$7f30ec4f -> d
    com.lowagie.text.pdf.OutputStreamCounter os -> a
    boolean open -> b
    boolean pause -> e
    boolean closeStream -> f
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfDocument,java.io.OutputStream) -> <init>
    byte[] getISOBytes(java.lang.String) -> a
    boolean add(com.lowagie.text.Element) -> a
    void open() -> a
    boolean setPageSize(com.lowagie.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
    boolean newPage() -> b
    void close() -> close
    boolean isPaused() -> c
    boolean isCloseStream() -> d
com.lowagie.text.Document -> a.a.a.i:
    java.lang.String OPENPDF_VERSION -> p
    boolean compress -> a
    boolean plainRandomAccess -> b
    float wmfFontCorrection -> c
    java.util.List listeners -> q
    boolean open -> d
    boolean close -> e
    com.lowagie.text.Rectangle pageSize -> f
    float marginLeft -> g
    float marginRight -> h
    float marginTop -> i
    float marginBottom -> j
    boolean marginMirroring -> k
    boolean marginMirroringTopBottom -> l
    java.lang.String javaScript_onLoad -> r
    java.lang.String javaScript_onUnLoad -> s
    java.lang.String htmlStyleClass -> t
    int pageN -> m
    com.lowagie.text.HeaderFooter header -> n
    com.lowagie.text.HeaderFooter footer -> o
    int chapternumber -> u
    com.lowagie.text.TextRenderingOptions textRenderingOptions -> v
    void <init>() -> <init>
    void <init>(com.lowagie.text.RectangleReadOnly) -> <init>
    void <init>(com.lowagie.text.RectangleReadOnly,byte) -> <init>
    java.lang.String getVersionNumber() -> k
    java.lang.String getProduct() -> c
    java.lang.String getVersion() -> d
    void addDocListener$10f056d3(com.lowagie.text.pdf.PdfDocument) -> a
    boolean add(com.lowagie.text.Element) -> a
    void open() -> a
    boolean setPageSize(com.lowagie.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
    boolean newPage() -> b
    void close() -> close
    boolean addProducer() -> e
    boolean addCreationDate() -> f
    float left() -> g
    float top() -> h
    float left(float) -> a
    float right(float) -> b
    float top(float) -> c
    float bottom(float) -> d
    boolean isOpen() -> i
    com.lowagie.text.TextRenderingOptions getTextRenderingOptions() -> j
    void setTextRenderingOptions(com.lowagie.text.TextRenderingOptions) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.DocumentException -> a.a.a.j:
    void <init>(java.lang.Exception) -> <init>
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.lowagie.text.Element -> a.a.a.k:
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    java.util.ArrayList getChunks() -> a
com.lowagie.text.ElementListener -> a.a.a.l:
    boolean add(com.lowagie.text.Element) -> a
com.lowagie.text.ExceptionConverter -> a.a.a.m:
    java.lang.Exception ex -> a
    java.lang.String prefix -> b
    void <init>(java.lang.Exception) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
    java.lang.String toString() -> toString
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.lowagie.text.Font -> a.a.a.n:
    int family -> a
    float size -> b
    int style -> c
    java.awt.Color color -> d
    com.lowagie.text.pdf.BaseFont baseFont -> e
    void <init>(com.lowagie.text.Font) -> <init>
    void <init>(int,float,int,java.awt.Color) -> <init>
    void <init>(com.lowagie.text.pdf.BaseFont,float,int,java.awt.Color) -> <init>
    void <init>() -> <init>
    int getFontStyleFromName(java.lang.String) -> a
    int compareTo(java.lang.Object) -> compareTo
    float getSize() -> a
    float getCalculatedLeading(float) -> a
    int getStyle() -> b
    void setStyle(int) -> a
    boolean isUnderlined() -> c
    boolean isStrikethru() -> d
    java.awt.Color getColor() -> e
    com.lowagie.text.pdf.BaseFont getBaseFont() -> f
    com.lowagie.text.pdf.BaseFont getCalculatedBaseFont$36833938() -> g
    boolean isStandardFont() -> h
    com.lowagie.text.Font difference(com.lowagie.text.Font) -> a
com.lowagie.text.FontFactory -> a.a.a.o:
    java.lang.String defaultEncoding -> a
    com.lowagie.text.FontFactoryImp fontImp -> b
    com.lowagie.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,java.awt.Color) -> a
    com.lowagie.text.Font getFont$63cd8b95(java.lang.String,java.lang.String,int) -> a
    com.lowagie.text.Font getFont(java.lang.String,float,int,java.awt.Color) -> a
    boolean isRegistered(java.lang.String) -> a
    com.lowagie.text.FontFactoryImp getFontImp() -> a
    void <clinit>() -> <clinit>
com.lowagie.text.FontFactoryImp -> a.a.a.p:
    java.util.Map trueTypeFonts -> a
    java.util.Map fontFamilies -> b
    java.util.concurrent.locks.ReadWriteLock lock -> c
    java.lang.String defaultEncoding -> d
    boolean defaultEmbedding -> e
    void <init>() -> <init>
    com.lowagie.text.Font getFont$1a91dcc3(java.lang.String,java.lang.String,boolean,float,int,java.awt.Color) -> a
    boolean isRegistered(java.lang.String) -> a
    java.lang.Object getFontPath(java.lang.String) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.HeaderFooter -> a.a.a.q:
com.lowagie.text.Image -> a.a.a.r:
    int[] PNGID -> v
    long serialId -> w
    int type -> a
    java.net.URL url -> b
    byte[] rawData -> c
    int bpc -> d
    com.lowagie.text.pdf.PdfTemplate[] template -> x
    int alignment -> y
    java.lang.String alt -> z
    float absoluteX -> A
    float absoluteY -> B
    float plainWidth -> e
    float plainHeight -> f
    float scaledWidth -> g
    float scaledHeight -> h
    int compressionLevel -> C
    java.lang.Long mySerialId -> D
    float rotationRadians -> E
    float indentationLeft -> F
    float indentationRight -> G
    float spacingBefore -> H
    float spacingAfter -> I
    com.lowagie.text.Annotation annotation -> J
    com.lowagie.text.pdf.PdfOCG layer -> K
    boolean interpolation -> L
    int originalType -> i
    byte[] originalData -> j
    boolean deflated -> M
    int dpiX -> k
    int dpiY -> l
    int colorspace -> m
    boolean invert -> n
    java.awt.color.ICC_Profile profile -> N
    boolean mask -> O
    com.lowagie.text.Image imageMask -> P
    int[] transparency -> Q
    com.lowagie.text.pdf.PdfIndirectReference directReference -> R
    float initialRotation -> S
    float widthPercentage -> T
    float XYRatio -> U
    com.lowagie.text.pdf.PdfDictionary additional -> V
    boolean smask -> W
    void <init>(java.net.URL) -> <init>
    void <init>() -> <init>
    com.lowagie.text.Image getInstance(java.net.URL) -> a
    com.lowagie.text.Image getInstance(int,int,int,int,byte[],int[]) -> a
    com.lowagie.text.Image getInstance$48c97c82(java.awt.Image,boolean) -> a
    com.lowagie.text.Image getInstance(com.lowagie.text.Image) -> a
    java.lang.Long getSerialId() -> P
    com.lowagie.text.pdf.PdfIndirectReference getDirectReference() -> c
    int type() -> b
    boolean isNestable() -> l
    boolean isImgRaw() -> d
    boolean isImgTemplate() -> e
    java.net.URL getUrl() -> f
    byte[] getRawData() -> g
    int getBpc() -> h
    com.lowagie.text.pdf.PdfTemplate getTemplateData() -> i
    void setTemplateData(com.lowagie.text.pdf.PdfTemplate) -> a
    int getAlignment() -> j
    void setAbsolutePosition(float,float) -> a
    boolean hasAbsoluteX() -> m
    float getAbsoluteX() -> n
    boolean hasAbsoluteY() -> o
    float getAbsoluteY() -> p
    float getScaledWidth() -> q
    float getScaledHeight() -> r
    void scalePercent(float) -> a
    void scaleToFit$2548a35() -> s
    float[] matrix() -> t
    java.lang.Long getMySerialId() -> u
    float getImageRotation() -> v
    void setRotation(float) -> b
    float getIndentationLeft() -> w
    float getIndentationRight() -> x
    float getSpacingBefore() -> y
    float getSpacingAfter() -> z
    float getWidthPercentage() -> A
    com.lowagie.text.Annotation getAnnotation() -> B
    com.lowagie.text.pdf.PdfOCG getLayer() -> C
    boolean isInterpolation() -> D
    boolean isDeflated() -> E
    int getColorspace() -> F
    boolean isInverted() -> G
    void tagICC(java.awt.color.ICC_Profile) -> a
    boolean hasICCProfile() -> H
    java.awt.color.ICC_Profile getICCProfile() -> I
    com.lowagie.text.pdf.PdfDictionary getAdditional() -> J
    boolean isMask() -> K
    com.lowagie.text.Image getImageMask() -> L
    boolean isSmask() -> M
    int[] getTransparency() -> N
    int getCompressionLevel() -> O
    void <clinit>() -> <clinit>
com.lowagie.text.ImageLoader -> a.a.a.s:
    com.lowagie.text.Image getPngImage(java.net.URL) -> a
    com.lowagie.text.Image getGifImage(java.net.URL) -> b
    com.lowagie.text.Image getTiffImage(java.net.URL) -> c
    com.lowagie.text.Image getBmpImage(java.net.URL) -> d
    com.lowagie.text.Jpeg getJpegImage$4e445111(java.net.URL) -> e
    com.lowagie.text.Jpeg2000 getJpeg2000Image$4e445111(java.net.URL) -> f
com.lowagie.text.ImgCCITT -> a.a.a.t:
    void <init>(int,int,byte[]) -> <init>
com.lowagie.text.ImgJBIG2 -> a.a.a.u:
    byte[] global -> v
    void <init>() -> <init>
    byte[] getGlobalBytes() -> P
com.lowagie.text.ImgRaw -> a.a.a.v:
    void <init>(int,int,int,int,byte[]) -> <init>
com.lowagie.text.ImgWMF -> a.a.a.w:
    void <init>(java.net.URL) -> <init>
    void readWMF(com.lowagie.text.pdf.PdfTemplate) -> b
com.lowagie.text.Jpeg -> a.a.a.x:
    int[] VALID_MARKERS -> v
    int[] UNSUPPORTED_MARKERS -> w
    int[] NOPARAM_MARKERS -> x
    byte[] JFIF_ID -> y
    byte[][] icc -> z
    void <init>(byte[]) -> <init>
    int getShort(java.io.InputStream) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.Jpeg2000 -> a.a.a.y:
    java.io.InputStream inp -> v
    int boxLength -> w
    int boxType -> x
    void <init>(byte[]) -> <init>
    int cio_read(int) -> c
    void jp2_read_boxhdr() -> P
com.lowagie.text.LargeElement -> a.a.a.z:
    boolean isComplete() -> c
    void flushContent() -> d
com.lowagie.text.List -> a.a.a.A:
    java.util.List list -> a
    boolean numbered -> b
    boolean lettered -> c
    boolean lowercase -> d
    boolean autoindent -> e
    boolean alignindent -> f
    int first -> g
    com.lowagie.text.Chunk symbol -> h
    java.lang.String preSymbol -> i
    java.lang.String postSymbol -> j
    float indentationLeft -> k
    float indentationRight -> l
    float symbolIndent -> m
    void <init>() -> <init>
    void <init>(byte) -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    void normalizeIndentation() -> c
    java.util.List getItems() -> d
    boolean isAlignindent() -> e
    float getIndentationLeft() -> f
    void setIndentationLeft(float) -> a
    float getIndentationRight() -> g
    void setIndentationRight(float) -> b
    boolean isContent() -> k
    boolean isNestable() -> l
com.lowagie.text.ListItem -> a.a.a.B:
    com.lowagie.text.Chunk symbol -> c
    void <init>() -> <init>
    int type() -> b
    com.lowagie.text.Chunk getListSymbol() -> c
com.lowagie.text.MarkedObject -> a.a.a.C:
    com.lowagie.text.Element element -> a
    java.util.Properties markupAttributes -> b
    void <init>() -> <init>
    java.util.ArrayList getChunks() -> a
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
com.lowagie.text.MarkedSection -> a.a.a.D:
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
com.lowagie.text.Meta -> a.a.a.E:
    int type -> a
    java.lang.StringBuffer content -> b
    void <init>(int,java.lang.String) -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    java.lang.String getContent() -> c
    java.lang.String getName() -> d
com.lowagie.text.PageSize -> a.a.a.F:
    com.lowagie.text.RectangleReadOnly LETTER$1e799a65 -> a
    com.lowagie.text.RectangleReadOnly A4$1e799a65 -> b
    void <clinit>() -> <clinit>
com.lowagie.text.Paragraph -> a.a.a.G:
    int alignment -> c
    int runDirection -> d
    float multipliedLeading -> e
    float indentationLeft -> f
    float indentationRight -> g
    float spacingBefore -> h
    float spacingAfter -> i
    boolean keeptogether -> j
    float firstLineIndent -> k
    float extraParagraphSpace -> l
    void <init>() -> <init>
    void <init>(com.lowagie.text.Chunk) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(com.lowagie.text.Phrase) -> <init>
    int type() -> b
    boolean add(com.lowagie.text.Element) -> a
    void setLeading(float) -> a
    boolean getKeepTogether() -> d
    int getAlignment() -> e
    float getMultipliedLeading() -> f
    float getTotalLeading() -> g
    float getIndentationLeft() -> h
    void setIndentationLeft(float) -> b
    float getIndentationRight() -> i
    float getFirstLineIndent() -> j
    float getSpacingBefore() -> m
    float getSpacingAfter() -> n
    float getExtraParagraphSpace() -> o
    int getRunDirection() -> p
    boolean add(java.lang.Object) -> add
com.lowagie.text.Phrase -> a.a.a.H:
    float leading -> a
    com.lowagie.text.Font font -> b
    com.lowagie.text.pdf.HyphenationEvent hyphenation -> c
    void <init>() -> <init>
    void <init>(com.lowagie.text.Phrase) -> <init>
    void <init>(byte) -> <init>
    void <init>(com.lowagie.text.Chunk) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,com.lowagie.text.Font) -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    void add(int,com.lowagie.text.Element) -> a
    boolean add(com.lowagie.text.Element) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addChunk(com.lowagie.text.Chunk) -> a
    void addSpecial$5d527811(com.lowagie.text.Element) -> b
    float getLeading() -> q
    void setLeading(float) -> a
    boolean hasLeading() -> r
    com.lowagie.text.Font getFont() -> s
    boolean isEmpty() -> isEmpty
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
com.lowagie.text.Rectangle -> a.a.a.I:
    float llx -> o
    float lly -> p
    float urx -> q
    float ury -> r
    int rotation -> s
    java.awt.Color backgroundColor -> a
    int border -> t
    boolean useVariableBorders -> b
    float borderWidth -> u
    float borderWidthLeft -> c
    float borderWidthRight -> d
    float borderWidthTop -> e
    float borderWidthBottom -> f
    java.awt.Color borderColor -> g
    java.awt.Color borderColorLeft -> h
    java.awt.Color borderColorRight -> i
    java.awt.Color borderColorTop -> j
    java.awt.Color borderColorBottom -> k
    void <init>(float,float,float,float) -> <init>
    void <init>() -> <init>
    void <init>(com.lowagie.text.Rectangle) -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    float getLeft() -> Q
    void setLeft(float) -> c
    float getLeft(float) -> d
    float getRight() -> R
    void setRight(float) -> e
    float getRight(float) -> f
    float getWidth() -> S
    float getTop() -> T
    void setTop(float) -> g
    float getTop(float) -> h
    float getBottom() -> U
    void setBottom(float) -> i
    float getBottom(float) -> j
    float getHeight() -> V
    int getRotation() -> W
    com.lowagie.text.Rectangle rotate() -> X
    java.awt.Color getBackgroundColor() -> Y
    void setBackgroundColor(java.awt.Color) -> a
    int getBorder() -> Z
    void setBorder(int) -> a
    boolean hasBorders() -> aa
    boolean hasBorder(int) -> b
    boolean isUseVariableBorders() -> ab
    float getBorderWidth() -> ac
    void setBorderWidth(float) -> k
    float getVariableBorderWidth(float,int) -> a
    float getBorderWidthLeft() -> ad
    float getBorderWidthRight() -> ae
    float getBorderWidthTop() -> af
    float getBorderWidthBottom() -> ag
    java.awt.Color getBorderColor() -> ah
    void setBorderColor(java.awt.Color) -> b
    java.awt.Color getBorderColorLeft() -> ai
    java.awt.Color getBorderColorRight() -> aj
    java.awt.Color getBorderColorTop() -> ak
    java.awt.Color getBorderColorBottom() -> al
    void cloneNonPositionParameters(com.lowagie.text.Rectangle) -> a
    void softCloneNonPositionParameters$221d45b0(com.lowagie.text.SimpleCell) -> a
    java.lang.String toString() -> toString
com.lowagie.text.RectangleReadOnly -> a.a.a.J:
    void <init>(float,float) -> <init>
    void throwReadOnlyError() -> c
    void setLeft(float) -> c
    void setRight(float) -> e
    void setTop(float) -> g
    void setBottom(float) -> i
    void setBackgroundColor(java.awt.Color) -> a
    void setBorder(int) -> a
    void setBorderWidth(float) -> k
    void setBorderColor(java.awt.Color) -> b
    void cloneNonPositionParameters(com.lowagie.text.Rectangle) -> a
    void softCloneNonPositionParameters$221d45b0(com.lowagie.text.SimpleCell) -> a
    java.lang.String toString() -> toString
com.lowagie.text.RtfElementInterface -> a.a.a.K:
com.lowagie.text.Section -> a.a.a.L:
    com.lowagie.text.Paragraph title -> a
    java.lang.String bookmarkTitle -> b
    int numberDepth -> c
    int numberStyle -> d
    float indentationLeft -> e
    float indentationRight -> f
    float indentation -> g
    boolean bookmarkOpen -> h
    boolean triggerNewPage -> i
    int subsections -> j
    java.util.List numbers -> k
    boolean complete -> l
    boolean addedCompletely -> m
    boolean notAddedYet -> n
    void <init>() -> <init>
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    boolean add(com.lowagie.text.Element) -> a
    boolean addAll(java.util.Collection) -> addAll
    com.lowagie.text.Paragraph getTitle() -> e
    float getIndentationLeft() -> f
    float getIndentationRight() -> g
    float getIndentation() -> h
    boolean isBookmarkOpen() -> i
    com.lowagie.text.Paragraph getBookmarkTitle() -> j
    int getDepth() -> m
    boolean isNotAddedYet() -> n
    void flushContent() -> d
    boolean isComplete() -> c
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
com.lowagie.text.SimpleCell -> a.a.a.M:
    boolean useAscender -> a
    boolean useDescender -> b
    boolean useBorderPadding -> c
    java.util.List content -> d
    float width -> e
    float widthpercentage -> f
    float spacing_left -> g
    float spacing_right -> h
    float spacing_top -> i
    float spacing_bottom -> j
    float padding_left -> k
    float padding_right -> l
    float padding_top -> m
    float padding_bottom -> n
    int colspan -> v
    int horizontalAlignment -> w
    int verticalAlignment -> x
    boolean cellgroup -> y
    void <init>() -> <init>
    com.lowagie.text.pdf.PdfPCell createPdfPCell(com.lowagie.text.SimpleCell) -> b
    void cellLayout(com.lowagie.text.pdf.PdfPCell,com.lowagie.text.Rectangle,com.lowagie.text.pdf.PdfContentByte[]) -> a
    void setPadding(float) -> a
    int getColspan() -> c
    float getSpacing_left() -> d
    void setSpacing_left(float) -> b
    float getSpacing_right() -> e
    void setSpacing_right(float) -> l
    float getSpacing_top() -> f
    void setSpacing_top(float) -> m
    float getSpacing_bottom() -> g
    void setSpacing_bottom(float) -> n
    float getWidth() -> S
    float getWidthpercentage() -> h
    java.util.List getContent() -> i
    int type() -> b
com.lowagie.text.SimpleTable -> a.a.a.N:
    java.util.List content -> a
    float width -> b
    float widthpercentage -> c
    float cellspacing -> d
    float cellpadding -> e
    int alignment -> f
    void <init>() -> <init>
    com.lowagie.text.pdf.PdfPTable createPdfPTable() -> c
    void tableLayout(com.lowagie.text.pdf.PdfPTable,float[][],float[],int,int,com.lowagie.text.pdf.PdfContentByte[]) -> a
    float getWidth() -> S
    int type() -> b
    boolean isNestable() -> l
com.lowagie.text.SplitCharacter -> a.a.a.O:
    boolean isSplitCharacter$79eb670d(int,char[],com.lowagie.text.pdf.PdfChunk[]) -> a
com.lowagie.text.Table -> a.a.a.P:
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isNestable() -> l
    float getWidth() -> S
    void flushContent() -> d
    boolean isComplete() -> c
com.lowagie.text.TableRectangle -> a.a.a.Q:
com.lowagie.text.TextElementArray -> a.a.a.R:
com.lowagie.text.TextRenderingOptions -> a.a.a.S:
    java.lang.String documentLanguage -> a
    boolean glyphSubstitutionEnabled -> b
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String getDocumentLanguage() -> a
    boolean isGlyphSubstitutionEnabled() -> b
com.lowagie.text.Utilities -> a.a.a.T:
    java.lang.Object[][] addToArray(java.lang.Object[][],java.lang.Object[]) -> a
    void skip(java.io.InputStream,int) -> a
    boolean isSurrogateHigh(char) -> a
    boolean isSurrogateLow(char) -> b
    boolean isSurrogatePair(java.lang.String,int) -> a
    boolean isSurrogatePair(char[],int) -> a
    int convertToUtf32(char[],int) -> b
    int convertToUtf32(java.lang.String,int) -> b
    byte[] toByteArray(java.io.InputStream) -> a
com.lowagie.text.error_messages.MessageLocalization -> a.a.a.a.a:
    java.util.Map defaultLanguage -> a
    void <init>() -> <init>
    java.lang.String getMessage(java.lang.String) -> b
    java.lang.String getComposedMessage(java.lang.String) -> a
    java.lang.String getComposedMessage(java.lang.String,java.lang.Object) -> a
    java.lang.String getComposedMessage(java.lang.String,int) -> a
    java.lang.String getComposedMessage(java.lang.String,java.lang.Object,java.lang.Object) -> a
    java.lang.String getComposedMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.String getComposedMessage$2c7af011(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    java.util.Map getLanguageMessages$6891487e(java.lang.String) -> c
    void <clinit>() -> <clinit>
com.lowagie.text.exceptions.BadPasswordException -> a.a.a.b.a:
    void <init>(java.lang.String) -> <init>
com.lowagie.text.exceptions.IllegalPdfSyntaxException -> a.a.a.b.b:
    void <init>(java.lang.String) -> <init>
com.lowagie.text.exceptions.InvalidPdfException -> a.a.a.b.c:
    void <init>(java.lang.String) -> <init>
com.lowagie.text.exceptions.UnsupportedPdfException -> a.a.a.b.d:
    void <init>(java.lang.String) -> <init>
com.lowagie.text.pdf.AcroFields -> a.a.a.c.a:
    java.util.HashMap stdFieldFontNames -> a
    java.util.Map extensionFonts -> b
    java.util.Map localFonts -> c
    com.lowagie.text.pdf.PdfReader reader -> d
    com.lowagie.text.pdf.PdfStamperImp writer$1bdc1782 -> e
    java.util.Map fields -> f
    boolean append -> g
    com.lowagie.text.pdf.XfaForm xfa -> h
    boolean generateAppearances -> i
    void <init>(com.lowagie.text.pdf.PdfReader,com.lowagie.text.pdf.PdfStamperImp) -> <init>
    java.util.Map getAllFields() -> a
    com.lowagie.text.pdf.XfaForm getXfa() -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.AcroFields$Item -> a.a.a.c.b:
    java.util.ArrayList values -> a
    java.util.ArrayList widgets -> b
    java.util.ArrayList widgetRefs -> c
    java.util.ArrayList merged -> d
    java.util.ArrayList page -> e
    java.util.ArrayList tabOrder -> f
    com.lowagie.text.pdf.PdfIndirectReference fieldReference -> g
    void <init>(com.lowagie.text.pdf.PdfIndirectReference) -> <init>
    void addValue(com.lowagie.text.pdf.PdfDictionary) -> a
    void addWidget(com.lowagie.text.pdf.PdfDictionary) -> b
    void addWidgetRef(com.lowagie.text.pdf.PdfIndirectReference) -> a
    void addMerged(com.lowagie.text.pdf.PdfDictionary) -> c
    java.lang.Integer getPage(int) -> a
    void addPage(int) -> b
    void forcePage(int,int) -> a
    void addTabOrder(int) -> c
com.lowagie.text.pdf.ArabicLigaturizer -> a.a.a.c.c:
    char[][] chartable -> a
    boolean isVowel(char) -> a
    char charshape(char,int) -> a
    int shapecount(char) -> b
    void copycstostring(java.lang.StringBuffer,com.lowagie.text.pdf.ArabicLigaturizer$CharStruct,int) -> a
    boolean connects_to_left(com.lowagie.text.pdf.ArabicLigaturizer$CharStruct) -> a
    int arabic_shape$3b522b51(char[],int,int,char[],int,int) -> a
    void processNumbers$7f81bec6(char[],int,int) -> a
    void shapeToArabicDigitsWithContext$70b41294(char[],int,char,boolean) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.ArabicLigaturizer$CharStruct -> a.a.a.c.d:
    char basechar -> a
    char mark1 -> b
    char vowel -> c
    int lignum -> d
    int numshapes -> e
    void <init>() -> <init>
com.lowagie.text.pdf.BadPdfFormatException -> a.a.a.c.e:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.lowagie.text.pdf.BaseFont -> a.a.a.c.f:
    java.util.HashMap BuiltinFonts14 -> a
    java.util.concurrent.ConcurrentHashMap fontCache -> p
    java.util.ArrayList subsetRanges -> b
    int[] widths -> c
    java.lang.String[] differences -> d
    char[] unicodeDifferences -> e
    int[][] charBBoxes -> q
    java.lang.String encoding -> f
    boolean embedded -> g
    int compressionLevel -> h
    boolean fontSpecific -> i
    boolean forceWidthsOutput -> j
    boolean directTextToByte -> k
    boolean subset -> l
    boolean fastWinansi -> r
    com.lowagie.text.pdf.IntHashtable specialMap -> m
    java.security.SecureRandom secureRandom -> s
    boolean includeCidSet -> n
    int fontType -> o
    void <init>() -> <init>
    com.lowagie.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean) -> a
    com.lowagie.text.pdf.BaseFont createFont$12812930$1be0ac49(java.lang.String,java.lang.String,boolean) -> b
    com.lowagie.text.pdf.BaseFont createFont$610d92d6$12812930$1be0ac49(java.lang.String,java.lang.String,boolean) -> c
    com.lowagie.text.pdf.BaseFont createFont$5f565790$12812930$1be0ac49(java.lang.String,java.lang.String,boolean) -> d
    java.lang.String getBaseName(java.lang.String) -> a
    java.lang.String normalizeEncoding(java.lang.String) -> e
    java.io.InputStream getResourceStream(java.lang.String) -> b
    java.io.InputStream getResourceStream(java.lang.String,java.lang.ClassLoader) -> a
    void createEncoding() -> a
    int getRawWidth(int,java.lang.String) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> c
    float getWidthPoint(java.lang.String,float) -> a
    byte[] convertToBytes(java.lang.String) -> d
    byte[] convertToBytes(int) -> b
    void writeFont(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    java.lang.String getEncoding() -> b
    float getFontDescriptor(int,float) -> a
    boolean isEmbedded() -> c
    boolean isFontSpecific() -> d
    java.lang.String createSubsetPrefix() -> e
    char getUnicodeDifferences(int) -> c
    java.lang.String getPostscriptFontName() -> f
    java.lang.String[][] getFullFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int getUnicodeEquivalent(int) -> d
    int getCidCode(int) -> e
    int[] getRawCharBBox(int,java.lang.String) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.BaseFont$StreamFont -> a.a.a.c.g:
    void <init>(byte[],int[],int) -> <init>
    void <init>(byte[],java.lang.String,int) -> <init>
com.lowagie.text.pdf.BidiLine -> a.a.a.c.h:
    com.lowagie.text.pdf.IntHashtable mirrorChars -> a
    int runDirection -> b
    int pieceSize -> c
    char[] text -> d
    com.lowagie.text.pdf.PdfChunk[] detailChunks -> e
    int totalTextLength -> f
    byte[] orderLevels -> g
    int[] indexChars -> h
    java.util.ArrayList chunks -> i
    int indexChunk -> j
    int indexChunkChar -> k
    int currentChar -> l
    int storedRunDirection -> m
    char[] storedText -> n
    com.lowagie.text.pdf.PdfChunk[] storedDetailChunks -> o
    int storedTotalTextLength -> p
    byte[] storedOrderLevels -> q
    int[] storedIndexChars -> r
    int storedIndexChunk -> s
    int storedIndexChunkChar -> t
    int storedCurrentChar -> u
    boolean shortStore -> v
    int arabicOptions -> w
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.BidiLine) -> <init>
    boolean isWS(char) -> a
    boolean isEmpty() -> a
    void addChunk(com.lowagie.text.pdf.PdfChunk) -> a
    void restore() -> b
    com.lowagie.text.pdf.PdfLine processLine(float,float,int,int,int) -> a
    float getWidth(int,int) -> a
    java.util.ArrayList createArrayOfPdfChunks(int,int) -> b
    java.util.ArrayList createArrayOfPdfChunks(int,int,com.lowagie.text.pdf.PdfChunk) -> a
    int trimRightEx(int,int) -> c
    void reorder(int,int) -> d
    void flip(int,int) -> e
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.ByteBuffer -> a.a.a.c.i:
    char[] chars -> a
    byte[] bytes -> b
    byte[][] byteCache -> c
    int count -> d
    byte[] buf -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.String formatDouble(double) -> a
    java.lang.String formatDouble(double,com.lowagie.text.pdf.ByteBuffer) -> a
    com.lowagie.text.pdf.ByteBuffer append_i(int) -> a
    com.lowagie.text.pdf.ByteBuffer append(byte[],int,int) -> a
    com.lowagie.text.pdf.ByteBuffer append(byte[]) -> a
    com.lowagie.text.pdf.ByteBuffer append(java.lang.String) -> a
    com.lowagie.text.pdf.ByteBuffer append(char) -> a
    com.lowagie.text.pdf.ByteBuffer append(com.lowagie.text.pdf.ByteBuffer) -> a
    com.lowagie.text.pdf.ByteBuffer append(int) -> b
    com.lowagie.text.pdf.ByteBuffer append(byte) -> a
    com.lowagie.text.pdf.ByteBuffer appendHex(byte) -> b
    com.lowagie.text.pdf.ByteBuffer append(float) -> a
    void reset() -> a
    byte[] toByteArray() -> b
    int size() -> c
    void setSize(int) -> c
    java.lang.String toString() -> toString
    void writeTo(java.io.OutputStream) -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    byte[] getBuffer() -> d
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.CFFFont -> a.a.a.c.j:
    java.lang.String[] operatorNames -> m
    java.lang.String[] standardStrings -> a
    int offSize -> n
    java.lang.String key -> b
    java.lang.Object[] args -> c
    int arg_count -> d
    com.lowagie.text.pdf.RandomAccessFileOrArray buf -> e
    int nameIndexOffset -> o
    int topdictIndexOffset -> p
    int stringIndexOffset -> f
    int gsubrIndexOffset -> g
    int[] nameOffsets -> q
    int[] topdictOffsets -> h
    int[] stringOffsets -> i
    int[] gsubrOffsets -> j
    com.lowagie.text.pdf.CFFFont$Font[] fonts -> k
    int nextIndexOffset -> l
    void <init>(com.lowagie.text.pdf.RandomAccessFileOrArray) -> <init>
    char getCard8() -> a
    char getCard16() -> b
    int getOffset(int) -> d
    void seek(int) -> a
    short getShort() -> f
    int getInt() -> g
    int getPosition() -> c
    int[] getIndex(int) -> b
    void getDictItem() -> d
    com.lowagie.text.pdf.CFFFont$RangeItem getEntireIndexRange(int) -> c
    java.lang.String[] getNames() -> e
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.CFFFont$DictNumberItem -> a.a.a.c.k:
    int value -> b
    int size -> c
    void <init>(int) -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$DictOffsetItem -> a.a.a.c.l:
    int size -> c
    void <init>() -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$Font -> a.a.a.c.m:
    java.lang.String name -> a
    java.lang.String fullName -> b
    boolean isCID -> c
    int privateOffset -> d
    int privateLength -> e
    int privateSubrs -> f
    int charstringsOffset -> g
    int encodingOffset -> A
    int charsetOffset -> h
    int fdarrayOffset -> i
    int fdselectOffset -> j
    int[] fdprivateOffsets -> k
    int[] fdprivateLengths -> l
    int nglyphs -> m
    int nstrings -> n
    int CharsetLength -> o
    int[] charstringsOffsets -> p
    int[] FDSelect -> q
    int FDSelectLength -> r
    int FDSelectFormat -> s
    int CharstringType -> t
    int FDArrayCount -> u
    int FDArrayOffsize -> v
    int[] FDArrayOffsets -> w
    int[] PrivateSubrsOffset -> x
    int[][] PrivateSubrsOffsetsArray -> y
    int[] SubrsOffsets -> z
    com.lowagie.text.pdf.CFFFont this$0 -> B
    void <init>(com.lowagie.text.pdf.CFFFont) -> <init>
com.lowagie.text.pdf.CFFFont$IndexBaseItem -> a.a.a.c.n:
    void <init>() -> <init>
com.lowagie.text.pdf.CFFFont$IndexMarkerItem -> a.a.a.c.o:
    com.lowagie.text.pdf.CFFFont$IndexOffsetItem offItem$12956f17 -> b
    com.lowagie.text.pdf.CFFFont$IndexBaseItem indexBase -> c
    void <init>(com.lowagie.text.pdf.CFFFont$IndexOffsetItem,com.lowagie.text.pdf.CFFFont$IndexBaseItem) -> <init>
    void xref() -> a
com.lowagie.text.pdf.CFFFont$IndexOffsetItem -> a.a.a.c.p:
    int size -> c
    void <init>(int,int) -> <init>
    void <init>(int) -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$Item -> a.a.a.c.q:
    int myOffset -> a
    void <init>() -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
    void xref() -> a
com.lowagie.text.pdf.CFFFont$MarkerItem -> a.a.a.c.r:
    com.lowagie.text.pdf.CFFFont$DictOffsetItem p$12956f17 -> b
    void <init>(com.lowagie.text.pdf.CFFFont$DictOffsetItem) -> <init>
    void xref() -> a
com.lowagie.text.pdf.CFFFont$OffsetItem -> a.a.a.c.s:
    int value -> b
    void <init>() -> <init>
com.lowagie.text.pdf.CFFFont$RangeItem -> a.a.a.c.t:
    com.lowagie.text.pdf.RandomAccessFileOrArray buf -> b
    int offset -> c
    int length -> d
    void <init>(com.lowagie.text.pdf.RandomAccessFileOrArray,int,int) -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$StringItem -> a.a.a.c.u:
    java.lang.String s -> b
    void <init>(java.lang.String) -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$SubrMarkerItem -> a.a.a.c.v:
    com.lowagie.text.pdf.CFFFont$DictOffsetItem offItem$12956f17 -> b
    com.lowagie.text.pdf.CFFFont$IndexBaseItem indexBase -> c
    void <init>(com.lowagie.text.pdf.CFFFont$DictOffsetItem,com.lowagie.text.pdf.CFFFont$IndexBaseItem) -> <init>
    void xref() -> a
com.lowagie.text.pdf.CFFFont$UInt16Item -> a.a.a.c.w:
    char value -> b
    void <init>(char) -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$UInt24Item -> a.a.a.c.x:
    int value -> b
    void <init>() -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$UInt32Item -> a.a.a.c.y:
    int value -> b
    void <init>() -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFont$UInt8Item -> a.a.a.c.z:
    char value -> b
    void <init>(char) -> <init>
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.lowagie.text.pdf.CFFFontSubset -> a.a.a.c.A:
    java.lang.String[] SubrsFunctions -> m
    java.lang.String[] SubrsEscapeFuncs -> n
    java.util.HashMap GlyphsUsed -> o
    java.util.ArrayList glyphsInList -> p
    java.util.HashMap FDArrayUsed -> q
    java.util.HashMap[] hSubrsUsed -> r
    java.util.ArrayList[] lSubrsUsed -> s
    java.util.HashMap hGSubrsUsed -> t
    java.util.ArrayList lGSubrsUsed -> u
    java.util.HashMap hSubrsUsedNonCID -> v
    java.util.ArrayList lSubrsUsedNonCID -> w
    byte[][] NewLSubrsIndex -> x
    byte[] NewSubrsIndexNonCID -> y
    byte[] NewGSubrsIndex -> z
    byte[] NewCharStringsIndex -> A
    int GBias -> B
    java.util.LinkedList OutputList -> C
    int NumOfHints -> D
    void <init>(com.lowagie.text.pdf.RandomAccessFileOrArray,java.util.HashMap) -> <init>
    int CountRange(int,int) -> a
    byte[] Process(java.lang.String) -> a
    int CalcBias(int,int) -> b
    void BuildSubrUsed(int,int,int,int[],java.util.Map,java.util.List) -> a
    void ReadASubr(int,int,int,int,java.util.Map,java.util.List,int[]) -> a
    void HandelStack() -> f
    int StackOpp() -> g
    void EmptyStack() -> h
    void PopStack() -> i
    void PushStack() -> j
    void ReadCommand() -> k
    int CalcHints(int,int,int,int,int[]) -> a
    byte[] BuildNewIndex(int[],java.util.Map,byte) -> a
    byte[] AssembleIndex(int[],byte[]) -> a
    void BuildIndexHeader$4868d30e(int,int) -> c
    void CreateFDSelect$3b15def9(com.lowagie.text.pdf.CFFFont$DictOffsetItem,int) -> a
    void CreateFDArray$5cda8e4e(com.lowagie.text.pdf.CFFFont$DictOffsetItem,com.lowagie.text.pdf.CFFFont$DictOffsetItem,int) -> a
    int CalcSubrOffsetSize(int,int) -> d
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.CJKFont -> a.a.a.c.B:
    java.util.Properties cjkFonts -> p
    java.util.Properties cjkEncodings -> q
    java.util.concurrent.ConcurrentHashMap allFonts -> r
    boolean propertiesLoaded -> s
    java.lang.Object initLock -> t
    java.util.Hashtable allCMaps -> u
    java.lang.String fontName -> v
    java.lang.String style -> w
    java.lang.String CMap -> x
    boolean cidDirect -> y
    char[] translationMap -> z
    com.lowagie.text.pdf.IntHashtable vMetrics -> A
    com.lowagie.text.pdf.IntHashtable hMetrics -> B
    java.util.HashMap fontDesc -> C
    boolean vertical -> D
    void <init>(java.lang.String,java.lang.String) -> <init>
    void loadProperties() -> i
    boolean isCJKFont(java.lang.String,java.lang.String) -> a
    char[] readCMap(java.lang.String) -> e
    com.lowagie.text.pdf.IntHashtable createMetric(java.lang.String) -> f
    java.util.HashMap readFontProperties(java.lang.String) -> g
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> c
    int getRawWidth(int,java.lang.String) -> a
    void writeFont(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    float getDescNumber(java.lang.String) -> h
    float getBBox(int) -> f
    float getFontDescriptor(int,float) -> a
    java.lang.String getPostscriptFontName() -> f
    java.lang.String[][] getFullFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int getUnicodeEquivalent(int) -> d
    int getCidCode(int) -> e
    int[] getRawCharBBox(int,java.lang.String) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.CMYKColor -> a.a.a.c.C:
    float cyan -> a
    float magenta -> b
    float yellow -> c
    float black -> d
    void <init>(float,float,float,float,float) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.lowagie.text.pdf.ColorDetails -> a.a.a.c.D:
    com.lowagie.text.pdf.PdfIndirectReference indirectReference -> a
    com.lowagie.text.pdf.PdfName colorName -> b
    com.lowagie.text.pdf.PdfSpotColor spotcolor -> c
    void <init>(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfSpotColor) -> <init>
    com.lowagie.text.pdf.PdfArray getSpotColor$333d4c0b(com.lowagie.text.pdf.PdfWriter) -> a
com.lowagie.text.pdf.ColumnText -> a.a.a.c.E:
    int runDirection -> a
    float maxY -> b
    float minY -> c
    float leftX -> d
    float rightX -> e
    int alignment -> f
    java.util.List leftWall -> g
    java.util.List rightWall -> h
    com.lowagie.text.pdf.BidiLine bidiLine -> i
    float yLine -> j
    float currentLeading -> k
    float fixedLeading -> l
    float multipliedLeading -> m
    com.lowagie.text.pdf.PdfContentByte canvas -> n
    com.lowagie.text.pdf.PdfContentByte[] canvases -> o
    int lineStatus -> p
    float indent -> q
    float followingIndent -> r
    float rightIndent -> s
    float extraParagraphSpace -> t
    float rectangularWidth -> u
    boolean rectangularMode -> v
    float descender -> w
    boolean composite -> x
    com.lowagie.text.pdf.ColumnText compositeColumn -> y
    java.util.LinkedList compositeElements -> z
    int listIdx -> A
    com.lowagie.text.Phrase waitPhrase -> B
    float spaceCharRatio -> C
    boolean lastWasNewline -> D
    int linesWritten -> E
    float firstLineY -> F
    boolean firstLineYDone -> G
    int arabicOptions -> H
    boolean splittedRow -> I
    boolean useAscender -> J
    float filledWidth -> K
    boolean adjustFirstLine -> L
    void <init>(com.lowagie.text.pdf.PdfContentByte) -> <init>
    com.lowagie.text.pdf.ColumnText duplicate(com.lowagie.text.pdf.ColumnText) -> a
    void showTextAligned$2300922f$40ef7372(com.lowagie.text.pdf.PdfContentByte,int,com.lowagie.text.Phrase,float,float,int) -> a
    void showTextAligned$3ff84a4f(com.lowagie.text.pdf.PdfContentByte,int,com.lowagie.text.Phrase,float,float) -> a
    void addWaitingPhrase() -> i
    void addText(com.lowagie.text.Phrase) -> a
    void setText(com.lowagie.text.Phrase) -> b
    void addElement(com.lowagie.text.Element) -> a
    float findLimitsPoint(java.util.List) -> a
    float[] findLimitsOneLine() -> j
    float[] findLimitsTwoLines() -> k
    void setSimpleColumn(float,float,float,float) -> a
    void setLeading(float,float) -> a
    float getYLine() -> a
    void setYLine(float) -> a
    int getAlignment() -> b
    void setAlignment(int) -> a
    void setIndent(float) -> b
    void setFollowingIndent(float) -> c
    void setRightIndent(float) -> d
    int go() -> c
    int go(boolean) -> a
    int getRunDirection() -> d
    void setRunDirection(int) -> b
    float getDescender() -> e
    int goComposite(boolean) -> c
    void setCanvas(com.lowagie.text.pdf.PdfContentByte) -> a
    void setCanvases(com.lowagie.text.pdf.PdfContentByte[]) -> a
    boolean zeroHeightElement() -> f
    void setUseAscender(boolean) -> b
    float getFilledWidth() -> g
    void setFilledWidth$133aeb() -> h
    void updateFilledWidth(float) -> e
com.lowagie.text.pdf.DefaultSplitCharacter -> a.a.a.c.F:
    com.lowagie.text.pdf.DefaultSplitCharacter DEFAULT$47069ea3 -> a
    void <init>() -> <init>
    boolean isSplitCharacter$79eb670d(int,char[],com.lowagie.text.pdf.PdfChunk[]) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.DocumentFont -> a.a.a.c.G:
    java.lang.String[][] getFamilyFontName() -> h
    float getFontDescriptor(int,float) -> a
    java.lang.String[][] getFullFontName() -> g
    java.lang.String getPostscriptFontName() -> f
    int getRawWidth(int,java.lang.String) -> a
    void writeFont(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> c
    byte[] convertToBytes(java.lang.String) -> d
    byte[] convertToBytes(int) -> b
    int[] getRawCharBBox(int,java.lang.String) -> b
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.ExtendedColor -> a.a.a.c.H:
    int type -> e
    void <init>(int) -> <init>
    void <init>(int,float,float,float,float) -> <init>
    int getType(java.awt.Color) -> a
    float normalize(float) -> a
    int normalize(int) -> a
    int getType() -> a
com.lowagie.text.pdf.ExtraEncoding -> a.a.a.c.I:
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    byte[] charToByte$777d2fab(char) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.lowagie.text.pdf.FontDetails -> a.a.a.c.J:
    boolean subset -> d
    com.lowagie.text.pdf.PdfIndirectReference indirectReference -> a
    com.lowagie.text.pdf.PdfName fontName -> b
    com.lowagie.text.pdf.BaseFont baseFont -> c
    com.lowagie.text.pdf.TrueTypeFontUnicode ttu -> e
    com.lowagie.text.pdf.CJKFont cjkFont -> f
    byte[] shortTag -> g
    java.util.HashMap longTag -> h
    com.lowagie.text.pdf.IntHashtable cjkTag -> i
    int fontType -> j
    boolean symbolic -> k
    java.util.Map fillerCmap -> l
    void <init>(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.BaseFont) -> <init>
    byte[] convertToBytes(java.lang.String,com.lowagie.text.TextRenderingOptions) -> a
    void writeFont(com.lowagie.text.pdf.PdfWriter) -> a
    void setSubset$1385ff() -> a
    int[] lambda$convertToBytesWithGlyphs$0(int,int,int,java.lang.Integer) -> a
com.lowagie.text.pdf.FopGlyphProcessor -> a.a.a.c.K:
    boolean isFopSupported -> a
    boolean isFopSupported() -> a
    byte[] convertToBytesWithGlyphs$1936be8a(com.lowagie.text.pdf.TrueTypeFontUnicode,java.lang.String,java.lang.String,java.util.Map,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.GlyphList -> a.a.a.c.L:
    java.util.HashMap unicode2names -> a
    java.util.HashMap names2unicode -> b
    int[] nameToUnicode(java.lang.String) -> a
    java.lang.String unicodeToName(int) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.GrayColor -> a.a.a.c.M:
    com.lowagie.text.pdf.GrayColor GRAYBLACK -> a
    float gray -> b
    void <init>() -> <init>
    void <init>(float) -> <init>
    void <init>(float,float) -> <init>
    float getGray() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.HyphenationEvent -> a.a.a.c.N:
    java.lang.String getHyphenatedWordPre$2551a476() -> a
    java.lang.String getHyphenatedWordPost() -> b
com.lowagie.text.pdf.IntHashtable -> a.a.a.c.O:
    com.lowagie.text.pdf.IntHashtable$Entry[] table -> a
    int count -> b
    int threshold -> c
    float loadFactor -> d
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int,byte) -> <init>
    int size() -> a
    boolean containsKey(int) -> a
    int get(int) -> b
    int put(int,int) -> a
    int remove(int) -> c
    void clear() -> b
    com.lowagie.text.pdf.IntHashtable$IntHashtableIterator getEntryIterator$48db921e() -> c
    int[] getKeys() -> d
    java.lang.Object clone() -> clone
com.lowagie.text.pdf.IntHashtable$Entry -> a.a.a.c.P:
    int hash -> a
    int key -> b
    int value -> c
    com.lowagie.text.pdf.IntHashtable$Entry next -> d
    void <init>(int,int,int,com.lowagie.text.pdf.IntHashtable$Entry) -> <init>
    java.lang.Object clone() -> clone
com.lowagie.text.pdf.IntHashtable$IntHashtableIterator -> a.a.a.c.Q:
    int index -> a
    com.lowagie.text.pdf.IntHashtable$Entry[] table -> b
    com.lowagie.text.pdf.IntHashtable$Entry entry -> c
    void <init>(com.lowagie.text.pdf.IntHashtable$Entry[]) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.lowagie.text.pdf.LZWDecoder -> a.a.a.c.R:
    byte[][] stringTable -> a
    byte[] data -> b
    java.io.OutputStream uncompData -> c
    int tableIndex -> d
    int bitsToGet -> e
    int bytePointer -> f
    int bitPointer -> g
    int nextData -> h
    int nextBits -> i
    int[] andTable -> j
    void <init>() -> <init>
    void initializeStringTable() -> a
    void writeString(byte[]) -> a
    int getNextCode() -> b
com.lowagie.text.pdf.LayoutProcessor -> a.a.a.c.S:
    boolean isEnabled() -> a
    boolean supportsFont$1365d3b8() -> b
    void loadFont$7148f87e() -> c
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.LayoutProcessor$Version -> a.a.a.c.T:
    int ONE$456c0b35 -> b
    int TWO$456c0b35 -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.MappedRandomAccessFile -> a.a.a.c.U:
    java.nio.MappedByteBuffer mappedByteBuffer -> a
    java.nio.channels.FileChannel channel -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean cleanJava11(java.nio.ByteBuffer) -> a
    void init(java.nio.channels.FileChannel,java.nio.channels.FileChannel$MapMode) -> a
    int read() -> a
    int read(byte[],int,int) -> a
    long getFilePointer() -> b
    void seek(long) -> a
    long length() -> c
    void close() -> close
    void finalize() -> finalize
com.lowagie.text.pdf.MultiColumnText -> a.a.a.c.V:
    float desiredHeight -> a
    float totalHeight -> b
    boolean overflow -> c
    float top -> d
    com.lowagie.text.pdf.ColumnText columnText -> e
    java.util.List columnDefs -> f
    boolean simple -> g
    int currentColumn -> h
    float nextY -> i
    boolean columnsRightToLeft -> j
    com.lowagie.text.pdf.PdfDocument document -> k
    void <init>() -> <init>
    void <init>(byte) -> <init>
    float write$5a57538f(com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.PdfDocument) -> a
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    int type() -> b
    java.util.ArrayList getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
com.lowagie.text.pdf.MultiColumnText$ColumnDef -> a.a.a.c.W:
com.lowagie.text.pdf.OutputStreamCounter -> a.a.a.c.X:
    java.io.OutputStream out -> a
    long counter -> b
    void <init>(java.io.OutputStream) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(int) -> write
    void write(byte[],int,int) -> write
    long getCounter() -> a
com.lowagie.text.pdf.OutputStreamEncryption -> a.a.a.c.Y:
    java.io.OutputStream out -> a
    com.lowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> b
    com.lowagie.text.pdf.crypto.AESCipher cipher -> c
    byte[] sb -> d
    boolean aes -> e
    boolean finished -> f
    void <init>(java.io.OutputStream,byte[],int,int) -> <init>
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(int) -> write
    void write(byte[],int,int) -> write
    void finish() -> a
com.lowagie.text.pdf.PRAcroForm -> a.a.a.c.Z:
    int size() -> a
com.lowagie.text.pdf.PRIndirectReference -> a.a.a.c.aa:
    com.lowagie.text.pdf.PdfReader reader -> c
    void <init>(com.lowagie.text.pdf.PdfReader,int,int) -> <init>
    void <init>(com.lowagie.text.pdf.PdfReader,int) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    com.lowagie.text.pdf.PdfReader getReader() -> a
com.lowagie.text.pdf.PRStream -> a.a.a.c.ab:
    com.lowagie.text.pdf.PdfReader reader -> a
    int offset -> b
    int length -> c
    int objNum -> d
    int objGen -> e
    void <init>(com.lowagie.text.pdf.PdfReader,int) -> <init>
    int getOffset() -> b
    int getLength() -> c
    void setLength(int) -> a
    com.lowagie.text.pdf.PdfReader getReader() -> d
    byte[] getBytes() -> e
    void setObjNum(int,int) -> a
    int getObjNum() -> f
    int getObjGen() -> g
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.lowagie.text.pdf.PRTokeniser -> a.a.a.c.ac:
    boolean[] delims -> a
    com.lowagie.text.pdf.RandomAccessFileOrArray file -> b
    int type -> c
    java.lang.String stringValue -> d
    int reference -> e
    int generation -> f
    boolean hexString -> g
    void <init>(byte[]) -> <init>
    boolean isWhitespace(int) -> a
    int getHex(int) -> b
    int[] checkObjectStart(byte[]) -> a
    void seek(int) -> c
    int getFilePointer() -> a
    void close() -> close
    int length() -> b
    int read() -> c
    com.lowagie.text.pdf.RandomAccessFileOrArray getSafeFile() -> d
    com.lowagie.text.pdf.RandomAccessFileOrArray getFile() -> e
    java.lang.String readString(int) -> d
    int getTokenType() -> f
    java.lang.String getStringValue() -> g
    int getReference() -> h
    int getGeneration() -> i
    void backOnePosition(int) -> e
    void throwError(java.lang.String) -> a
    char checkPdfHeader() -> j
    int getStartxref() -> k
    void nextValidToken() -> l
    boolean nextToken() -> m
    int intValue() -> n
    boolean readLineSegment(byte[]) -> b
    boolean isHexString() -> o
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PageResources -> a.a.a.c.ad:
    com.lowagie.text.pdf.PdfDictionary fontDictionary -> a
    com.lowagie.text.pdf.PdfDictionary xObjectDictionary -> b
    com.lowagie.text.pdf.PdfDictionary colorDictionary -> c
    com.lowagie.text.pdf.PdfDictionary patternDictionary -> d
    com.lowagie.text.pdf.PdfDictionary shadingDictionary -> e
    com.lowagie.text.pdf.PdfDictionary extGStateDictionary -> f
    com.lowagie.text.pdf.PdfDictionary propertyDictionary -> g
    java.util.HashMap forbiddenNames -> h
    com.lowagie.text.pdf.PdfDictionary originalResources -> i
    int[] namePtr -> j
    java.util.HashMap usedNames -> k
    void <init>() -> <init>
    void setOriginalResources(com.lowagie.text.pdf.PdfDictionary,int[]) -> a
    com.lowagie.text.pdf.PdfName translateName(com.lowagie.text.pdf.PdfName) -> a
    com.lowagie.text.pdf.PdfName addFont(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference) -> a
    com.lowagie.text.pdf.PdfName addXObject(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference) -> b
    com.lowagie.text.pdf.PdfName addColor(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference) -> c
    void addDefaultColor(com.lowagie.text.pdf.PdfDictionary) -> a
    void addDefaultColorDiff(com.lowagie.text.pdf.PdfDictionary) -> b
    com.lowagie.text.pdf.PdfName addPattern(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference) -> d
    com.lowagie.text.pdf.PdfName addExtGState(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference) -> e
    com.lowagie.text.pdf.PdfName addProperty(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfIndirectReference) -> f
    com.lowagie.text.pdf.PdfResources getResources$2837eb40() -> a
com.lowagie.text.pdf.PatternColor -> a.a.a.c.ae:
    com.lowagie.text.pdf.PdfPatternPainter painter -> a
    void <init>(com.lowagie.text.pdf.PdfPatternPainter) -> <init>
    com.lowagie.text.pdf.PdfPatternPainter getPainter() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.lowagie.text.pdf.PdfAcroForm -> a.a.a.c.af:
    com.lowagie.text.pdf.PdfWriter writer -> a
    java.util.Map fieldTemplates -> b
    com.lowagie.text.pdf.PdfArray documentFields -> c
    com.lowagie.text.pdf.PdfArray calculationOrder -> d
    int sigFlags -> e
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    void addFieldTemplates(java.util.Map) -> a
    void addDocumentField(com.lowagie.text.pdf.PdfIndirectReference) -> a
    boolean isValid() -> b
com.lowagie.text.pdf.PdfAction -> a.a.a.c.ag:
    void <init>() -> <init>
    void <init>(java.net.URL) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,byte) -> <init>
    void <init>(com.lowagie.text.pdf.PdfIndirectReference) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(int) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
com.lowagie.text.pdf.PdfAnnotation -> a.a.a.c.ah:
    com.lowagie.text.pdf.PdfWriter writer -> a
    com.lowagie.text.pdf.PdfIndirectReference reference -> f
    java.util.Map templates -> b
    boolean form -> c
    boolean annotation -> d
    boolean used -> e
    int placeInPage -> j
    void <init>(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.Rectangle) -> <init>
    void <init>(com.lowagie.text.pdf.PdfWriter,float,float,float,float,com.lowagie.text.pdf.PdfString,com.lowagie.text.pdf.PdfString) -> <init>
    void <init>(com.lowagie.text.pdf.PdfWriter,float,float,float,float,com.lowagie.text.pdf.PdfAction) -> <init>
    com.lowagie.text.pdf.PdfAnnotation createScreen(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.Rectangle,java.lang.String,com.lowagie.text.pdf.PdfFileSpecification,java.lang.String,boolean) -> a
    com.lowagie.text.pdf.PdfIndirectReference getIndirectReference() -> b
    void setFlags$13462e() -> c
    boolean isUsed() -> d
    void setUsed() -> f
    java.util.HashMap getTemplates() -> g
    boolean isForm() -> h
    boolean isAnnotation() -> i
    int getPlaceInPage() -> j
    void addFKey() -> l
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfArray -> a.a.a.c.ai:
    java.util.List arrayList -> a
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfObject) -> <init>
    void <init>(float[]) -> <init>
    void <init>(int[]) -> <init>
    void <init>(java.util.List) -> <init>
    void <init>(com.lowagie.text.pdf.PdfArray) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    com.lowagie.text.pdf.PdfObject set(int,com.lowagie.text.pdf.PdfObject) -> a
    com.lowagie.text.pdf.PdfObject remove(int) -> a
    java.util.List getElements() -> a
    int size() -> b
    boolean isEmpty() -> c
    boolean add(com.lowagie.text.pdf.PdfObject) -> a
    boolean add(float[]) -> a
    boolean add(int[]) -> a
    void add$ddfbee4$19f92a90(int,com.lowagie.text.pdf.PRIndirectReference) -> a
    void addFirst(com.lowagie.text.pdf.PdfObject) -> b
    boolean contains$5df1c7d1(com.lowagie.text.pdf.PdfName) -> a
    com.lowagie.text.pdf.PdfObject getPdfObject(int) -> b
    com.lowagie.text.pdf.PdfObject getDirectObject(int) -> c
    com.lowagie.text.pdf.PdfDictionary getAsDict(int) -> d
    com.lowagie.text.pdf.PdfString getAsString(int) -> e
    com.lowagie.text.pdf.PdfNumber getAsNumber(int) -> f
    com.lowagie.text.pdf.PdfIndirectReference getAsIndirectObject(int) -> g
com.lowagie.text.pdf.PdfBoolean -> a.a.a.c.aj:
    com.lowagie.text.pdf.PdfBoolean PDFTRUE -> a
    com.lowagie.text.pdf.PdfBoolean PDFFALSE -> b
    boolean value -> c
    void <init>(boolean) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfBorderArray -> a.a.a.c.ak:
    void <init>(byte) -> <init>
    void <init>() -> <init>
com.lowagie.text.pdf.PdfChunk -> a.a.a.c.al:
    char[] singleSpace -> c
    com.lowagie.text.pdf.PdfChunk[] thisChunk -> d
    java.util.Map keysAttributes -> e
    java.util.Map keysNoStroke -> f
    java.lang.String value -> g
    java.lang.String encoding -> h
    com.lowagie.text.pdf.PdfFont font -> a
    com.lowagie.text.pdf.BaseFont baseFont -> i
    com.lowagie.text.SplitCharacter splitCharacter -> j
    java.util.Map attributes -> k
    java.util.Map noStroke -> l
    boolean newlineSplit -> m
    com.lowagie.text.Image image -> n
    float offsetX -> o
    float offsetY -> p
    boolean changeLeading -> b
    void <init>(java.lang.String,com.lowagie.text.pdf.PdfChunk) -> <init>
    void <init>(com.lowagie.text.Chunk,com.lowagie.text.pdf.PdfAction) -> <init>
    boolean noPrint(int) -> a
    int getUnicodeEquivalent(int) -> b
    com.lowagie.text.pdf.PdfChunk split(float) -> a
    com.lowagie.text.pdf.PdfChunk truncate(float) -> b
    com.lowagie.text.pdf.PdfFont font() -> a
    java.awt.Color color() -> b
    float width() -> c
    boolean isNewlineSplit() -> d
    float getWidthCorrected(float,float) -> a
    float getTextRise() -> e
    float trimLastSpace() -> f
    float trimFirstSpace() -> g
    java.lang.Object getAttribute(java.lang.String) -> a
    boolean isAttribute(java.lang.String) -> b
    boolean isStroked() -> h
    boolean isSeparator() -> i
    boolean isHorizontalSeparator() -> j
    boolean isVerticalSeparator() -> k
    boolean isTab() -> l
    void adjustLeft(float) -> c
    boolean isImage() -> m
    com.lowagie.text.Image getImage() -> n
    float getImageOffsetX() -> o
    float getImageOffsetY() -> p
    java.lang.String toString() -> toString
    boolean isSpecialEncoding() -> q
    int length() -> r
    int lengthUtf32() -> s
    boolean isExtSplitCharacter$79eb670d(int,char[],com.lowagie.text.pdf.PdfChunk[]) -> a
    java.lang.String trim(java.lang.String) -> c
    float getCharWidth(int) -> c
    boolean lambda$new$0(int) -> d
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfColor -> a.a.a.c.am:
    void <init>() -> <init>
com.lowagie.text.pdf.PdfContentByte -> a.a.a.c.an:
    float[] unitRect -> d
    java.util.Map abrev -> e
    com.lowagie.text.pdf.ByteBuffer content -> f
    com.lowagie.text.pdf.PdfWriter writer -> a
    com.lowagie.text.pdf.PdfDocument pdf -> b
    com.lowagie.text.pdf.PdfContentByte$GraphicState state -> g
    java.util.List stateList -> h
    int separator -> c
    java.util.List layerDepth -> i
    int mcDepth -> j
    boolean inText -> k
    int lastFillAlpha -> l
    int lastStrokeAlpha -> m
    java.awt.geom.Point2D layoutPositionCorrection -> n
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    byte[] escapeString(byte[]) -> a
    void escapeAndAppendString(byte[],com.lowagie.text.pdf.ByteBuffer) -> a
    java.util.List bezierArc(float,float,float,float,float,float) -> a
    java.lang.String toString() -> toString
    com.lowagie.text.pdf.ByteBuffer getInternalBuffer() -> a
    byte[] toPdf$3b351546() -> b
    void add(com.lowagie.text.pdf.PdfContentByte) -> a
    float getXTLM() -> c
    float getYTLM() -> d
    float getCharacterSpacing() -> e
    void setCharacterSpacing(float) -> a
    void setWordSpacing(float) -> b
    void setLineCap(int) -> a
    void setLineDash$133aeb() -> f
    void setLineDash$2548a35() -> g
    void setLineDash$483d242b() -> h
    void setLineJoin(int) -> b
    void setLineWidth(float) -> c
    void clip() -> i
    void eoClip() -> j
    void setGrayFill(float) -> d
    void setGrayFill(float,float) -> e
    void resetGrayFill() -> k
    void resetGrayStroke() -> l
    void HelperRGB(int,int,int) -> a
    void resetRGBColorFill() -> m
    void resetRGBColorStroke() -> n
    void HelperCMYK(float,float,float,float) -> b
    void moveTo(float,float) -> a
    void lineTo(float,float) -> b
    void curveTo(float,float,float,float,float,float) -> b
    void rectangle(float,float,float,float) -> a
    boolean compareColors(java.awt.Color,java.awt.Color) -> a
    void rectangle(com.lowagie.text.Rectangle) -> a
    void closePath() -> o
    void newPath() -> p
    void stroke() -> q
    void closePathStroke() -> r
    void fill() -> s
    void eoFill() -> t
    void closePathFillStroke() -> u
    void closePathEoFillStroke() -> v
    void addImage(com.lowagie.text.Image) -> a
    void addImage(com.lowagie.text.Image,float,float,float,float,float,float) -> a
    void addImage$7a1b5810(com.lowagie.text.Image,float,float,float,float,float,float) -> b
    void reset() -> w
    void beginText() -> x
    void endText() -> y
    void saveState() -> z
    void restoreState() -> A
    void setFontAndSize(com.lowagie.text.pdf.BaseFont,float) -> a
    void setTextRenderingMode(int) -> c
    void setTextRise(float) -> e
    void showText2(java.lang.String) -> c
    void showText(java.lang.String) -> a
    void setTextMatrix$7b59a84b(float,float,float,float,float) -> a
    void setTextMatrix(float,float) -> c
    void moveText(float,float) -> d
    int size() -> B
    void concatCTM(float,float,float,float,float,float) -> c
    void arc(float,float,float,float,float,float) -> d
    void addTemplate(com.lowagie.text.pdf.PdfTemplate,float,float,float,float,float,float) -> a
    void setColorStroke(java.awt.Color) -> a
    void saveColorStroke(com.lowagie.text.pdf.ExtendedColor) -> a
    void setColorFill(java.awt.Color) -> b
    void saveColorFill(com.lowagie.text.pdf.ExtendedColor) -> b
    void setColorFill(com.lowagie.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.lowagie.text.pdf.PdfSpotColor,float) -> b
    void setPatternFill(com.lowagie.text.pdf.PdfPatternPainter) -> a
    void outputColorNumbers(java.awt.Color,float) -> a
    void setPatternFill(com.lowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> a
    void setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> b
    void setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter) -> b
    void checkWriter() -> G
    void showText(com.lowagie.text.pdf.PdfTextArray) -> a
    com.lowagie.text.pdf.PdfWriter getPdfWriter() -> C
    com.lowagie.text.pdf.PdfDocument getPdfDocument() -> D
    com.lowagie.text.pdf.PdfContentByte getDuplicate() -> E
    void roundRectangle(float,float,float,float,float) -> b
    void setLiteral(java.lang.String) -> b
    com.lowagie.text.pdf.PageResources getPageResources() -> F
    void setGState(com.lowagie.text.pdf.PdfGState) -> a
    void beginLayer(com.lowagie.text.pdf.PdfOCG) -> a
    void beginLayer2(com.lowagie.text.pdf.PdfOCG) -> b
    void endLayer() -> H
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> a
    void sanityCheck() -> I
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfContentByte$GraphicState -> a.a.a.c.ao:
    float xTLM -> a
    float yTLM -> b
    float leading -> k
    float scale -> l
    float charSpace -> c
    float wordSpace -> d
    com.lowagie.text.pdf.ExtendedColor colorFill -> e
    com.lowagie.text.pdf.ExtendedColor colorStroke -> f
    com.lowagie.text.pdf.PdfObject extGState -> g
    com.lowagie.text.pdf.FontDetails fontDetails -> h
    com.lowagie.text.pdf.ColorDetails colorDetails -> i
    float size -> j
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfContentByte$GraphicState) -> <init>
    void copyParameters(com.lowagie.text.pdf.PdfContentByte$GraphicState) -> b
    void restore(com.lowagie.text.pdf.PdfContentByte$GraphicState) -> a
com.lowagie.text.pdf.PdfContents -> a.a.a.c.ap:
    byte[] SAVESTATE -> a
    byte[] RESTORESTATE -> b
    byte[] ROTATE90 -> c
    byte[] ROTATE180 -> d
    byte[] ROTATE270 -> e
    byte[] ROTATEFINAL -> f
    void <init>(com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.Rectangle) -> <init>
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfDate -> a.a.a.c.aq:
    void <init>(java.util.Calendar) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    java.lang.String setLength(int,int) -> b
    java.lang.String getW3CDate() -> a
com.lowagie.text.pdf.PdfDestination -> a.a.a.c.ar:
    boolean status -> a
    void <init>(float) -> <init>
    void <init>(float,float) -> <init>
    boolean hasPage() -> d
    boolean addPage(com.lowagie.text.pdf.PdfIndirectReference) -> a
com.lowagie.text.pdf.PdfDictionary -> a.a.a.c.as:
    com.lowagie.text.pdf.PdfName OUTLINES -> g
    com.lowagie.text.pdf.PdfName PAGE -> h
    com.lowagie.text.pdf.PdfName CATALOG -> i
    java.util.Map hashMap -> a
    com.lowagie.text.pdf.PdfName dictionaryType -> b
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfName) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    void put(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfObject) -> a
    void putAll(com.lowagie.text.pdf.PdfDictionary) -> a
    void remove(com.lowagie.text.pdf.PdfName) -> a
    com.lowagie.text.pdf.PdfObject get(com.lowagie.text.pdf.PdfName) -> b
    com.lowagie.text.pdf.PdfObject getDirectObject(com.lowagie.text.pdf.PdfName) -> i
    java.util.Set getKeys() -> k
    int size() -> a
    boolean contains(com.lowagie.text.pdf.PdfName) -> c
    void merge(com.lowagie.text.pdf.PdfDictionary) -> b
    void mergeDifferent(com.lowagie.text.pdf.PdfDictionary) -> c
    com.lowagie.text.pdf.PdfDictionary getAsDict(com.lowagie.text.pdf.PdfName) -> d
    com.lowagie.text.pdf.PdfArray getAsArray(com.lowagie.text.pdf.PdfName) -> e
    com.lowagie.text.pdf.PdfString getAsString(com.lowagie.text.pdf.PdfName) -> f
    com.lowagie.text.pdf.PdfNumber getAsNumber(com.lowagie.text.pdf.PdfName) -> g
    com.lowagie.text.pdf.PdfName getAsName(com.lowagie.text.pdf.PdfName) -> h
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfDocument -> a.a.a.c.at:
    com.lowagie.text.pdf.PdfWriter writer -> q
    com.lowagie.text.pdf.PdfContentByte text -> r
    com.lowagie.text.pdf.PdfContentByte graphics -> s
    float leading -> t
    int alignment -> u
    float currentHeight -> v
    boolean isSectionTitle -> w
    int leadingCount -> x
    com.lowagie.text.pdf.PdfAction anchorAction -> y
    int textEmptySize -> z
    byte[] xmpMetadata -> A
    float nextMarginLeft -> B
    float nextMarginRight -> C
    float nextMarginTop -> D
    float nextMarginBottom -> E
    boolean firstPageEvent -> F
    com.lowagie.text.pdf.PdfLine line -> G
    java.util.List lines -> H
    int lastElementType -> I
    com.lowagie.text.pdf.PdfDocument$Indentation indentation -> J
    com.lowagie.text.pdf.PdfDocument$PdfInfo info -> K
    com.lowagie.text.pdf.PdfOutline rootOutline -> L
    com.lowagie.text.pdf.PdfOutline currentOutline -> M
    com.lowagie.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> N
    com.lowagie.text.pdf.PdfPageLabels pageLabels -> p
    java.util.TreeMap localDestinations -> O
    java.util.HashMap documentLevelJS -> P
    java.util.HashMap documentFileAttachment -> Q
    java.lang.String openActionName -> R
    com.lowagie.text.pdf.PdfAction openActionAction -> S
    com.lowagie.text.pdf.PdfDictionary additionalActions -> T
    com.lowagie.text.pdf.collection.PdfCollection collection -> U
    int markPoint -> V
    com.lowagie.text.Rectangle nextPageSize -> W
    java.util.HashMap thisBoxSize -> X
    java.util.HashMap boxSize -> Y
    int duration -> Z
    com.lowagie.text.pdf.PdfTransition transition -> aa
    com.lowagie.text.pdf.PdfDictionary pageAA -> ab
    com.lowagie.text.pdf.PdfIndirectReference thumb -> ac
    com.lowagie.text.pdf.PageResources pageResources -> ad
    boolean strictImageSequence -> ae
    float imageEnd -> af
    com.lowagie.text.Image imageWait -> ag
    com.lowagie.text.pdf.internal.PdfAnnotationsImp annotationsImp -> ah
    boolean pageEmpty -> ai
    boolean isDoFooter -> aj
    void <init>() -> <init>
    void addWriter(com.lowagie.text.pdf.PdfWriter) -> a
    boolean add(com.lowagie.text.Element) -> a
    void open() -> a
    void close() -> close
    boolean newPage() -> b
    boolean setPageSize(com.lowagie.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
    void initPage() -> p
    void newLine() -> q
    void carriageReturn() -> r
    float getVerticalPosition$1385ef() -> k
    void ensureNewLine() -> s
    float flushLines() -> t
    void writeLineToContent(com.lowagie.text.pdf.PdfLine,com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.PdfContentByte,java.lang.Object[],float) -> a
    float indentLeft() -> u
    float indentRight() -> v
    float indentTop() -> w
    float indentBottom() -> x
    void addSpacing(float,float,com.lowagie.text.Font) -> a
    com.lowagie.text.pdf.PdfDocument$PdfInfo getInfo() -> l
    com.lowagie.text.pdf.PdfDocument$PdfCatalog getCatalog(com.lowagie.text.pdf.PdfIndirectReference) -> a
    void traverseOutlineCount(com.lowagie.text.pdf.PdfOutline) -> a
    void outlineTree(com.lowagie.text.pdf.PdfOutline) -> b
    void localGoto(java.lang.String,float,float,float,float) -> a
    void remoteGoto(java.lang.String,java.lang.String,float,float,float,float) -> a
    void remoteGoto(java.lang.String,int,float,float,float,float) -> a
    com.lowagie.text.pdf.PdfAction getLocalGotoAction(java.lang.String) -> a
    boolean localDestination(java.lang.String,com.lowagie.text.pdf.PdfDestination) -> a
    java.util.HashMap getDocumentLevelJS() -> m
    java.util.HashMap getDocumentFileAttachment() -> n
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> a
    void setNewPageSizeAndMargins() -> y
    com.lowagie.text.pdf.PageResources getPageResources() -> o
    void add(com.lowagie.text.Image) -> a
    void addPTable(com.lowagie.text.pdf.PdfPTable) -> a
    void setTableWidth(com.lowagie.text.pdf.PdfPTable) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfDocument$Indentation -> a.a.a.c.au:
    float indentLeft -> a
    float sectionIndentLeft -> b
    float listIndentLeft -> c
    float imageIndentLeft -> d
    float indentRight -> e
    float sectionIndentRight -> f
    float imageIndentRight -> g
    float indentTop -> h
    float indentBottom -> i
    void <init>() -> <init>
com.lowagie.text.pdf.PdfDocument$PdfCatalog -> a.a.a.c.av:
    com.lowagie.text.pdf.PdfWriter writer -> a
    void <init>(com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfWriter) -> <init>
com.lowagie.text.pdf.PdfDocument$PdfInfo -> a.a.a.c.aw:
    void <init>() -> <init>
com.lowagie.text.pdf.PdfEFStream -> a.a.a.c.ax:
    void <init>(java.io.InputStream,com.lowagie.text.pdf.PdfWriter) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.lowagie.text.pdf.PdfEncodings -> a.a.a.c.ay:
    char[] winansiByteToChar -> b
    char[] pdfEncodingByteToChar -> c
    com.lowagie.text.pdf.IntHashtable winansi -> a
    com.lowagie.text.pdf.IntHashtable pdfEncoding -> d
    java.util.concurrent.ConcurrentHashMap extraEncodings -> e
    byte[] convertToBytes(java.lang.String,java.lang.String) -> a
    byte[] convertToBytes(char,java.lang.String) -> a
    java.lang.String convertToString(byte[],java.lang.String) -> a
    boolean isPdfDocEncoding(java.lang.String) -> a
    void addExtraEncoding(java.lang.String,com.lowagie.text.pdf.ExtraEncoding) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfEncodings$Cp437Conversion -> a.a.a.c.az:
    char[] table -> a
    com.lowagie.text.pdf.IntHashtable c2b -> b
    void <init>() -> <init>
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    byte[] charToByte$777d2fab(char) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfEncodings$SymbolConversion -> a.a.a.c.aA:
    com.lowagie.text.pdf.IntHashtable t1 -> a
    com.lowagie.text.pdf.IntHashtable t2 -> b
    char[] table1 -> c
    char[] table2 -> d
    com.lowagie.text.pdf.IntHashtable translation -> e
    char[] revTranslation -> f
    void <init>(boolean) -> <init>
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    byte[] charToByte$777d2fab(char) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfEncodings$SymbolTTConversion -> a.a.a.c.aB:
    void <init>() -> <init>
    byte[] charToByte$777d2fab(char) -> a
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.lowagie.text.pdf.PdfEncodings$WingdingsConversion -> a.a.a.c.aC:
    byte[] table -> a
    void <init>() -> <init>
    byte[] charToByte$777d2fab(char) -> a
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfEncryption -> a.a.a.c.aD:
    byte[] pad -> d
    byte[] salt -> e
    byte[] metadataPad -> f
    long seq -> g
    com.lowagie.text.pdf.PdfPublicKeySecurityHandler publicKeyHandler -> h
    byte[] key -> i
    int keySize -> j
    byte[] mkey -> k
    byte[] extra -> l
    java.security.MessageDigest md5 -> m
    byte[] ownerKey -> n
    byte[] userKey -> a
    byte[] oeKey -> o
    byte[] ueKey -> p
    byte[] perms -> q
    int permissions -> b
    byte[] documentID -> c
    int revision -> r
    com.lowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> s
    int keyLength -> t
    boolean encryptMetadata -> u
    boolean embeddedFilesOnly -> v
    int cryptoMode -> w
    void <init>() -> <init>
    byte[] createDocumentId() -> a
    com.lowagie.text.pdf.PdfLiteral createInfoId$3f16930(byte[]) -> a
    com.lowagie.text.pdf.PdfLiteral createInfoId$3f507d7(byte[],byte[]) -> a
    void setCryptoMode(int,int) -> a
    boolean isMetadataEncrypted() -> b
    boolean isEmbeddedFilesOnly() -> c
    byte[] padPassword(byte[]) -> e
    void setupGlobalEncryptionKey(byte[],byte[],byte[],int) -> c
    void setupUserKey() -> e
    void setupByUserPassword(byte[],byte[],byte[],int) -> a
    void setupByOwnerPassword$240a11ee(byte[],byte[],byte[],int) -> b
    void setupByEncryptionKey(byte[],int) -> a
    void setHashKey(int,int) -> b
    com.lowagie.text.pdf.PdfDictionary getEncryptionDictionary() -> d
    com.lowagie.text.pdf.OutputStreamEncryption getEncryptionStream(java.io.OutputStream) -> a
    int calculateStreamSize(int) -> a
    byte[] encryptByteArray(byte[]) -> b
    byte[] decryptByteArray(byte[]) -> c
    void setupByOwnerPassword$28748b7c(byte[],byte[],byte[],byte[],byte[],int) -> a
    void setupByUserPassword$28748b7c(byte[],byte[],byte[],byte[],byte[],int) -> b
    boolean decryptAndCheckPerms(byte[]) -> d
    byte[] hashAlg2B(byte[],byte[],byte[]) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfException -> a.a.a.c.aE:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.lowagie.text.pdf.PdfFileSpecification -> a.a.a.c.aF:
    com.lowagie.text.pdf.PdfWriter writer -> a
    com.lowagie.text.pdf.PdfIndirectReference ref -> b
    void <init>() -> <init>
    com.lowagie.text.pdf.PdfFileSpecification fileEmbedded$6314a156(com.lowagie.text.pdf.PdfWriter,java.lang.String,java.lang.String) -> a
    com.lowagie.text.pdf.PdfFileSpecification fileEmbedded$4b7d4cb4$5b2ebc4b(com.lowagie.text.pdf.PdfWriter,java.lang.String,java.lang.String) -> b
    com.lowagie.text.pdf.PdfFileSpecification fileExtern(com.lowagie.text.pdf.PdfWriter,java.lang.String) -> a
    com.lowagie.text.pdf.PdfIndirectReference getReference() -> b
    void setUnicodeFileName(java.lang.String,boolean) -> a
com.lowagie.text.pdf.PdfFont -> a.a.a.c.aG:
    com.lowagie.text.Image image -> a
    float hScale -> b
    com.lowagie.text.pdf.BaseFont font -> c
    float size -> d
    void <init>(com.lowagie.text.pdf.BaseFont,float) -> <init>
    com.lowagie.text.pdf.PdfFont getDefaultFont() -> a
    int compareTo(java.lang.Object) -> compareTo
    float size() -> b
    float width(int) -> a
    float width(java.lang.String) -> a
    com.lowagie.text.pdf.BaseFont getFont() -> c
    void setImage(com.lowagie.text.Image) -> a
    void setHorizontalScaling(float) -> a
com.lowagie.text.pdf.PdfFormField -> a.a.a.c.aH:
    com.lowagie.text.pdf.PdfName[] mergeTarget -> f
    com.lowagie.text.pdf.PdfFormField parent -> j
    java.util.List kids -> k
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    void mergeResources$3f227acc(com.lowagie.text.pdf.PdfDictionary,com.lowagie.text.pdf.PdfDictionary) -> a
    void mergeResources(com.lowagie.text.pdf.PdfDictionary,com.lowagie.text.pdf.PdfDictionary) -> b
    com.lowagie.text.pdf.PdfAnnotation shallowDuplicate(com.lowagie.text.pdf.PdfAnnotation) -> a
    com.lowagie.text.pdf.PdfFormField getParent() -> l
    java.util.List getKidFields() -> m
    void setUsed() -> f
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfFormXObject -> a.a.a.c.aI:
    com.lowagie.text.pdf.PdfNumber ONE -> a
    com.lowagie.text.pdf.PdfLiteral MATRIX -> b
    void <init>(com.lowagie.text.pdf.PdfTemplate,int) -> <init>
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfFunction -> a.a.a.c.aJ:
    com.lowagie.text.pdf.PdfWriter writer -> a
    com.lowagie.text.pdf.PdfIndirectReference reference -> b
    com.lowagie.text.pdf.PdfDictionary dictionary -> c
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    com.lowagie.text.pdf.PdfFunction type2$f4d5a8a(com.lowagie.text.pdf.PdfWriter,float[],float[],float[]) -> a
    com.lowagie.text.pdf.PdfIndirectReference getReference() -> a
com.lowagie.text.pdf.PdfGState -> a.a.a.c.aK:
    com.lowagie.text.pdf.PdfName BM_NORMAL -> a
    com.lowagie.text.pdf.PdfName BM_COMPATIBLE -> b
    void <init>() -> <init>
    void setStrokeOpacity(float) -> a
    void setFillOpacity(float) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfICCBased -> a.a.a.c.aL:
    void <init>(java.awt.color.ICC_Profile,int) -> <init>
com.lowagie.text.pdf.PdfImage -> a.a.a.c.aM:
    com.lowagie.text.pdf.PdfName name -> a
    void <init>(com.lowagie.text.Image,java.lang.String,com.lowagie.text.pdf.PdfIndirectReference) -> <init>
    void transferBytes$1ade3353(java.io.InputStream,java.io.OutputStream) -> a
    com.lowagie.text.pdf.PdfName name() -> b
com.lowagie.text.pdf.PdfImportedPage -> a.a.a.c.aN:
    void addImage(com.lowagie.text.Image,float,float,float,float,float,float) -> a
    void addTemplate(com.lowagie.text.pdf.PdfTemplate,float,float,float,float,float,float) -> a
    com.lowagie.text.pdf.PdfContentByte getDuplicate() -> E
    com.lowagie.text.pdf.PdfFormXObject getFormXObject$c6132c3(int) -> d
    void setColorFill(com.lowagie.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.lowagie.text.pdf.PdfSpotColor,float) -> b
    com.lowagie.text.pdf.PdfResources getResources$de7b337() -> G
    void setFontAndSize(com.lowagie.text.pdf.BaseFont,float) -> a
    void throwError() -> H
com.lowagie.text.pdf.PdfIndirectObject -> a.a.a.c.aO:
    byte[] STARTOBJ -> a
    byte[] ENDOBJ -> b
    int number -> c
    int generation -> d
    com.lowagie.text.pdf.PdfObject object -> e
    com.lowagie.text.pdf.PdfWriter writer -> f
    void <init>(int,com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfWriter) -> <init>
    void <init>(int,com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfWriter,byte) -> <init>
    com.lowagie.text.pdf.PdfIndirectReference getIndirectReference() -> a
    void writeTo$a3063a7(com.lowagie.text.pdf.OutputStreamCounter) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfIndirectReference -> a.a.a.c.aP:
    int number -> a
    int generation -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void <init>(int) -> <init>
    int getNumber() -> b
    java.lang.String toString() -> toString
com.lowagie.text.pdf.PdfLayer -> a.a.a.c.aQ:
    com.lowagie.text.pdf.PdfIndirectReference getRef() -> b
    com.lowagie.text.pdf.PdfDictionary getPdfObject$de7b337() -> c
com.lowagie.text.pdf.PdfLayerMembership -> a.a.a.c.aR:
    com.lowagie.text.pdf.PdfIndirectReference getRef() -> b
    com.lowagie.text.pdf.PdfDictionary getPdfObject$de7b337() -> c
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfLine -> a.a.a.c.aS:
    java.util.ArrayList line -> a
    float left -> b
    float width -> c
    int alignment -> d
    float height -> e
    com.lowagie.text.Chunk listSymbol -> f
    float symbolIndent -> g
    boolean newlineSplit -> h
    float originalWidth -> i
    boolean isRTL -> j
    void <init>(float,float,int,float) -> <init>
    void <init>(float,float,int,boolean,java.util.ArrayList,boolean) -> <init>
    com.lowagie.text.pdf.PdfChunk add(com.lowagie.text.pdf.PdfChunk) -> a
    void addToLine(com.lowagie.text.pdf.PdfChunk) -> b
    int size() -> a
    java.util.Iterator iterator() -> b
    float height() -> c
    float indentLeft() -> d
    boolean hasToBeJustified() -> e
    void resetAlignment() -> f
    void setExtraIndent(float) -> a
    float widthLeft() -> g
    int numberOfSpaces() -> h
    void setListItem(com.lowagie.text.ListItem) -> a
    com.lowagie.text.Chunk listSymbol() -> i
    float listIndent() -> j
    java.lang.String toString() -> toString
    int GetLineLengthUtf32() -> k
    boolean isNewlineSplit() -> l
    int getLastStrokeChunk() -> m
    com.lowagie.text.pdf.PdfChunk getChunk(int) -> a
    float getOriginalWidth() -> n
    float[] getMaxSize() -> o
    boolean isRTL() -> p
    int getSeparatorCount() -> q
    float getAscender() -> r
    float getDescender() -> s
com.lowagie.text.pdf.PdfLiteral -> a.a.a.c.aT:
    long position -> a
    void <init>(java.lang.String) -> <init>
    void <init>(byte[]) -> <init>
    void <init>(int,java.lang.String) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.lowagie.text.pdf.PdfMediaClipData -> a.a.a.c.aU:
    void <init>(java.lang.String,com.lowagie.text.pdf.PdfFileSpecification,java.lang.String) -> <init>
com.lowagie.text.pdf.PdfName -> a.a.a.c.aV:
    com.lowagie.text.pdf.PdfName A -> a
    com.lowagie.text.pdf.PdfName AA -> b
    com.lowagie.text.pdf.PdfName ACROFORM -> c
    com.lowagie.text.pdf.PdfName ADBE_PKCS7_S4 -> d
    com.lowagie.text.pdf.PdfName ADBE_PKCS7_S5 -> e
    com.lowagie.text.pdf.PdfName AESV2 -> f
    com.lowagie.text.pdf.PdfName AESV3 -> g
    com.lowagie.text.pdf.PdfName AF -> eY
    com.lowagie.text.pdf.PdfName ALTERNATE -> h
    com.lowagie.text.pdf.PdfName ANNOT -> i
    com.lowagie.text.pdf.PdfName ANNOTS -> j
    com.lowagie.text.pdf.PdfName AP -> eZ
    com.lowagie.text.pdf.PdfName APPDEFAULT -> k
    com.lowagie.text.pdf.PdfName ARTBOX -> l
    com.lowagie.text.pdf.PdfName ASCENT -> m
    com.lowagie.text.pdf.PdfName AS -> n
    com.lowagie.text.pdf.PdfName AUTHEVENT -> o
    com.lowagie.text.pdf.PdfName AUTHOR -> p
    com.lowagie.text.pdf.PdfName B -> q
    com.lowagie.text.pdf.PdfName BASEFONT -> r
    com.lowagie.text.pdf.PdfName BBOX -> s
    com.lowagie.text.pdf.PdfName BITSPERCOMPONENT -> t
    com.lowagie.text.pdf.PdfName BL -> u
    com.lowagie.text.pdf.PdfName BLACKIS1 -> v
    com.lowagie.text.pdf.PdfName BLEEDBOX -> w
    com.lowagie.text.pdf.PdfName BM -> x
    com.lowagie.text.pdf.PdfName BORDER -> y
    com.lowagie.text.pdf.PdfName BS -> z
    com.lowagie.text.pdf.PdfName C -> A
    com.lowagie.text.pdf.PdfName C0 -> B
    com.lowagie.text.pdf.PdfName C1 -> C
    com.lowagie.text.pdf.PdfName CA -> D
    com.lowagie.text.pdf.PdfName ca -> E
    com.lowagie.text.pdf.PdfName CALRGB -> F
    com.lowagie.text.pdf.PdfName CAPHEIGHT -> G
    com.lowagie.text.pdf.PdfName CATALOG -> H
    com.lowagie.text.pdf.PdfName CATEGORY -> I
    com.lowagie.text.pdf.PdfName CCITTFAXDECODE -> J
    com.lowagie.text.pdf.PdfName CENTERWINDOW -> K
    com.lowagie.text.pdf.PdfName CF -> L
    com.lowagie.text.pdf.PdfName CFM -> M
    com.lowagie.text.pdf.PdfName CIDFONTTYPE0 -> N
    com.lowagie.text.pdf.PdfName CIDFONTTYPE2 -> O
    com.lowagie.text.pdf.PdfName CIDSET -> P
    com.lowagie.text.pdf.PdfName CIDSYSTEMINFO -> Q
    com.lowagie.text.pdf.PdfName CIDTOGIDMAP -> R
    com.lowagie.text.pdf.PdfName CO -> S
    com.lowagie.text.pdf.PdfName COLORS -> T
    com.lowagie.text.pdf.PdfName COLORSPACE -> U
    com.lowagie.text.pdf.PdfName COLUMNS -> V
    com.lowagie.text.pdf.PdfName CONTENTS -> W
    com.lowagie.text.pdf.PdfName COUNT -> X
    com.lowagie.text.pdf.PdfName COURIER -> Y
    com.lowagie.text.pdf.PdfName COURIER_BOLD -> Z
    com.lowagie.text.pdf.PdfName COURIER_OBLIQUE -> aa
    com.lowagie.text.pdf.PdfName COURIER_BOLDOBLIQUE -> ab
    com.lowagie.text.pdf.PdfName CREATIONDATE -> ac
    com.lowagie.text.pdf.PdfName CREATOR -> ad
    com.lowagie.text.pdf.PdfName CROPBOX -> ae
    com.lowagie.text.pdf.PdfName CRYPT -> af
    com.lowagie.text.pdf.PdfName CS -> ag
    com.lowagie.text.pdf.PdfName D -> ah
    com.lowagie.text.pdf.PdfName DA -> ai
    com.lowagie.text.pdf.PdfName DCTDECODE -> aj
    com.lowagie.text.pdf.PdfName DECODE -> ak
    com.lowagie.text.pdf.PdfName DECODEPARMS -> al
    com.lowagie.text.pdf.PdfName DEFAULTCRYPTFILTER -> am
    com.lowagie.text.pdf.PdfName DESCENDANTFONTS -> an
    com.lowagie.text.pdf.PdfName DESCENT -> ao
    com.lowagie.text.pdf.PdfName DEST -> ap
    com.lowagie.text.pdf.PdfName DESTS -> aq
    com.lowagie.text.pdf.PdfName DEVICEGRAY -> ar
    com.lowagie.text.pdf.PdfName DEVICERGB -> as
    com.lowagie.text.pdf.PdfName DEVICECMYK -> at
    com.lowagie.text.pdf.PdfName DIFFERENCES -> au
    com.lowagie.text.pdf.PdfName DIRECTION -> av
    com.lowagie.text.pdf.PdfName DISPLAYDOCTITLE -> aw
    com.lowagie.text.pdf.PdfName DOCOPEN -> ax
    com.lowagie.text.pdf.PdfName DOMAIN -> ay
    com.lowagie.text.pdf.PdfName DP -> az
    com.lowagie.text.pdf.PdfName DR -> aA
    com.lowagie.text.pdf.PdfName DS -> aB
    com.lowagie.text.pdf.PdfName DUR -> aC
    com.lowagie.text.pdf.PdfName DUPLEX -> aD
    com.lowagie.text.pdf.PdfName DUPLEXFLIPSHORTEDGE -> aE
    com.lowagie.text.pdf.PdfName DUPLEXFLIPLONGEDGE -> aF
    com.lowagie.text.pdf.PdfName DV -> fa
    com.lowagie.text.pdf.PdfName DW -> aG
    com.lowagie.text.pdf.PdfName E -> aH
    com.lowagie.text.pdf.PdfName EF -> aI
    com.lowagie.text.pdf.PdfName EFF -> aJ
    com.lowagie.text.pdf.PdfName EFOPEN -> aK
    com.lowagie.text.pdf.PdfName EMBEDDEDFILE -> aL
    com.lowagie.text.pdf.PdfName EMBEDDEDFILES -> aM
    com.lowagie.text.pdf.PdfName ENCODEDBYTEALIGN -> aN
    com.lowagie.text.pdf.PdfName ENCODING -> aO
    com.lowagie.text.pdf.PdfName ENCRYPT -> aP
    com.lowagie.text.pdf.PdfName ENCRYPTMETADATA -> aQ
    com.lowagie.text.pdf.PdfName ENDOFBLOCK -> aR
    com.lowagie.text.pdf.PdfName ENDOFLINE -> aS
    com.lowagie.text.pdf.PdfName EXTGSTATE -> aT
    com.lowagie.text.pdf.PdfName EXPORT -> aU
    com.lowagie.text.pdf.PdfName EVENT -> aV
    com.lowagie.text.pdf.PdfName F -> aW
    com.lowagie.text.pdf.PdfName FF -> aX
    com.lowagie.text.pdf.PdfName FIELDS -> aY
    com.lowagie.text.pdf.PdfName FILEID -> aZ
    com.lowagie.text.pdf.PdfName FILESPEC -> ba
    com.lowagie.text.pdf.PdfName FILTER -> bb
    com.lowagie.text.pdf.PdfName FIRST -> bc
    com.lowagie.text.pdf.PdfName FIRSTCHAR -> bd
    com.lowagie.text.pdf.PdfName FIRSTPAGE -> be
    com.lowagie.text.pdf.PdfName FITH -> bf
    com.lowagie.text.pdf.PdfName FITWINDOW -> bg
    com.lowagie.text.pdf.PdfName FLAGS -> bh
    com.lowagie.text.pdf.PdfName FLATEDECODE -> bi
    com.lowagie.text.pdf.PdfName FO -> bj
    com.lowagie.text.pdf.PdfName FONT -> bk
    com.lowagie.text.pdf.PdfName FONTBBOX -> bl
    com.lowagie.text.pdf.PdfName FONTDESCRIPTOR -> bm
    com.lowagie.text.pdf.PdfName FONTFILE -> bn
    com.lowagie.text.pdf.PdfName FONTFILE2 -> bo
    com.lowagie.text.pdf.PdfName FONTFILE3 -> bp
    com.lowagie.text.pdf.PdfName FONTNAME -> bq
    com.lowagie.text.pdf.PdfName FORM -> br
    com.lowagie.text.pdf.PdfName FORMTYPE -> bs
    com.lowagie.text.pdf.PdfName FT -> fb
    com.lowagie.text.pdf.PdfName FUNCTIONTYPE -> bt
    com.lowagie.text.pdf.PdfName GOTO -> bu
    com.lowagie.text.pdf.PdfName GOTOR -> bv
    com.lowagie.text.pdf.PdfName GROUP -> bw
    com.lowagie.text.pdf.PdfName H -> fc
    com.lowagie.text.pdf.PdfName HEIGHT -> bx
    com.lowagie.text.pdf.PdfName HELV -> by
    com.lowagie.text.pdf.PdfName HELVETICA -> bz
    com.lowagie.text.pdf.PdfName HELVETICA_BOLD -> bA
    com.lowagie.text.pdf.PdfName HELVETICA_OBLIQUE -> bB
    com.lowagie.text.pdf.PdfName HELVETICA_BOLDOBLIQUE -> bC
    com.lowagie.text.pdf.PdfName HIDEMENUBAR -> bD
    com.lowagie.text.pdf.PdfName HIDETOOLBAR -> bE
    com.lowagie.text.pdf.PdfName HIDEWINDOWUI -> bF
    com.lowagie.text.pdf.PdfName I -> bG
    com.lowagie.text.pdf.PdfName ICCBASED -> bH
    com.lowagie.text.pdf.PdfName ID -> bI
    com.lowagie.text.pdf.PdfName IDENTITY -> bJ
    com.lowagie.text.pdf.PdfName IMAGE -> bK
    com.lowagie.text.pdf.PdfName IMAGEB -> bL
    com.lowagie.text.pdf.PdfName IMAGEC -> bM
    com.lowagie.text.pdf.PdfName IMAGEI -> bN
    com.lowagie.text.pdf.PdfName IMAGEMASK -> bO
    com.lowagie.text.pdf.PdfName INDEX -> bP
    com.lowagie.text.pdf.PdfName INDEXED -> bQ
    com.lowagie.text.pdf.PdfName INFO -> bR
    com.lowagie.text.pdf.PdfName INTENT -> bS
    com.lowagie.text.pdf.PdfName INTERPOLATE -> bT
    com.lowagie.text.pdf.PdfName ITALICANGLE -> bU
    com.lowagie.text.pdf.PdfName JAVASCRIPT -> bV
    com.lowagie.text.pdf.PdfName JBIG2DECODE -> bW
    com.lowagie.text.pdf.PdfName JBIG2GLOBALS -> bX
    com.lowagie.text.pdf.PdfName JPXDECODE -> bY
    com.lowagie.text.pdf.PdfName JS -> bZ
    com.lowagie.text.pdf.PdfName K -> ca
    com.lowagie.text.pdf.PdfName KEYWORDS -> cb
    com.lowagie.text.pdf.PdfName KIDS -> cc
    com.lowagie.text.pdf.PdfName L2R -> cd
    com.lowagie.text.pdf.PdfName LANG -> fd
    com.lowagie.text.pdf.PdfName LAST -> ce
    com.lowagie.text.pdf.PdfName LASTCHAR -> cf
    com.lowagie.text.pdf.PdfName LASTPAGE -> cg
    com.lowagie.text.pdf.PdfName LAUNCH -> ch
    com.lowagie.text.pdf.PdfName LENGTH -> ci
    com.lowagie.text.pdf.PdfName LIMITS -> cj
    com.lowagie.text.pdf.PdfName LINK -> ck
    com.lowagie.text.pdf.PdfName LISTMODE -> cl
    com.lowagie.text.pdf.PdfName LOCK -> fe
    com.lowagie.text.pdf.PdfName LOCKED -> cm
    com.lowagie.text.pdf.PdfName M -> ff
    com.lowagie.text.pdf.PdfName MATRIX -> cn
    com.lowagie.text.pdf.PdfName MAC_ROMAN_ENCODING -> co
    com.lowagie.text.pdf.PdfName MASK -> cp
    com.lowagie.text.pdf.PdfName MAXLEN -> fg
    com.lowagie.text.pdf.PdfName MEDIABOX -> cq
    com.lowagie.text.pdf.PdfName METADATA -> cr
    com.lowagie.text.pdf.PdfName MK -> cs
    com.lowagie.text.pdf.PdfName MODDATE -> ct
    com.lowagie.text.pdf.PdfName N -> cu
    com.lowagie.text.pdf.PdfName NAME -> cv
    com.lowagie.text.pdf.PdfName NAMED -> cw
    com.lowagie.text.pdf.PdfName NAMES -> cx
    com.lowagie.text.pdf.PdfName NEXT -> cy
    com.lowagie.text.pdf.PdfName NEXTPAGE -> cz
    com.lowagie.text.pdf.PdfName NM -> fh
    com.lowagie.text.pdf.PdfName NONE -> cA
    com.lowagie.text.pdf.PdfName NONFULLSCREENPAGEMODE -> cB
    com.lowagie.text.pdf.PdfName NUMCOPIES -> cC
    com.lowagie.text.pdf.PdfName O -> cD
    com.lowagie.text.pdf.PdfName OBJSTM -> cE
    com.lowagie.text.pdf.PdfName OC -> cF
    com.lowagie.text.pdf.PdfName OCGS -> cG
    com.lowagie.text.pdf.PdfName OCPROPERTIES -> cH
    com.lowagie.text.pdf.PdfName OE -> cI
    com.lowagie.text.pdf.PdfName OFF -> cJ
    com.lowagie.text.pdf.PdfName OPT -> fi
    com.lowagie.text.pdf.PdfName ORDER -> cK
    com.lowagie.text.pdf.PdfName ORDERING -> cL
    com.lowagie.text.pdf.PdfName OUTLINES -> cM
    com.lowagie.text.pdf.PdfName P -> cN
    com.lowagie.text.pdf.PdfName PAGE -> cO
    com.lowagie.text.pdf.PdfName PAGELAYOUT -> cP
    com.lowagie.text.pdf.PdfName PAGEMODE -> cQ
    com.lowagie.text.pdf.PdfName PAGES -> cR
    com.lowagie.text.pdf.PdfName PAINTTYPE -> cS
    com.lowagie.text.pdf.PdfName PANOSE -> cT
    com.lowagie.text.pdf.PdfName PARAMS -> cU
    com.lowagie.text.pdf.PdfName PARENT -> cV
    com.lowagie.text.pdf.PdfName PATTERN -> cW
    com.lowagie.text.pdf.PdfName PATTERNTYPE -> cX
    com.lowagie.text.pdf.PdfName PDF -> cY
    com.lowagie.text.pdf.PdfName PERMS -> cZ
    com.lowagie.text.pdf.PdfName PICKTRAYBYPDFSIZE -> da
    com.lowagie.text.pdf.PdfName PREDICTOR -> db
    com.lowagie.text.pdf.PdfName PREV -> dc
    com.lowagie.text.pdf.PdfName PREVPAGE -> dd
    com.lowagie.text.pdf.PdfName PRINT -> de
    com.lowagie.text.pdf.PdfName PRINTAREA -> df
    com.lowagie.text.pdf.PdfName PRINTCLIP -> dg
    com.lowagie.text.pdf.PdfName PRINTPAGERANGE -> dh
    com.lowagie.text.pdf.PdfName PRINTSCALING -> di
    com.lowagie.text.pdf.PdfName PROCSET -> dj
    com.lowagie.text.pdf.PdfName PRODUCER -> dk
    com.lowagie.text.pdf.PdfName PROPERTIES -> dl
    com.lowagie.text.pdf.PdfName PUBSEC -> dm
    com.lowagie.text.pdf.PdfName Q -> dn
    com.lowagie.text.pdf.PdfName R -> do
    com.lowagie.text.pdf.PdfName R2L -> dp
    com.lowagie.text.pdf.PdfName RBGROUPS -> dq
    com.lowagie.text.pdf.PdfName RECIPIENTS -> dr
    com.lowagie.text.pdf.PdfName RECT -> ds
    com.lowagie.text.pdf.PdfName REGISTRY -> dt
    com.lowagie.text.pdf.PdfName RENDITION -> du
    com.lowagie.text.pdf.PdfName RESOURCES -> dv
    com.lowagie.text.pdf.PdfName ROOT -> dw
    com.lowagie.text.pdf.PdfName ROTATE -> dx
    com.lowagie.text.pdf.PdfName ROWS -> dy
    com.lowagie.text.pdf.PdfName RV -> fj
    com.lowagie.text.pdf.PdfName S -> dz
    com.lowagie.text.pdf.PdfName SCREEN -> dA
    com.lowagie.text.pdf.PdfName SEPARATION -> dB
    com.lowagie.text.pdf.PdfName SHADING -> dC
    com.lowagie.text.pdf.PdfName SIGFLAGS -> dD
    com.lowagie.text.pdf.PdfName SIMPLEX -> dE
    com.lowagie.text.pdf.PdfName SIZE -> dF
    com.lowagie.text.pdf.PdfName SMASK -> dG
    com.lowagie.text.pdf.PdfName STANDARD -> dH
    com.lowagie.text.pdf.PdfName STDCF -> dI
    com.lowagie.text.pdf.PdfName STEMV -> dJ
    com.lowagie.text.pdf.PdfName STMF -> dK
    com.lowagie.text.pdf.PdfName STRF -> dL
    com.lowagie.text.pdf.PdfName STRUCTPARENT -> fk
    com.lowagie.text.pdf.PdfName STYLE -> dM
    com.lowagie.text.pdf.PdfName SUBFILTER -> dN
    com.lowagie.text.pdf.PdfName SUBJECT -> dO
    com.lowagie.text.pdf.PdfName SUBTYPE -> dP
    com.lowagie.text.pdf.PdfName SUPPLEMENT -> dQ
    com.lowagie.text.pdf.PdfName SV -> fl
    com.lowagie.text.pdf.PdfName SYMBOL -> dR
    com.lowagie.text.pdf.PdfName T -> dS
    com.lowagie.text.pdf.PdfName TABS -> dT
    com.lowagie.text.pdf.PdfName TEXT -> dU
    com.lowagie.text.pdf.PdfName TI -> fm
    com.lowagie.text.pdf.PdfName TILINGTYPE -> dV
    com.lowagie.text.pdf.PdfName TIMES_ROMAN -> dW
    com.lowagie.text.pdf.PdfName TIMES_BOLD -> dX
    com.lowagie.text.pdf.PdfName TIMES_ITALIC -> dY
    com.lowagie.text.pdf.PdfName TIMES_BOLDITALIC -> dZ
    com.lowagie.text.pdf.PdfName TITLE -> ea
    com.lowagie.text.pdf.PdfName TM -> fn
    com.lowagie.text.pdf.PdfName TOUNICODE -> eb
    com.lowagie.text.pdf.PdfName TRIMBOX -> ec
    com.lowagie.text.pdf.PdfName TRUETYPE -> ed
    com.lowagie.text.pdf.PdfName TU -> fo
    com.lowagie.text.pdf.PdfName TYPE -> ee
    com.lowagie.text.pdf.PdfName TYPE0 -> ef
    com.lowagie.text.pdf.PdfName TYPE1 -> eg
    com.lowagie.text.pdf.PdfName U -> eh
    com.lowagie.text.pdf.PdfName UE -> ei
    com.lowagie.text.pdf.PdfName UF -> ej
    com.lowagie.text.pdf.PdfName URI -> ek
    com.lowagie.text.pdf.PdfName USAGE -> el
    com.lowagie.text.pdf.PdfName USENONE -> em
    com.lowagie.text.pdf.PdfName USEOC -> en
    com.lowagie.text.pdf.PdfName USEOUTLINES -> eo
    com.lowagie.text.pdf.PdfName USERUNIT -> ep
    com.lowagie.text.pdf.PdfName USETHUMBS -> eq
    com.lowagie.text.pdf.PdfName V -> er
    com.lowagie.text.pdf.PdfName V2 -> es
    com.lowagie.text.pdf.PdfName VERSION -> et
    com.lowagie.text.pdf.PdfName VIEW -> eu
    com.lowagie.text.pdf.PdfName VIEWAREA -> ev
    com.lowagie.text.pdf.PdfName VIEWCLIP -> ew
    com.lowagie.text.pdf.PdfName VIEWERPREFERENCES -> ex
    com.lowagie.text.pdf.PdfName VISIBLEPAGES -> ey
    com.lowagie.text.pdf.PdfName W -> ez
    com.lowagie.text.pdf.PdfName W2 -> eA
    com.lowagie.text.pdf.PdfName WC -> eB
    com.lowagie.text.pdf.PdfName WIDGET -> eC
    com.lowagie.text.pdf.PdfName WIDTH -> eD
    com.lowagie.text.pdf.PdfName WIDTHS -> eE
    com.lowagie.text.pdf.PdfName WIN -> eF
    com.lowagie.text.pdf.PdfName WIN_ANSI_ENCODING -> eG
    com.lowagie.text.pdf.PdfName WP -> eH
    com.lowagie.text.pdf.PdfName WS -> eI
    com.lowagie.text.pdf.PdfName X -> eJ
    com.lowagie.text.pdf.PdfName XFA -> eK
    com.lowagie.text.pdf.PdfName XML -> eL
    com.lowagie.text.pdf.PdfName XOBJECT -> eM
    com.lowagie.text.pdf.PdfName XSTEP -> eN
    com.lowagie.text.pdf.PdfName XREF -> eO
    com.lowagie.text.pdf.PdfName XREFSTM -> eP
    com.lowagie.text.pdf.PdfName XYZ -> eQ
    com.lowagie.text.pdf.PdfName YSTEP -> eR
    com.lowagie.text.pdf.PdfName ZADB -> eS
    com.lowagie.text.pdf.PdfName ZAPFDINGBATS -> eT
    com.lowagie.text.pdf.PdfName ZOOM -> eU
    java.util.Map staticNames -> eV
    java.util.ArrayList widgetNames -> fp
    java.util.ArrayList formfieldNames -> fq
    int hash -> fr
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,boolean) -> <init>
    void initLists() -> a
    java.lang.String decodeName(java.lang.String) -> b
    int compareTo(com.lowagie.text.pdf.PdfName) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfNameTree -> a.a.a.c.aW:
    com.lowagie.text.pdf.PdfDictionary writeTree(java.util.Map,com.lowagie.text.pdf.PdfWriter) -> a
    void iterateItems(com.lowagie.text.pdf.PdfDictionary,java.util.HashMap) -> a
    java.util.HashMap readTree(com.lowagie.text.pdf.PdfDictionary) -> a
com.lowagie.text.pdf.PdfNull -> a.a.a.c.aX:
    com.lowagie.text.pdf.PdfNull PDFNULL -> a
    void <init>() -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfNumber -> a.a.a.c.aY:
    double value -> a
    void <init>(java.lang.String) -> <init>
    void <init>(int) -> <init>
    void <init>(long) -> <init>
    void <init>(double) -> <init>
    void <init>(float) -> <init>
    int intValue() -> a
    double doubleValue() -> b
    float floatValue() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.lowagie.text.pdf.PdfOCG -> a.a.a.c.aZ:
    com.lowagie.text.pdf.PdfIndirectReference getRef() -> b
    com.lowagie.text.pdf.PdfDictionary getPdfObject$de7b337() -> c
com.lowagie.text.pdf.PdfOCProperties -> a.a.a.c.ba:
    void <init>() -> <init>
com.lowagie.text.pdf.PdfObject -> a.a.a.c.bb:
    byte[] bytes -> eW
    int type -> eX
    com.lowagie.text.pdf.PRIndirectReference indRef -> a
    void <init>(int) -> <init>
    void <init>(int,java.lang.String) -> <init>
    void <init>(byte[]) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    byte[] getBytes() -> e
    boolean canBeInObjStm() -> n
    void setContent(java.lang.String) -> a
    int type() -> o
    boolean isNull() -> p
    boolean isNumber() -> q
    boolean isString() -> r
    boolean isName() -> s
    boolean isArray() -> t
    boolean isDictionary() -> u
    boolean isStream() -> v
    boolean isIndirect() -> w
    com.lowagie.text.pdf.PRIndirectReference getIndRef() -> x
com.lowagie.text.pdf.PdfOutline -> a.a.a.c.bc:
    java.util.List kids -> a
    com.lowagie.text.pdf.PdfWriter writer -> b
    com.lowagie.text.pdf.PdfIndirectReference reference -> c
    int count -> d
    com.lowagie.text.pdf.PdfOutline parent -> e
    com.lowagie.text.pdf.PdfDestination destination -> f
    com.lowagie.text.pdf.PdfAction action -> j
    boolean open -> k
    java.awt.Color color -> l
    int style -> m
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    void <init>(com.lowagie.text.pdf.PdfOutline,com.lowagie.text.pdf.PdfDestination,com.lowagie.text.Paragraph,boolean) -> <init>
    void setIndirectReference(com.lowagie.text.pdf.PdfIndirectReference) -> a
    com.lowagie.text.pdf.PdfIndirectReference indirectReference() -> b
    com.lowagie.text.pdf.PdfOutline parent() -> c
    int getCount() -> d
    void setCount(int) -> a
    int level() -> f
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.util.List getKids() -> g
    boolean isOpen() -> h
com.lowagie.text.pdf.PdfPCell -> a.a.a.c.bd:
    com.lowagie.text.Phrase phrase -> a
    com.lowagie.text.pdf.ColumnText column -> b
    int verticalAlignment -> c
    float paddingLeft -> d
    float paddingRight -> e
    float paddingTop -> f
    float paddingBottom -> g
    float fixedHeight -> h
    float minimumHeight -> i
    boolean noWrap -> j
    com.lowagie.text.pdf.PdfPTable table -> k
    int colspan -> l
    int rowspan -> m
    com.lowagie.text.Image image -> n
    com.lowagie.text.pdf.PdfPCellEvent cellEvent -> v
    boolean useDescender -> w
    boolean useBorderPadding -> x
    int rotation -> y
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void <init>(com.lowagie.text.Image) -> <init>
    void <init>(com.lowagie.text.pdf.PdfPCell) -> <init>
    void addElement(com.lowagie.text.Element) -> a
    void setPhrase(com.lowagie.text.Phrase) -> a
    int getHorizontalAlignment() -> c
    void setHorizontalAlignment(int) -> c
    int getVerticalAlignment() -> d
    void setVerticalAlignment(int) -> d
    float getEffectivePaddingLeft() -> e
    void setPaddingLeft(float) -> a
    float getEffectivePaddingRight() -> f
    void setPaddingRight(float) -> b
    float getEffectivePaddingTop() -> g
    void setPaddingTop(float) -> l
    float getEffectivePaddingBottom() -> h
    void setPaddingBottom(float) -> m
    void setPadding(float) -> n
    void setUseBorderPadding(boolean) -> a
    float getFixedHeight() -> i
    void setFixedHeight(float) -> o
    boolean hasFixedHeight() -> v
    float getMinimumHeight() -> j
    void setMinimumHeight(float) -> p
    boolean isNoWrap() -> m
    int getColspan() -> n
    void setColspan(int) -> e
    int getRowspan() -> o
    void setRowspan(int) -> f
    int getRunDirection() -> p
    void setRunDirection(int) -> g
    com.lowagie.text.Image getImage() -> q
    com.lowagie.text.pdf.PdfPCellEvent getCellEvent() -> r
    void setCellEvent$7ada51fe(com.lowagie.text.SimpleCell) -> b
    void setUseAscender(boolean) -> b
    boolean isUseDescender() -> s
    void setUseDescender(boolean) -> c
    com.lowagie.text.pdf.ColumnText getColumn() -> t
    void setColumn(com.lowagie.text.pdf.ColumnText) -> a
    int getRotation() -> W
    void consumeHeight(float) -> q
    float getMaxHeight() -> u
com.lowagie.text.pdf.PdfPCellEvent -> a.a.a.c.be:
    void cellLayout(com.lowagie.text.pdf.PdfPCell,com.lowagie.text.Rectangle,com.lowagie.text.pdf.PdfContentByte[]) -> a
com.lowagie.text.pdf.PdfPRow -> a.a.a.c.bf:
    com.lowagie.text.pdf.PdfPCell[] cells -> a
    float[] widths -> b
    float[] extraHeights -> c
    float maxHeight -> d
    boolean calculated -> e
    int[] canvasesPos -> f
    void <init>(com.lowagie.text.pdf.PdfPCell[]) -> <init>
    void <init>(com.lowagie.text.pdf.PdfPRow) -> <init>
    float setColumn(com.lowagie.text.pdf.ColumnText,float,float,float,float) -> a
    boolean setWidths(float[]) -> a
    void initExtraHeights() -> a
    void setExtraHeight(int,float) -> a
    float calculateHeights() -> b
    void saveAndRotateCanvases(com.lowagie.text.pdf.PdfContentByte[],float,float,float,float,float,float) -> a
    void restoreCanvases(com.lowagie.text.pdf.PdfContentByte[]) -> a
    void writeCells(int,int,float,float,com.lowagie.text.pdf.PdfContentByte[]) -> a
    float getMaxHeights() -> c
    void setMaxHeights(float) -> a
    float[] getEventWidth(float) -> b
    com.lowagie.text.pdf.PdfPRow splitRow(com.lowagie.text.pdf.PdfPTable,int,float) -> a
    com.lowagie.text.pdf.PdfPCell[] getCells() -> d
com.lowagie.text.pdf.PdfPTable -> a.a.a.c.bg:
    java.util.ArrayList rows -> a
    float totalHeight -> b
    com.lowagie.text.pdf.PdfPCell[] currentRow -> c
    int currentRowIdx -> d
    com.lowagie.text.pdf.PdfPCell defaultCell -> e
    float totalWidth -> f
    float[] relativeWidths -> g
    float[] absoluteWidths -> h
    com.lowagie.text.pdf.PdfPTableEvent tableEvent -> i
    int headerRows -> j
    float widthPercentage -> k
    boolean isColspan -> l
    int runDirection -> m
    float spacingBefore -> n
    float spacingAfter -> o
    boolean complete -> p
    boolean rowCompleted -> q
    int horizontalAlignment -> r
    boolean skipFirstHeader -> s
    boolean skipLastFooter -> t
    boolean lockedWidth -> u
    boolean splitRows -> v
    boolean[] extendLastRow -> w
    boolean headersInEvent -> x
    boolean splitLate -> y
    boolean keepTogether -> z
    int footerRows -> A
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(com.lowagie.text.pdf.PdfPTable) -> <init>
    com.lowagie.text.pdf.PdfPTable shallowCopy(com.lowagie.text.pdf.PdfPTable) -> a
    void copyFormat(com.lowagie.text.pdf.PdfPTable) -> b
    void setWidths(float[]) -> a
    void calculateWidths() -> C
    float getTotalWidth() -> e
    void setTotalWidth(float) -> a
    float calculateHeights(boolean) -> a
    com.lowagie.text.pdf.PdfPCell addCell(com.lowagie.text.pdf.PdfPCell) -> a
    void skipColsWithRowspanAbove() -> D
    com.lowagie.text.pdf.PdfPCell obtainCell(int,int) -> c
    boolean rowSpanAbove(int,int) -> a
    com.lowagie.text.pdf.PdfPCell addCell(java.lang.String) -> a
    float writeSelectedRows$62997b56(float,float,com.lowagie.text.pdf.PdfContentByte[]) -> a
    float writeSelectedRows$35b30c36(int,int,float,float,com.lowagie.text.pdf.PdfContentByte[]) -> a
    float writeSelectedRows$44896855(float,float,com.lowagie.text.pdf.PdfContentByte) -> a
    int size() -> f
    float getTotalHeight() -> g
    float getRowHeight(int) -> a
    float getRowHeight(int,boolean) -> a
    float getHeaderHeight() -> h
    float getFooterHeight() -> i
    int getHeaderRows() -> j
    void setHeaderRows(int) -> b
    java.util.ArrayList getChunks() -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    boolean process$644ae8ed(com.lowagie.text.pdf.PdfDocument) -> a
    float getWidthPercentage() -> m
    void setWidthPercentage(float) -> b
    int getHorizontalAlignment() -> n
    void setHorizontalAlignment(int) -> c
    com.lowagie.text.pdf.PdfPRow getRow(int) -> d
    java.util.ArrayList getRows() -> o
    java.util.ArrayList getRows(int,int) -> b
    com.lowagie.text.pdf.PdfPRow adjustCellsInRow(int,int) -> d
    void setTableEvent$20b6258a(com.lowagie.text.SimpleTable) -> a
    float[][] getEventWidths(float,int,int,boolean) -> a
    boolean isSkipFirstHeader() -> p
    boolean isSkipLastFooter() -> q
    boolean isLockedWidth() -> r
    void setLockedWidth$1385ff() -> s
    boolean isSplitRows() -> t
    void setSpacingBefore(float) -> c
    void setSpacingAfter(float) -> d
    float spacingBefore() -> u
    float spacingAfter() -> v
    boolean isExtendLastRow() -> w
    void setExtendLastRow(boolean) -> b
    boolean isExtendLastRow(boolean) -> c
    boolean isHeadersInEvent() -> x
    void setHeadersInEvent(boolean) -> d
    boolean isSplitLate() -> y
    boolean getKeepTogether() -> z
    int getFooterRows() -> A
    void flushContent() -> d
    boolean isComplete() -> c
    void setComplete$1385ff() -> B
    java.lang.Float lambda$redistributeRowspanHeight$0(java.lang.Integer) -> a
com.lowagie.text.pdf.PdfPTableEvent -> a.a.a.c.bh:
    void tableLayout(com.lowagie.text.pdf.PdfPTable,float[][],float[],int,int,com.lowagie.text.pdf.PdfContentByte[]) -> a
com.lowagie.text.pdf.PdfPage -> a.a.a.c.bi:
    java.lang.String[] boxStrings -> a
    com.lowagie.text.pdf.PdfName[] boxNames -> b
    com.lowagie.text.pdf.PdfRectangle mediaBox -> c
    void <init>(com.lowagie.text.pdf.PdfRectangle,java.util.HashMap,com.lowagie.text.pdf.PdfResources,int) -> <init>
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfPageEvent -> a.a.a.c.bj:
com.lowagie.text.pdf.PdfPageLabels -> a.a.a.c.bk:
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfPages -> a.a.a.c.bl:
    java.util.ArrayList pages -> a
    java.util.ArrayList parents -> b
    com.lowagie.text.pdf.PdfWriter writer -> c
    int leafSize -> d
    com.lowagie.text.pdf.PdfIndirectReference topParent -> e
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    void addPage$6bc4798c(com.lowagie.text.pdf.PdfPage) -> a
    com.lowagie.text.pdf.PdfIndirectReference writePageTree() -> a
com.lowagie.text.pdf.PdfPattern -> a.a.a.c.bm:
    void <init>(com.lowagie.text.pdf.PdfPatternPainter,int) -> <init>
com.lowagie.text.pdf.PdfPatternPainter -> a.a.a.c.bn:
    float xstep -> d
    float ystep -> e
    boolean stencil -> f
    java.awt.Color defaultColor -> g
    void <init>() -> <init>
    com.lowagie.text.pdf.PdfPattern getPattern(int) -> e
    com.lowagie.text.pdf.PdfContentByte getDuplicate() -> E
    java.awt.Color getDefaultColor() -> H
    void setGrayFill(float) -> d
    void resetGrayFill() -> k
    void resetGrayStroke() -> l
    void resetRGBColorFill() -> m
    void resetRGBColorStroke() -> n
    void addImage(com.lowagie.text.Image,float,float,float,float,float,float) -> a
    void setColorStroke(java.awt.Color) -> a
    void setColorFill(java.awt.Color) -> b
    void setColorFill(com.lowagie.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.lowagie.text.pdf.PdfSpotColor,float) -> b
    void setPatternFill(com.lowagie.text.pdf.PdfPatternPainter) -> a
    void setPatternFill(com.lowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> a
    void setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter,java.awt.Color,float) -> b
    void setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter) -> b
    void checkNoColor() -> Q
com.lowagie.text.pdf.PdfPublicKeyRecipient -> a.a.a.c.bo:
com.lowagie.text.pdf.PdfPublicKeySecurityHandler -> a.a.a.c.bp:
    java.util.List recipients -> a
    byte[] seed -> b
    void <init>() -> <init>
    byte[] getSeed() -> a
    int getRecipientsSize() -> b
    byte[] getEncodedRecipient(int) -> a
    com.lowagie.text.pdf.PdfArray getEncodedRecipients() -> c
com.lowagie.text.pdf.PdfReader -> a.a.a.c.bq:
    com.lowagie.text.pdf.PdfName[] pageInhCandidates -> a
    byte[] endstream -> f
    byte[] endobj -> g
    com.lowagie.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> h
    com.lowagie.text.pdf.PRTokeniser tokens -> i
    int[] xref -> j
    java.util.Map objStmMark -> k
    com.lowagie.text.pdf.IntHashtable objStmToOffset -> l
    boolean newXrefType -> m
    com.lowagie.text.pdf.PdfDictionary trailer -> b
    com.lowagie.text.pdf.PdfDictionary catalog -> c
    com.lowagie.text.pdf.PdfReader$PageRefs pageRefs -> d
    com.lowagie.text.pdf.PRAcroForm acroForm -> n
    boolean acroFormParsed -> o
    boolean encrypted -> p
    boolean rebuilt -> q
    int freeXref -> r
    boolean tampered -> s
    int lastXref -> t
    int eofPos -> u
    char pdfVersion -> v
    com.lowagie.text.pdf.PdfEncryption decrypt -> w
    byte[] password -> x
    java.security.Key certificateKey -> y
    java.security.cert.Certificate certificate -> z
    java.lang.String certificateKeyProvider -> A
    java.util.List strings -> B
    boolean sharedStreams -> C
    boolean consolidateNamedDestinations -> D
    boolean remoteToLocalNamedDestinations -> E
    int rValue -> F
    int pValue -> G
    com.lowagie.text.pdf.PdfDictionary rootPages -> e
    java.util.List xrefObj -> H
    boolean ownerPasswordUsed -> I
    boolean modificationAllowedWithoutOwnerPassword -> J
    int objNum -> K
    int objGen -> L
    int fileLength -> M
    boolean hybridXref -> N
    int lastXrefPartial -> O
    boolean partial -> P
    com.lowagie.text.pdf.PRIndirectReference cryptoRef -> Q
    boolean encryptionError -> R
    boolean appendable -> S
    int readDepth -> T
    void <init>() -> <init>
    void <init>(byte[]) -> <init>
    void <init>(byte[],byte) -> <init>
    int getPageRotation(com.lowagie.text.pdf.PdfDictionary) -> a
    com.lowagie.text.Rectangle getNormalizedRectangle(com.lowagie.text.pdf.PdfArray) -> a
    com.lowagie.text.pdf.PdfObject getPdfObjectRelease(com.lowagie.text.pdf.PdfObject) -> a
    com.lowagie.text.pdf.PdfObject convertPdfNull(com.lowagie.text.pdf.PdfObject) -> g
    com.lowagie.text.pdf.PdfObject getPdfObjectReleaseNullConverting(com.lowagie.text.pdf.PdfObject) -> b
    com.lowagie.text.pdf.PdfObject getPdfObject(com.lowagie.text.pdf.PdfObject) -> c
    com.lowagie.text.pdf.PdfObject getPdfObjectRelease$14e45bb5(com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfDictionary) -> a
    com.lowagie.text.pdf.PdfObject getPdfObject$14e45bb5(com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfDictionary) -> b
    com.lowagie.text.pdf.PdfObject getPdfObjectNullConverting$14e45bb5(com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfDictionary) -> c
    void releaseLastXrefPartial(com.lowagie.text.pdf.PdfObject) -> d
    com.lowagie.text.pdf.PdfObject killIndirect(com.lowagie.text.pdf.PdfObject) -> e
    byte[] decodePredictor(byte[],com.lowagie.text.pdf.PdfObject) -> a
    byte[] FlateDecode(byte[],boolean) -> a
    byte[] LZWDecode(byte[]) -> a
    byte[] getStreamBytes(com.lowagie.text.pdf.PRStream,com.lowagie.text.pdf.RandomAccessFileOrArray) -> a
    byte[] getStreamBytes(com.lowagie.text.pdf.PRStream) -> a
    byte[] getStreamBytesRaw(com.lowagie.text.pdf.PRStream,com.lowagie.text.pdf.RandomAccessFileOrArray) -> b
    java.util.List addFilters(java.util.List,com.lowagie.text.pdf.PdfObject) -> a
    byte[] getStreamBytesRaw(com.lowagie.text.pdf.PRStream) -> b
    boolean equalsn(byte[],byte[]) -> a
    com.lowagie.text.pdf.RandomAccessFileOrArray getSafeFile() -> a
    int getNumberOfPages() -> b
    com.lowagie.text.pdf.PdfDictionary getCatalog() -> c
    int getPageRotation$134621() -> d
    com.lowagie.text.Rectangle getPageSizeWithRotation(com.lowagie.text.pdf.PdfDictionary) -> b
    com.lowagie.text.Rectangle getPageSize$b11c73d() -> e
    com.lowagie.text.Rectangle getPageSize(com.lowagie.text.pdf.PdfDictionary) -> d
    boolean equalsArray(byte[],byte[],int) -> a
    void readDecryptedDocObj() -> o
    com.lowagie.text.pdf.PdfObject getPdfObjectRelease(int) -> a
    com.lowagie.text.pdf.PdfObject getPdfObject(int) -> e
    com.lowagie.text.pdf.PRIndirectReference addPdfObject$744c5b37(com.lowagie.text.pdf.PdfDictionary) -> c
    void readDocObj() -> p
    void checkPRStreamLength(com.lowagie.text.pdf.PRStream) -> c
    void readObjStm(com.lowagie.text.pdf.PRStream,com.lowagie.text.pdf.IntHashtable) -> a
    void ensureXrefSize(int) -> f
    com.lowagie.text.pdf.PdfDictionary readXrefSection() -> q
    boolean readXRefStream(int) -> g
    void rebuildXref() -> r
    com.lowagie.text.pdf.PdfDictionary readDictionary() -> s
    com.lowagie.text.pdf.PdfArray readArray() -> t
    com.lowagie.text.pdf.PdfObject readPRObject() -> u
    com.lowagie.text.pdf.PdfDictionary getPageN(int) -> b
    com.lowagie.text.pdf.PdfDictionary getPageNRelease(int) -> c
    void releasePage$13462e() -> f
    com.lowagie.text.pdf.PRIndirectReference getPageOrigRef(int) -> d
    void killXref(com.lowagie.text.pdf.PdfObject) -> f
    boolean isTampered() -> g
    void setTampered$1385ff() -> h
    int getXrefSize() -> i
    char getPdfVersion() -> j
    com.lowagie.text.pdf.PdfDictionary getTrailer() -> k
    com.lowagie.text.pdf.PdfEncryption getDecrypt() -> l
    void close() -> close
    boolean isOpenedWithFullPermissions() -> m
    byte[] getDocumentId() -> n
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfReader$PageRefs -> a.a.a.c.br:
    com.lowagie.text.pdf.PdfReader reader -> a
    java.util.List refsn -> b
    int sizep -> c
    com.lowagie.text.pdf.IntHashtable refsp -> d
    int lastPageRead -> e
    java.util.List pageInh -> f
    boolean keepPages -> g
    void <init>(com.lowagie.text.pdf.PdfReader) -> <init>
    int size() -> a
    com.lowagie.text.pdf.PdfDictionary getPageN(int) -> a
    com.lowagie.text.pdf.PdfDictionary getPageNRelease$1c04bde7() -> b
    com.lowagie.text.pdf.PRIndirectReference getPageOrigRef(int) -> b
    void keepPages() -> c
    void releasePage(int) -> c
    void insertPage$35610ea6(com.lowagie.text.pdf.PRIndirectReference) -> a
    void pushPageAttributes(com.lowagie.text.pdf.PdfDictionary) -> a
    void popPageAttributes() -> d
    void iteratePages(com.lowagie.text.pdf.PRIndirectReference) -> b
    void iteratePages(com.lowagie.text.pdf.PdfDictionary) -> b
com.lowagie.text.pdf.PdfReaderInstance -> a.a.a.c.bs:
    int[] myXref -> a
    com.lowagie.text.pdf.PdfReader reader -> b
    com.lowagie.text.pdf.RandomAccessFileOrArray file -> c
    java.util.HashMap importedPages -> d
    com.lowagie.text.pdf.PdfWriter writer -> e
    java.util.HashMap visited -> f
    java.util.ArrayList nextRound -> g
    void <init>(com.lowagie.text.pdf.PdfReader,com.lowagie.text.pdf.PdfWriter) -> <init>
    int getNewObjectNumber$255f288(int) -> a
    void writeAllPages() -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfRectangle -> a.a.a.c.bt:
    float llx -> a
    float lly -> b
    float urx -> c
    float ury -> d
    void <init>(float,float,float,float,int) -> <init>
    void <init>(float,float,float,float) -> <init>
    void <init>(com.lowagie.text.Rectangle,int) -> <init>
    void <init>(com.lowagie.text.Rectangle) -> <init>
    boolean add(com.lowagie.text.pdf.PdfObject) -> a
    boolean add(float[]) -> a
    boolean add(int[]) -> a
    void addFirst(com.lowagie.text.pdf.PdfObject) -> b
    float left() -> d
    float right() -> f
    float top() -> g
    float bottom() -> h
com.lowagie.text.pdf.PdfRendition -> a.a.a.c.bu:
    void <init>(java.lang.String,com.lowagie.text.pdf.PdfFileSpecification,java.lang.String) -> <init>
com.lowagie.text.pdf.PdfResources -> a.a.a.c.bv:
    void <init>() -> <init>
    void add(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfDictionary) -> a
com.lowagie.text.pdf.PdfShading -> a.a.a.c.bw:
com.lowagie.text.pdf.PdfShadingPattern -> a.a.a.c.bx:
com.lowagie.text.pdf.PdfSpotColor -> a.a.a.c.by:
    com.lowagie.text.pdf.PdfName name -> b
    java.awt.Color altcs -> a
    void <init>(java.lang.String,java.awt.Color) -> <init>
    com.lowagie.text.pdf.PdfArray getSpotObject$333d4c0b(com.lowagie.text.pdf.PdfWriter) -> a
com.lowagie.text.pdf.PdfStamper -> a.a.a.c.bz:
    com.lowagie.text.pdf.PdfStamperImp stamper -> a
    java.util.Map moreInfo -> b
    boolean hasSignature -> c
    boolean cleanMetadata -> d
    void <init>(com.lowagie.text.pdf.PdfReader,java.io.OutputStream) -> <init>
    void insertPage$28917a77(com.lowagie.text.Rectangle) -> a
    void close() -> close
    com.lowagie.text.pdf.StampContent getOverContent$727a2c08(int) -> a
com.lowagie.text.pdf.PdfStamperImp -> a.a.a.c.bA:
    com.lowagie.text.pdf.AcroFields acroFields -> t
    boolean flat -> u
    boolean flatFreeText -> v
    int[] namePtr -> c
    java.util.Set partialFlattening -> w
    boolean useVp -> x
    com.lowagie.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> y
    java.util.Map fieldTemplates -> z
    boolean fieldsAdded -> A
    int sigFlags -> B
    boolean append -> C
    int initialXrefSize -> D
    com.lowagie.text.pdf.PdfAction openAction -> E
    java.util.HashMap readers2intrefs -> F
    java.util.HashMap readers2file -> G
    com.lowagie.text.pdf.RandomAccessFileOrArray file -> H
    com.lowagie.text.pdf.PdfReader reader -> I
    com.lowagie.text.pdf.IntHashtable myXref -> J
    java.util.HashMap pagesToContent -> K
    boolean closed -> L
    boolean rotateContents -> M
    boolean includeFileID -> N
    com.lowagie.text.pdf.PdfObject overrideFileId -> O
    java.util.Calendar modificationDate -> P
    boolean updateMetadata -> Q
    boolean updateDocInfo -> R
    void <init>(com.lowagie.text.pdf.PdfReader,java.io.OutputStream) -> <init>
    void close(java.util.Map) -> a
    int getNewObjectNumber$44eca946(com.lowagie.text.pdf.PdfReader,int) -> a
    com.lowagie.text.pdf.StampContent getOverContent$727a2c08(int) -> a
    void insertPage$28917a77(com.lowagie.text.Rectangle) -> b
    com.lowagie.text.pdf.AcroFields getAcroFields() -> F
    com.lowagie.text.pdf.PdfIndirectReference getPageReference(int) -> b
    void addDocumentField(com.lowagie.text.pdf.PdfIndirectReference) -> a
    void expandFields(com.lowagie.text.pdf.PdfFormField,java.util.List) -> a
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation,com.lowagie.text.pdf.PdfDictionary) -> a
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> a
    boolean isAppend() -> e
    com.lowagie.text.pdf.PdfContentByte getDirectContentUnder() -> f
    com.lowagie.text.pdf.PdfContentByte getDirectContent() -> g
com.lowagie.text.pdf.PdfStamperImp$PageStamp -> a.a.a.c.bB:
    com.lowagie.text.pdf.PdfDictionary pageN -> a
    com.lowagie.text.pdf.StampContent under -> b
    com.lowagie.text.pdf.StampContent over -> c
    com.lowagie.text.pdf.PageResources pageResources -> d
    int replacePoint -> e
    void <init>(com.lowagie.text.pdf.PdfStamperImp,com.lowagie.text.pdf.PdfDictionary) -> <init>
com.lowagie.text.pdf.PdfStream -> a.a.a.c.bC:
    byte[] STARTSTREAM -> j
    byte[] ENDSTREAM -> k
    boolean compressed -> l
    int compressionLevel -> m
    java.io.ByteArrayOutputStream streamBytes -> n
    java.io.InputStream inputStream -> o
    com.lowagie.text.pdf.PdfIndirectReference ref -> a
    long inputStreamLength -> p
    com.lowagie.text.pdf.PdfWriter writer -> b
    long rawLength -> q
    void <init>(byte[]) -> <init>
    void <init>(java.io.InputStream,com.lowagie.text.pdf.PdfWriter) -> <init>
    void <init>() -> <init>
    void writeLength() -> h
    long getRawLength() -> i
    void flateCompress(int) -> b
    void superToPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> b
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfString -> a.a.a.c.bD:
    java.lang.String value -> a
    java.lang.String originalValue -> b
    java.lang.String encoding -> c
    int objNum -> d
    int objGen -> e
    boolean hexWriting -> f
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    byte[] getBytes() -> e
    java.lang.String toUnicodeString() -> b
    void setObjNum(int,int) -> a
    void decrypt(com.lowagie.text.pdf.PdfReader) -> a
    com.lowagie.text.pdf.PdfString setHexWriting(boolean) -> a
com.lowagie.text.pdf.PdfStructureTreeRoot -> a.a.a.c.bE:
com.lowagie.text.pdf.PdfTemplate -> a.a.a.c.bF:
    int type -> h
    com.lowagie.text.pdf.PdfIndirectReference thisReference -> i
    com.lowagie.text.pdf.PageResources pageResources -> j
    com.lowagie.text.Rectangle bBox -> k
    com.lowagie.text.pdf.PdfArray matrix -> l
    com.lowagie.text.pdf.PdfTransparencyGroup group -> d
    com.lowagie.text.pdf.PdfOCG layer -> e
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    com.lowagie.text.pdf.PdfTemplate createTemplate$19b5e19a(com.lowagie.text.pdf.PdfWriter) -> a
    float getWidth() -> I
    void setWidth(float) -> f
    float getHeight() -> J
    void setHeight(float) -> g
    com.lowagie.text.Rectangle getBoundingBox() -> K
    com.lowagie.text.pdf.PdfOCG getLayer() -> L
    com.lowagie.text.pdf.PdfArray getMatrix() -> M
    com.lowagie.text.pdf.PdfIndirectReference getIndirectReference() -> N
    com.lowagie.text.pdf.PdfResources getResources$de7b337() -> G
    com.lowagie.text.pdf.PdfFormXObject getFormXObject$c6132c3(int) -> d
    com.lowagie.text.pdf.PdfContentByte getDuplicate() -> E
    int getType() -> O
    com.lowagie.text.pdf.PageResources getPageResources() -> F
    com.lowagie.text.pdf.PdfTransparencyGroup getGroup() -> P
com.lowagie.text.pdf.PdfTextArray -> a.a.a.c.bG:
    java.util.List arrayList -> a
    java.lang.String lastStr -> b
    java.lang.Float lastNum -> c
    boolean isRTL -> d
    void <init>() -> <init>
    void add(float) -> a
    void add(java.lang.String) -> a
    java.util.List getArrayList() -> a
    void replaceLast(java.lang.Object) -> a
com.lowagie.text.pdf.PdfTransition -> a.a.a.c.bH:
com.lowagie.text.pdf.PdfTransparencyGroup -> a.a.a.c.bI:
com.lowagie.text.pdf.PdfWriter -> a.a.a.c.bJ:
    com.lowagie.text.pdf.PdfName PDF_VERSION_1_2 -> d
    com.lowagie.text.pdf.PdfName PDF_VERSION_1_3 -> e
    com.lowagie.text.pdf.PdfName PDF_VERSION_1_4 -> f
    com.lowagie.text.pdf.PdfName PDF_VERSION_1_5 -> g
    com.lowagie.text.pdf.PdfName PDF_VERSION_1_6 -> h
    com.lowagie.text.pdf.PdfName PDF_VERSION_1_7 -> i
    com.lowagie.text.pdf.internal.PdfXConformanceImp pdfxConformance -> c
    java.util.HashMap images -> t
    com.lowagie.text.pdf.PdfDocument pdf -> j
    com.lowagie.text.pdf.PdfContentByte directContent -> u
    com.lowagie.text.pdf.PdfContentByte directContentUnder -> v
    com.lowagie.text.pdf.PdfWriter$PdfBody body -> k
    com.lowagie.text.pdf.PdfDictionary extraCatalog -> w
    com.lowagie.text.pdf.PdfPages root -> x
    java.util.ArrayList pageReferences -> y
    int currentPageNumber -> z
    com.lowagie.text.pdf.PdfName tabs -> A
    int prevxref -> l
    java.util.List newBookmarks -> m
    com.lowagie.text.pdf.internal.PdfVersionImp pdf_version -> B
    byte[] xmpMetadata -> n
    com.lowagie.text.pdf.PdfEncryption crypto -> o
    boolean fullCompression -> C
    int compressionLevel -> p
    java.util.LinkedHashMap documentFonts -> D
    int fontNumber -> E
    java.util.LinkedHashMap formXObjects -> F
    int formXObjectsCounter -> G
    java.util.HashMap importedPages -> H
    com.lowagie.text.pdf.PdfReaderInstance currentPdfReaderInstance -> q
    java.util.HashMap documentColors -> I
    int colorNumber -> J
    java.util.HashMap documentPatterns -> K
    int patternNumber -> L
    java.util.HashMap documentShadingPatterns -> M
    java.util.HashMap documentShadings -> N
    java.util.HashMap documentExtGState -> O
    java.util.HashMap documentProperties -> P
    boolean tagged -> Q
    com.lowagie.text.pdf.PdfStructureTreeRoot structureTreeRoot -> R
    java.util.Set documentOCG -> r
    java.util.List documentOCGorder -> S
    com.lowagie.text.pdf.PdfOCProperties OCProperties -> s
    com.lowagie.text.pdf.PdfArray OCGRadioGroup -> T
    com.lowagie.text.pdf.PdfArray OCGLocked -> U
    com.lowagie.text.pdf.PdfDictionary group -> V
    int runDirection -> W
    float userunit -> X
    com.lowagie.text.pdf.PdfDictionary defaultColorspace -> Y
    java.util.HashMap documentSpotPatterns -> Z
    com.lowagie.text.pdf.ColorDetails patternColorspaceRGB -> aa
    com.lowagie.text.pdf.ColorDetails patternColorspaceGRAY -> ab
    com.lowagie.text.pdf.ColorDetails patternColorspaceCMYK -> ac
    com.lowagie.text.pdf.PdfDictionary imageDictionary -> ad
    java.util.HashMap JBIG2Globals -> ae
    com.lowagie.text.pdf.PdfPageEvent pageEvent -> af
    float spaceCharRatio -> ag
    boolean rgbTransparencyBlending -> ah
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfDocument,java.io.OutputStream) -> <init>
    com.lowagie.text.pdf.PdfWriter getInstance(com.lowagie.text.Document,java.io.OutputStream) -> a
    com.lowagie.text.pdf.PdfDocument getPdfDocument() -> h
    com.lowagie.text.pdf.PdfContentByte getDirectContent() -> g
    com.lowagie.text.pdf.PdfContentByte getDirectContentUnder() -> f
    void resetContent() -> i
    void addLocalDestinations(java.util.TreeMap) -> a
    com.lowagie.text.pdf.PdfIndirectObject addToBody$1bb0f593(com.lowagie.text.pdf.PdfDictionary) -> a
    com.lowagie.text.pdf.PdfIndirectObject addToBody$3d6aaff5$5aa1bec2(com.lowagie.text.pdf.PdfDictionary) -> b
    com.lowagie.text.pdf.PdfIndirectObject addToBody(com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfIndirectReference) -> a
    com.lowagie.text.pdf.PdfIndirectObject addToBody$3e1468e3$4c507ba7(com.lowagie.text.pdf.PdfNumber,com.lowagie.text.pdf.PdfIndirectReference) -> a
    com.lowagie.text.pdf.PdfIndirectObject addToBody(com.lowagie.text.pdf.PdfObject,int) -> a
    com.lowagie.text.pdf.PdfIndirectObject addToBody(com.lowagie.text.pdf.PdfObject,int,boolean) -> a
    com.lowagie.text.pdf.PdfIndirectReference getPdfIndirectReference() -> j
    int getIndirectReferenceNumber() -> k
    com.lowagie.text.pdf.OutputStreamCounter getOs() -> l
    com.lowagie.text.pdf.PdfIndirectReference getPageReference(int) -> b
    com.lowagie.text.pdf.PdfIndirectReference getCurrentPage() -> m
    int getCurrentPageNumber() -> n
    com.lowagie.text.pdf.PdfName getTabs() -> o
    com.lowagie.text.pdf.PdfIndirectReference add(com.lowagie.text.pdf.PdfPage,com.lowagie.text.pdf.PdfContents) -> a
    com.lowagie.text.pdf.PdfPageEvent getPageEvent() -> p
    void open() -> a
    void close() -> close
    void addSharedObjectsToBody() -> q
    com.lowagie.text.pdf.internal.PdfVersionImp getPdfVersion() -> r
    void setPdfVersion(char) -> a
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> a
    int getPDFXConformance() -> s
    boolean isPdfX() -> t
    boolean isPdfA1() -> u
    com.lowagie.text.pdf.PdfEncryption getEncryption() -> v
    boolean isFullCompression() -> w
    int getCompressionLevel() -> x
    com.lowagie.text.pdf.FontDetails addSimple(com.lowagie.text.pdf.BaseFont) -> a
    void eliminateFontSubset(com.lowagie.text.pdf.PdfDictionary) -> c
    com.lowagie.text.pdf.PdfName addDirectTemplateSimple$34178c06(com.lowagie.text.pdf.PdfTemplate) -> a
    int getNewObjectNumber$44eca946(com.lowagie.text.pdf.PdfReader,int) -> a
    com.lowagie.text.pdf.PdfName getColorspaceName() -> e
    com.lowagie.text.pdf.ColorDetails addSimple(com.lowagie.text.pdf.PdfSpotColor) -> a
    com.lowagie.text.pdf.PdfName addSimplePattern(com.lowagie.text.pdf.PdfPatternPainter) -> a
    void addSimpleShadingPattern(com.lowagie.text.pdf.PdfShadingPattern) -> a
    com.lowagie.text.pdf.PdfObject[] addSimpleExtGState$5700ab51(com.lowagie.text.pdf.PdfGState) -> a
    com.lowagie.text.pdf.PdfObject[] addSimpleProperty$620d1de8(com.lowagie.text.pdf.PdfOCG,com.lowagie.text.pdf.PdfIndirectReference) -> a
    boolean isTagged() -> y
    com.lowagie.text.pdf.PdfStructureTreeRoot getStructureTreeRoot() -> z
    void addASEvent(com.lowagie.text.pdf.PdfName,com.lowagie.text.pdf.PdfName) -> a
    void fillOCProperties$1385ff() -> A
    float getSpaceCharRatio() -> B
    float getUserunit() -> C
    com.lowagie.text.pdf.PdfDictionary getDefaultColorspace() -> D
    com.lowagie.text.pdf.ColorDetails addSimplePatternColorspace(java.awt.Color) -> a
    com.lowagie.text.pdf.PdfName addDirectImageSimple$7b7c2a46(com.lowagie.text.Image) -> a
    com.lowagie.text.pdf.PdfIndirectReference add$678ee6bf(com.lowagie.text.pdf.PdfImage) -> a
    com.lowagie.text.pdf.PdfIndirectReference getImageReference(com.lowagie.text.pdf.PdfName) -> a
    com.lowagie.text.pdf.PdfIndirectReference add(com.lowagie.text.pdf.PdfICCBased) -> a
    com.lowagie.text.pdf.PdfIndirectReference getReferenceJBIG2Globals(byte[]) -> a
    boolean isRgbTransparencyBlending() -> E
    boolean lambda$fillOCProperties$0(com.lowagie.text.pdf.PdfOCG) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.PdfWriter$PdfBody -> a.a.a.c.bK:
    java.util.TreeSet xrefs -> a
    com.lowagie.text.pdf.PdfWriter writer -> b
    int refnum -> c
    long position -> d
    com.lowagie.text.pdf.ByteBuffer index -> e
    com.lowagie.text.pdf.ByteBuffer streamObjects -> f
    int currentObjNum -> g
    int numObj -> h
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    com.lowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference addToObjStm(com.lowagie.text.pdf.PdfObject,int) -> a
    void flushObjStm() -> d
    com.lowagie.text.pdf.PdfIndirectObject add$1bb0f593(com.lowagie.text.pdf.PdfDictionary) -> a
    com.lowagie.text.pdf.PdfIndirectReference getPdfIndirectReference() -> a
    int getIndirectReferenceNumber() -> b
    com.lowagie.text.pdf.PdfIndirectObject add(com.lowagie.text.pdf.PdfObject,com.lowagie.text.pdf.PdfIndirectReference) -> a
    com.lowagie.text.pdf.PdfIndirectObject add(com.lowagie.text.pdf.PdfObject,int,boolean) -> a
    long offset() -> c
    void writeCrossReferenceTable$3700f46a(com.lowagie.text.pdf.OutputStreamCounter,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfObject,int) -> a
com.lowagie.text.pdf.PdfWriter$PdfBody$PdfCrossReference -> a.a.a.c.bL:
    int type -> a
    long offset -> b
    int refnum -> c
    int generation -> d
    void <init>(int) -> <init>
    void <init>(int,long) -> <init>
    void <init>(int,long,int) -> <init>
    int getRefnum() -> a
    void toPdf$a3063a7(com.lowagie.text.pdf.OutputStreamCounter) -> a
    void toPdf$5e5f4da0(int,com.lowagie.text.pdf.ByteBuffer) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.lowagie.text.pdf.PdfWriter$PdfTrailer -> a.a.a.c.bM:
    void <init>(int,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfIndirectReference,com.lowagie.text.pdf.PdfObject,int) -> <init>
    void toPdf(com.lowagie.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.lowagie.text.pdf.PdfXConformanceException -> a.a.a.c.bN:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
com.lowagie.text.pdf.Pfm2afm -> a.a.a.c.bO:
    com.lowagie.text.pdf.RandomAccessFileOrArray in -> a
    java.io.PrintWriter out -> b
    short vers -> c
    int h_len -> d
    java.lang.String copyright -> e
    short type -> f
    short points -> g
    short verres -> h
    short horres -> i
    short ascent -> j
    short intleading -> k
    short extleading -> l
    byte italic -> m
    byte uline -> n
    byte overs -> o
    short weight -> p
    byte charset -> q
    short pixwidth -> r
    short pixheight -> s
    byte kind -> t
    short avgwidth -> u
    short maxwidth -> v
    int firstchar -> w
    int lastchar -> x
    byte defchar -> y
    byte brkchar -> z
    short widthby -> A
    int device -> B
    int face -> C
    int bits -> D
    int bitoff -> E
    short extlen -> F
    int psext -> G
    int chartab -> H
    int res1 -> I
    int kernpairs -> J
    int res2 -> K
    int fontname -> L
    short capheight -> M
    short xheight -> N
    short ascender -> O
    short descender -> P
    boolean isMono -> Q
    int[] Win2PSStd -> R
    int[] WinClass -> S
    java.lang.String[] WinChars -> T
    void <init>(com.lowagie.text.pdf.RandomAccessFileOrArray,java.io.OutputStream) -> <init>
    void convert(com.lowagie.text.pdf.RandomAccessFileOrArray,java.io.OutputStream) -> a
    java.lang.String readString() -> a
    void outval(int) -> a
    void outchar(int,int,java.lang.String) -> a
com.lowagie.text.pdf.RGBColor -> a.a.a.c.bP:
    void <init>(int,int,int,int) -> <init>
    void <init>(float,float,float,float) -> <init>
com.lowagie.text.pdf.RandomAccessFileOrArray -> a.a.a.c.bQ:
    com.lowagie.text.pdf.MappedRandomAccessFile rf -> c
    java.io.RandomAccessFile trf -> d
    boolean plainRandomAccess -> e
    java.lang.String filename -> f
    byte[] arrayIn -> g
    int arrayInPtr -> h
    byte back -> a
    boolean isBack -> b
    int startOffset -> i
    void <init>(java.lang.String,boolean,boolean) -> <init>
    void <init>(byte[]) -> <init>
    void <init>(com.lowagie.text.pdf.RandomAccessFileOrArray) -> <init>
    byte[] InputStreamToArray(java.io.InputStream) -> a
    int read() -> a
    int read(byte[],int,int) -> a
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    void reOpen() -> b
    void insureOpen() -> h
    void close() -> close
    int length() -> c
    void seek(int) -> a
    int getFilePointer() -> d
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    short readShortLE() -> e
    int readUnsignedShort() -> readUnsignedShort
    int readUnsignedShortLE() -> f
    char readChar() -> readChar
    int readInt() -> readInt
    int readIntLE() -> g
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
    void setStartOffset(int) -> b
com.lowagie.text.pdf.ShadingColor -> a.a.a.c.bR:
    com.lowagie.text.pdf.PdfShadingPattern shadingPattern -> a
    void <init>(com.lowagie.text.pdf.PdfShadingPattern) -> <init>
    com.lowagie.text.pdf.PdfShadingPattern getPdfShadingPattern() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.lowagie.text.pdf.SpotColor -> a.a.a.c.bS:
    com.lowagie.text.pdf.PdfSpotColor spot -> a
    float tint -> b
    void <init>(com.lowagie.text.pdf.PdfSpotColor,float) -> <init>
    void <init>(float,float,float,float,float) -> <init>
    com.lowagie.text.pdf.PdfSpotColor getPdfSpotColor() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.lowagie.text.pdf.StampContent -> a.a.a.c.bT:
    com.lowagie.text.pdf.PdfStamperImp$PageStamp ps -> d
    com.lowagie.text.pdf.PageResources pageResources -> e
    void <init>(com.lowagie.text.pdf.PdfStamperImp,com.lowagie.text.pdf.PdfStamperImp$PageStamp) -> <init>
    com.lowagie.text.pdf.PdfContentByte getDuplicate() -> E
    com.lowagie.text.pdf.PageResources getPageResources() -> F
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> a
com.lowagie.text.pdf.StandardDecryption -> a.a.a.c.bU:
    com.lowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> a
    com.lowagie.text.pdf.crypto.AESCipher cipher -> b
    byte[] key -> c
    boolean aes -> d
    boolean initiated -> e
    byte[] iv -> f
    int ivptr -> g
    void <init>(byte[],int,int) -> <init>
    byte[] update$7dcc7401(byte[],int) -> a
    byte[] finish() -> a
com.lowagie.text.pdf.TTFCache -> a.a.a.c.bV:
    java.util.Map ttfFileMap -> a
    org.apache.fop.fonts.truetype.TTFFile getTTFFile(java.lang.String,com.lowagie.text.pdf.TrueTypeFontUnicode) -> a
    org.apache.fop.fonts.truetype.TTFFile loadTTF(org.apache.fop.fonts.apps.TTFReader,java.lang.String,com.lowagie.text.pdf.TrueTypeFontUnicode) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.TrueTypeFont -> a.a.a.c.bW:
    boolean justNames -> A
    java.util.HashMap tables -> B
    com.lowagie.text.pdf.RandomAccessFileOrArray rf -> p
    java.lang.String fileName -> q
    boolean cff -> r
    int cffOffset -> C
    int cffLength -> D
    int directoryOffset -> s
    java.lang.String ttcIndex -> t
    java.lang.String style -> u
    com.lowagie.text.pdf.TrueTypeFont$FontHeader head -> E
    com.lowagie.text.pdf.TrueTypeFont$HorizontalHeader hhea -> F
    com.lowagie.text.pdf.TrueTypeFont$WindowsMetrics os_2 -> v
    int[] GlyphWidths -> G
    int[][] bboxes -> H
    java.util.HashMap cmap10 -> w
    java.util.HashMap cmap31 -> x
    java.util.HashMap cmapExt -> y
    com.lowagie.text.pdf.IntHashtable kerning -> I
    java.lang.String fontName -> z
    java.lang.String[][] fullName -> J
    java.lang.String[][] allNameEntries -> K
    java.lang.String[][] familyName -> L
    double italicAngle -> M
    boolean isFixedPitch -> N
    int underlinePosition -> O
    int underlineThickness -> P
    void <init>() -> <init>
    void <init>(java.lang.String,java.lang.String,boolean,byte[]) -> <init>
    java.lang.String getTTCName(java.lang.String) -> e
    void fillTables() -> l
    java.lang.String getBaseFont() -> m
    java.lang.String[][] getNames(int) -> h
    java.lang.String[][] getAllNames() -> n
    void checkCff() -> o
    void process$49638b58(byte[]) -> a
    java.lang.String readStandardString(int) -> i
    java.lang.String readUnicodeString(int) -> j
    void readGlyphWidths() -> p
    int getGlyphWidth(int) -> f
    void readBbox() -> q
    void readCMaps() -> i
    java.util.HashMap readFormat0() -> r
    java.util.HashMap readFormat4() -> s
    java.util.HashMap readFormat6() -> t
    void readKerning() -> u
    int getRawWidth(int,java.lang.String) -> a
    com.lowagie.text.pdf.PdfDictionary getFontDescriptor(com.lowagie.text.pdf.PdfIndirectReference,java.lang.String,com.lowagie.text.pdf.PdfIndirectReference) -> a
    byte[] getFullFont() -> j
    void addRangeUni(java.util.Map,boolean,boolean) -> a
    void writeFont(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    byte[] readCffFont() -> k
    float getFontDescriptor(int,float) -> a
    int[] getMetricsTT(int) -> g
    java.lang.String getPostscriptFontName() -> f
    java.lang.String[][] getFullFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int[] getRawCharBBox(int,java.lang.String) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.TrueTypeFont$FontHeader -> a.a.a.c.bX:
    int flags -> a
    int unitsPerEm -> b
    short xMin -> c
    short yMin -> d
    short xMax -> e
    short yMax -> f
    int macStyle -> g
    void <init>() -> <init>
com.lowagie.text.pdf.TrueTypeFont$HorizontalHeader -> a.a.a.c.bY:
    short Ascender -> a
    short Descender -> b
    short LineGap -> c
    int advanceWidthMax -> d
    short minLeftSideBearing -> e
    short minRightSideBearing -> f
    short xMaxExtent -> g
    short caretSlopeRise -> h
    short caretSlopeRun -> i
    int numberOfHMetrics -> j
    void <init>() -> <init>
com.lowagie.text.pdf.TrueTypeFont$WindowsMetrics -> a.a.a.c.bZ:
    short xAvgCharWidth -> a
    int usWeightClass -> b
    int usWidthClass -> c
    short fsType -> d
    short ySubscriptXSize -> e
    short ySubscriptYSize -> f
    short ySubscriptXOffset -> g
    short ySubscriptYOffset -> h
    short ySuperscriptXSize -> i
    short ySuperscriptYSize -> j
    short ySuperscriptXOffset -> k
    short ySuperscriptYOffset -> l
    short yStrikeoutSize -> m
    short yStrikeoutPosition -> n
    short sFamilyClass -> o
    byte[] panose -> p
    byte[] achVendID -> q
    int fsSelection -> r
    int usFirstCharIndex -> s
    int usLastCharIndex -> t
    short sTypoAscender -> u
    short sTypoDescender -> v
    short sTypoLineGap -> w
    int usWinAscent -> x
    int usWinDescent -> y
    int ulCodePageRange1 -> z
    int ulCodePageRange2 -> A
    int sCapHeight -> B
    void <init>() -> <init>
com.lowagie.text.pdf.TrueTypeFontSubSet -> a.a.a.c.ca:
    java.lang.String[] tableNamesSimple -> a
    java.lang.String[] tableNamesCmap -> b
    java.lang.String[] tableNamesExtra -> c
    int[] entrySelectors -> d
    java.util.HashMap tableDirectory -> e
    com.lowagie.text.pdf.RandomAccessFileOrArray rf -> f
    java.lang.String fileName -> g
    boolean includeCmap -> h
    boolean includeExtras -> i
    boolean locaShortTable -> j
    int[] locaTable -> k
    java.util.HashMap glyphsUsed -> l
    java.util.ArrayList glyphsInList -> m
    int tableGlyphOffset -> n
    int[] newLocaTable -> o
    byte[] newLocaTableOut -> p
    byte[] newGlyfTable -> q
    int glyfTableRealSize -> r
    int locaTableRealSize -> s
    byte[] outFont -> t
    int fontPtr -> u
    int directoryOffset -> v
    void <init>(java.lang.String,com.lowagie.text.pdf.RandomAccessFileOrArray,java.util.HashMap,int,boolean,boolean) -> <init>
    byte[] process() -> a
    java.lang.String readStandardString$47921032() -> b
    void writeFontShort(int) -> a
    void writeFontInt(int) -> b
    int calculateChecksum(byte[]) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.TrueTypeFontUnicode -> a.a.a.c.cb:
    byte[] rotbits -> A
    boolean vertical -> B
    java.util.Map inverseCmap -> C
    void <init>(java.lang.String,java.lang.String,boolean,byte[]) -> <init>
    java.lang.String toHex4(int) -> h
    java.lang.String toHex(int) -> i
    void readCMaps() -> i
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> c
    void writeFont(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    byte[] convertToBytes(java.lang.String) -> d
    byte[] convertToBytes(int) -> b
    int[] getMetricsTT(int) -> g
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.Type1Font -> a.a.a.c.cc:
    int[] PFB_TYPES -> p
    com.lowagie.text.pdf.fonts.FontsResourceAnchor resourceAnchor -> q
    byte[] pfb -> r
    java.lang.String FontName -> s
    java.lang.String FullName -> t
    java.lang.String FamilyName -> u
    java.lang.String Weight -> v
    float ItalicAngle -> w
    boolean IsFixedPitch -> x
    java.lang.String CharacterSet -> y
    int llx -> z
    int lly -> A
    int urx -> B
    int ury -> C
    int UnderlinePosition -> D
    int UnderlineThickness -> E
    java.lang.String EncodingScheme -> F
    int CapHeight -> G
    int XHeight -> H
    int Ascender -> I
    int Descender -> J
    int StdHW -> K
    int StdVW -> L
    java.util.Map CharMetrics -> M
    java.util.Map KernPairs -> N
    java.lang.String fileName -> O
    boolean builtinFont -> P
    void <init>(java.lang.String,java.lang.String,boolean,byte[]) -> <init>
    int getRawWidth(int,java.lang.String) -> a
    void process(com.lowagie.text.pdf.RandomAccessFileOrArray) -> a
    com.lowagie.text.pdf.BaseFont$StreamFont getFullFontStream$a88f16() -> i
    void writeFont(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    float getFontDescriptor(int,float) -> a
    java.lang.String getPostscriptFontName() -> f
    java.lang.String[][] getFullFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int[] getRawCharBBox(int,java.lang.String) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.XfaForm -> a.a.a.c.cd:
    com.lowagie.text.pdf.XfaForm$Xml2SomTemplate templateSom -> a
    org.w3c.dom.Node templateNode -> b
    com.lowagie.text.pdf.XfaForm$Xml2SomDatasets datasetsSom -> c
    org.w3c.dom.Node datasetsNode -> d
    com.lowagie.text.pdf.PdfReader reader -> e
    boolean xfaPresent -> f
    org.w3c.dom.Document domDocument -> g
    boolean changed -> h
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.PdfReader) -> <init>
    com.lowagie.text.pdf.PdfObject getXfaObject(com.lowagie.text.pdf.PdfReader) -> a
    byte[] serializeDoc(org.w3c.dom.Node) -> a
    void setXfa$58edc589(com.lowagie.text.pdf.PdfStamperImp) -> a
    boolean isChanged() -> a
    org.xml.sax.InputSource lambda$new$0(java.lang.String,java.lang.String) -> a
com.lowagie.text.pdf.XfaForm$InverseStore -> a.a.a.c.ce:
    java.util.List part -> a
    java.util.List follow -> b
    void <init>() -> <init>
com.lowagie.text.pdf.XfaForm$Stack2 -> a.a.a.c.cf:
    void <init>() -> <init>
    java.lang.String pop() -> a
com.lowagie.text.pdf.XfaForm$Xml2Som -> a.a.a.c.cg:
    java.util.List order -> a
    java.util.Map name2Node -> b
    java.util.Map inverseSearch -> c
    com.lowagie.text.pdf.XfaForm$Stack2 stack -> d
    int anform -> e
    void <init>() -> <init>
    java.lang.String escapeSom(java.lang.String) -> a
    java.lang.String printStack() -> a
    void inverseSearchAdd(java.lang.String) -> b
com.lowagie.text.pdf.XfaForm$Xml2SomDatasets -> a.a.a.c.ch:
    void <init>(org.w3c.dom.Node) -> <init>
    boolean hasChildren(org.w3c.dom.Node) -> a
    void processDatasetsInternal(org.w3c.dom.Node) -> b
com.lowagie.text.pdf.XfaForm$Xml2SomTemplate -> a.a.a.c.ci:
    boolean dynamicForm -> f
    int templateLevel -> g
    void <init>(org.w3c.dom.Node) -> <init>
    void processTemplate(org.w3c.dom.Node,java.util.Map) -> a
com.lowagie.text.pdf.codec.CCITTG4Encoder -> a.a.a.c.a.a:
    byte[] zeroruns -> a
    byte[] oneruns -> b
    int rowbytes -> c
    int rowpixels -> d
    int bit -> e
    int data -> f
    byte[] refline -> g
    com.lowagie.text.pdf.ByteBuffer outBuf -> h
    byte[] dataBp -> i
    int offsetData -> j
    int sizeData -> k
    int[][] TIFFFaxWhiteCodes -> l
    int[][] TIFFFaxBlackCodes -> m
    int[] horizcode -> n
    int[] passcode -> o
    int[][] vcodes -> p
    int[] msbmask -> q
    void <init>(int) -> <init>
    byte[] compress(byte[],int,int) -> a
    int find1span(byte[],int,int,int) -> a
    int find0span(byte[],int,int,int) -> b
    int finddiff(byte[],int,int,int,int) -> a
    int finddiff2(byte[],int,int,int,int) -> b
    void putcode(int[]) -> a
    void putspan(int,int[][]) -> a
    void putBits(int,int) -> a
    int pixel(byte[],int,int) -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.codec.wmf.InputMeta -> a.a.a.c.a.a.a:
    java.io.InputStream in -> b
    int length -> a
    void <init>(java.io.InputStream) -> <init>
    int readWord() -> a
    int readShort() -> b
    int readInt() -> c
    int readByte() -> d
    void skip(int) -> a
    java.awt.Color readColor() -> e
com.lowagie.text.pdf.codec.wmf.MetaBrush -> a.a.a.c.a.a.b:
    int style -> a
    int hatch -> b
    java.awt.Color color -> c
    void <init>() -> <init>
com.lowagie.text.pdf.codec.wmf.MetaDo -> a.a.a.c.a.a.c:
    com.lowagie.text.pdf.PdfTemplate cb$9569a20 -> a
    com.lowagie.text.pdf.codec.wmf.InputMeta in -> b
    int left -> c
    int top -> d
    int right -> e
    int bottom -> f
    int inch -> g
    com.lowagie.text.pdf.codec.wmf.MetaState state -> h
    void <init>(java.io.InputStream,com.lowagie.text.pdf.PdfTemplate) -> <init>
    float getArc(float,float,float,float) -> a
    void readAll() -> a
    void outputText$233668e8(int,int,java.lang.String) -> a
    boolean isNullStrokeFill(boolean) -> a
    void strokeAndFill() -> b
com.lowagie.text.pdf.codec.wmf.MetaFont -> a.a.a.c.a.a.d:
    java.lang.String[] fontNames -> k
    int height -> a
    float angle -> b
    int bold -> c
    int italic -> d
    boolean underline -> e
    boolean strikeout -> f
    int charset -> g
    int pitchAndFamily -> h
    java.lang.String faceName -> i
    com.lowagie.text.pdf.BaseFont font -> l
    void <init>() -> <init>
    com.lowagie.text.pdf.BaseFont getFont() -> a
    float getFontSize(com.lowagie.text.pdf.codec.wmf.MetaState) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.codec.wmf.MetaObject -> a.a.a.c.a.a.e:
    int type -> j
    void <init>() -> <init>
com.lowagie.text.pdf.codec.wmf.MetaPen -> a.a.a.c.a.a.f:
    int style -> a
    int penWidth -> b
    java.awt.Color color -> c
    void <init>() -> <init>
com.lowagie.text.pdf.codec.wmf.MetaState -> a.a.a.c.a.a.g:
    java.util.Stack savedStates -> a
    java.util.List MetaObjects -> b
    java.awt.Point currentPoint -> c
    com.lowagie.text.pdf.codec.wmf.MetaPen currentPen -> d
    com.lowagie.text.pdf.codec.wmf.MetaBrush currentBrush -> e
    com.lowagie.text.pdf.codec.wmf.MetaFont currentFont -> f
    java.awt.Color currentBackgroundColor -> g
    java.awt.Color currentTextColor -> h
    int backgroundMode -> i
    int polyFillMode -> j
    int lineJoin -> r
    int textAlign -> k
    int offsetWx -> l
    int offsetWy -> m
    int extentWx -> n
    int extentWy -> o
    float scalingX -> p
    float scalingY -> q
    void <init>() -> <init>
    void <init>(com.lowagie.text.pdf.codec.wmf.MetaState) -> <init>
    void setMetaState(com.lowagie.text.pdf.codec.wmf.MetaState) -> a
    void addMetaObject(com.lowagie.text.pdf.codec.wmf.MetaObject) -> a
    float transformX(int) -> a
    float transformY(int) -> b
    float transformAngle(float) -> a
    void setLineJoinRectangle$5539c5bb(com.lowagie.text.pdf.PdfTemplate) -> a
    void setLineJoinPolygon$5539c5bb(com.lowagie.text.pdf.PdfTemplate) -> b
    boolean getLineNeutral() -> a
com.lowagie.text.pdf.collection.PdfCollection -> a.a.a.c.b.a:
com.lowagie.text.pdf.crypto.AESCipher -> a.a.a.c.c.a:
    org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher bp -> a
    void <init>(boolean,byte[],byte[]) -> <init>
    byte[] update(byte[],int,int) -> a
    byte[] doFinal() -> a
com.lowagie.text.pdf.crypto.ARCFOUREncryption -> a.a.a.c.c.b:
    byte[] state -> a
    int x -> b
    int y -> c
    void <init>() -> <init>
    void prepareARCFOURKey(byte[]) -> a
    void prepareARCFOURKey$1cf967a4(byte[],int) -> a
    void encryptARCFOUR$3f34d140(byte[],int,int,byte[]) -> a
    void encryptARCFOUR(byte[],byte[]) -> a
    void encryptARCFOUR(byte[]) -> b
com.lowagie.text.pdf.crypto.IVGenerator -> a.a.a.c.c.c:
    com.lowagie.text.pdf.crypto.ARCFOUREncryption arcfour -> a
    byte[] getIV() -> a
    byte[] getIV$255806f() -> b
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.draw.DrawInterface -> a.a.a.c.d.a:
com.lowagie.text.pdf.events.PdfPCellEventForwarder -> a.a.a.c.e.a:
    java.util.List events -> a
    void <init>() -> <init>
    void addCellEvent(com.lowagie.text.pdf.PdfPCellEvent) -> a
    void cellLayout(com.lowagie.text.pdf.PdfPCell,com.lowagie.text.Rectangle,com.lowagie.text.pdf.PdfContentByte[]) -> a
com.lowagie.text.pdf.events.PdfPTableEventForwarder -> a.a.a.c.e.b:
    java.util.List events -> a
    void <init>() -> <init>
    void addTableEvent(com.lowagie.text.pdf.PdfPTableEvent) -> a
    void tableLayout(com.lowagie.text.pdf.PdfPTable,float[][],float[],int,int,com.lowagie.text.pdf.PdfContentByte[]) -> a
com.lowagie.text.pdf.fonts.FontsResourceAnchor -> a.a.a.c.f.a:
    void <init>() -> <init>
com.lowagie.text.pdf.internal.PdfAnnotationsImp -> a.a.a.c.g.a:
    com.lowagie.text.pdf.PdfAcroForm acroForm -> a
    java.util.List annotations -> b
    java.util.List delayedAnnotations -> c
    void <init>(com.lowagie.text.pdf.PdfWriter) -> <init>
    com.lowagie.text.pdf.PdfAnnotation convertAnnotation(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.Annotation,com.lowagie.text.Rectangle) -> a
    boolean hasValidAcroForm() -> a
    com.lowagie.text.pdf.PdfAcroForm getAcroForm() -> b
    void addAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> a
    void addPlainAnnotation(com.lowagie.text.pdf.PdfAnnotation) -> b
    void addFormFieldRaw(com.lowagie.text.pdf.PdfFormField) -> a
    boolean hasUnusedAnnotations() -> c
    void resetAnnotations() -> d
    com.lowagie.text.pdf.PdfArray rotateAnnotations(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.Rectangle) -> a
com.lowagie.text.pdf.internal.PdfVersionImp -> a.a.a.c.g.b:
    byte[][] HEADER -> a
    boolean headerWasWritten -> b
    boolean appendmode -> c
    char header_version -> d
    com.lowagie.text.pdf.PdfName catalog_version -> e
    com.lowagie.text.pdf.PdfDictionary extensions -> f
    void <init>() -> <init>
    void setPdfVersion(char) -> a
    void writeHeader(com.lowagie.text.pdf.OutputStreamCounter) -> a
    com.lowagie.text.pdf.PdfName getVersionAsName(char) -> b
    void addToCatalog$6bc4798c(com.lowagie.text.pdf.PdfDocument$PdfCatalog) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.internal.PdfViewerPreferencesImp -> a.a.a.c.g.c:
    int pageLayoutAndMode -> a
    com.lowagie.text.pdf.PdfDictionary viewerPreferences -> b
    void <init>() -> <init>
    void addToCatalog$6bc4798c(com.lowagie.text.pdf.PdfDocument$PdfCatalog) -> a
    void <clinit>() -> <clinit>
com.lowagie.text.pdf.internal.PdfXConformanceImp -> a.a.a.c.g.d:
    int pdfxConformance -> a
    void <init>() -> <init>
    void checkPDFXConformance(com.lowagie.text.pdf.PdfWriter,int,java.lang.Object) -> a
    int getPDFXConformance() -> a
    boolean isPdfX() -> b
    boolean isPdfA1() -> c
com.lowagie.text.xml.XmlDomWriter -> a.a.a.d.a:
    java.io.PrintWriter fOut -> a
    boolean fCanonical -> b
    boolean fXML11 -> c
    void <init>() -> <init>
    void setCanonical$1385ff() -> a
    void setOutput$6ee891b1(java.io.OutputStream) -> a
    void write(org.w3c.dom.Node) -> a
    void normalizeAndPrint(java.lang.String,boolean) -> a
    void normalizeAndPrint(char,boolean) -> a
com.lowagie.text.xml.xmp.XmpReader -> a.a.a.d.a.a:
    org.w3c.dom.Document domDocument -> a
    void <init>(byte[]) -> <init>
    boolean replace(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean add(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    byte[] serializeDoc() -> a
    org.xml.sax.InputSource lambda$new$0(java.lang.String,java.lang.String) -> a
org.example.Main -> org.example.Main:
    int NUM_OF_ITERATIONS -> NUM_OF_ITERATIONS
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void createPDF(java.lang.String) -> createPDF
    void manipulatePDF(java.lang.String) -> manipulatePDF
    void rotatePage(java.lang.String) -> rotatePage
