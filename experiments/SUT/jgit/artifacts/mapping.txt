com.googlecode.javaewah.BitmapStorage -> a.a.a.a:
    void addWord(long) -> a
    void addStreamOfLiteralWords$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> a
    void addStreamOfEmptyWords(boolean,long) -> a
    void addStreamOfNegatedLiteralWords$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> b
    void clear() -> a
    void setSizeInBitsWithinLastWord(int) -> a
    int sizeInWords() -> b
    void ensureCapacity(int) -> b
    long getWord(int) -> c
    long getLastWord() -> c
    void trim() -> d
    void setWord(int,long) -> a
    void push_back(long) -> b
    void push_back$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> c
    void negative_push_back$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> d
    void removeLastWord() -> e
    void andWord(int,long) -> b
    void orWord(int,long) -> c
    void andLastWord(long) -> c
    void orLastWord(long) -> d
    void expand(int,int) -> a
    void collapse(int,int) -> b
    com.googlecode.javaewah.LongArray clone$3e9131c9() -> f
    boolean hasNext() -> g
    int next() -> h
com.googlecode.javaewah.BufferedRunningLengthWord -> a.a.a.b:
    int literalWordOffset -> a
    int numberOfLiteralWords -> b
    boolean runningBit -> c
    long runningLength -> d
    void <init>(long) -> <init>
    void <init>(com.googlecode.javaewah.RunningLengthWord) -> <init>
    int getNumberOfLiteralWords() -> a
    boolean getRunningBit() -> b
    long getRunningLength() -> c
    void reset(com.googlecode.javaewah.RunningLengthWord) -> a
    long size() -> d
    java.lang.String toString() -> toString
    com.googlecode.javaewah.BufferedRunningLengthWord clone() -> e
    java.lang.Object clone() -> clone
com.googlecode.javaewah.EWAHCompressedBitmap -> a.a.a.c:
    com.googlecode.javaewah.LongArray buffer$ceb0d36$33121e2c -> a
    com.googlecode.javaewah.RunningLengthWord rlw -> b
    int sizeInBits -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(com.googlecode.javaewah.LongArray) -> <init>
    void addWord(long) -> a
    void addWord(long,int) -> a
    void insertEmptyWord(boolean) -> a
    void insertLiteralWord(long) -> e
    void addStreamOfLiteralWords$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> a
    void addStreamOfEmptyWords(boolean,long) -> a
    void addStreamOfNegatedLiteralWords$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> b
    com.googlecode.javaewah.EWAHCompressedBitmap and(com.googlecode.javaewah.EWAHCompressedBitmap) -> a
    com.googlecode.javaewah.EWAHCompressedBitmap andNot(com.googlecode.javaewah.EWAHCompressedBitmap) -> b
    int cardinality() -> i
    void clear() -> a
    void serialize(java.io.DataOutput) -> a
    void deserialize(java.io.DataInput) -> a
    boolean equals(java.lang.Object) -> equals
    void fastaddStreamOfEmptyWords(boolean,long) -> b
    com.googlecode.javaewah.EWAHIterator getEWAHIterator() -> m
    int hashCode() -> hashCode
    com.googlecode.javaewah.IntIteratorImpl intIterator$554335a2() -> j
    java.util.Iterator iterator() -> iterator
    com.googlecode.javaewah.EWAHCompressedBitmap or(com.googlecode.javaewah.EWAHCompressedBitmap) -> c
    void readExternal(java.io.ObjectInput) -> readExternal
    void writeExternal(java.io.ObjectOutput) -> writeExternal
    boolean set(int) -> d
    void setRLWInfo(int,boolean,long,long) -> a
    void setSizeInBitsWithinLastWord(int) -> a
    int distanceInWords(int) -> e
    int sizeInBits() -> k
    int sizeInBytes() -> l
    java.lang.String toString() -> toString
    void trim() -> d
    com.googlecode.javaewah.EWAHCompressedBitmap xor(com.googlecode.javaewah.EWAHCompressedBitmap) -> d
    void xorToContainer(com.googlecode.javaewah.EWAHCompressedBitmap,com.googlecode.javaewah.BitmapStorage) -> a
    java.lang.Object clone() -> clone
com.googlecode.javaewah.EWAHCompressedBitmap$1 -> a.a.a.d:
    com.googlecode.javaewah.IntIteratorImpl under$56e17e03$33121e2c -> a
    com.googlecode.javaewah.EWAHCompressedBitmap this$0 -> b
    void <init>(com.googlecode.javaewah.EWAHCompressedBitmap) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.googlecode.javaewah.EWAHIterator -> a.a.a.e:
    int pointer -> b
    com.googlecode.javaewah.RunningLengthWord rlw -> a
    int size -> c
    void <init>(com.googlecode.javaewah.LongArray) -> <init>
    void <init>(int,com.googlecode.javaewah.RunningLengthWord,int) -> <init>
    int literalWords() -> a
    boolean hasNext() -> b
    com.googlecode.javaewah.RunningLengthWord next() -> c
    com.googlecode.javaewah.EWAHIterator clone() -> d
    java.lang.Object clone() -> clone
com.googlecode.javaewah.IntIteratorImpl -> a.a.a.f:
    com.googlecode.javaewah.EWAHIterator ewahIter -> a
    com.googlecode.javaewah.BitmapStorage buffer$ceb0d36 -> b
    int position -> c
    int runningLength -> d
    long word -> e
    int wordPosition -> f
    int wordLength -> g
    int literalPosition -> h
    boolean hasNext -> i
    void <init>(com.googlecode.javaewah.EWAHIterator) -> <init>
    boolean moveToNext() -> i
    boolean hasNext() -> g
    int next() -> h
    void setRunningLengthWord(com.googlecode.javaewah.RunningLengthWord) -> a
    boolean runningHasNext() -> j
    boolean literalHasNext() -> k
com.googlecode.javaewah.IteratingBufferedRunningLengthWord -> a.a.a.g:
    com.googlecode.javaewah.BufferedRunningLengthWord brlw -> a
    com.googlecode.javaewah.BitmapStorage buffer$ceb0d36 -> b
    int literalWordStartPosition -> c
    com.googlecode.javaewah.EWAHIterator iterator -> d
    void <init>(com.googlecode.javaewah.EWAHIterator) -> <init>
    void discardFirstWords(long) -> a
    void discardLiteralWords(long) -> b
    void discardRunningWords() -> a
    boolean next() -> f
    long discharge(com.googlecode.javaewah.BitmapStorage,long) -> a
    long dischargeNegated(com.googlecode.javaewah.BitmapStorage,long) -> b
    void discharge(com.googlecode.javaewah.BitmapStorage) -> a
    long getLiteralWordAt(int) -> a
    int getNumberOfLiteralWords() -> b
    boolean getRunningBit() -> c
    long getRunningLength() -> d
    long size() -> e
    void writeLiteralWords(int,com.googlecode.javaewah.BitmapStorage) -> a
    java.lang.Object clone() -> clone
com.googlecode.javaewah.LongArray -> a.a.a.h:
    int actualSizeInWords -> a
    long[] buffer -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    int sizeInWords() -> b
    void ensureCapacity(int) -> b
    long getWord(int) -> c
    long getLastWord() -> c
    void clear() -> a
    void trim() -> d
    void setWord(int,long) -> a
    void push_back(long) -> b
    void push_back$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> c
    void negative_push_back$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> d
    void removeLastWord() -> e
    void andWord(int,long) -> b
    void orWord(int,long) -> c
    void andLastWord(long) -> c
    void orLastWord(long) -> d
    void expand(int,int) -> a
    void collapse(int,int) -> b
    com.googlecode.javaewah.LongArray clone() -> i
    void resizeBuffer(int) -> d
    int newSizeInWords(int) -> e
    java.lang.Object clone() -> clone
    com.googlecode.javaewah.LongArray clone$3e9131c9() -> f
com.googlecode.javaewah.NonEmptyVirtualStorage -> a.a.a.i:
    com.googlecode.javaewah.NonEmptyVirtualStorage$NonEmptyException nonEmptyException -> a
    void <init>() -> <init>
    void addWord(long) -> a
    void addStreamOfLiteralWords$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> a
    void addStreamOfEmptyWords(boolean,long) -> a
    void addStreamOfNegatedLiteralWords$6bf0d4cb(com.googlecode.javaewah.BitmapStorage,int,int) -> b
    void clear() -> a
    void setSizeInBitsWithinLastWord(int) -> a
    void <clinit>() -> <clinit>
com.googlecode.javaewah.NonEmptyVirtualStorage$NonEmptyException -> a.a.a.j:
    void <init>() -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.googlecode.javaewah.RunningLengthWord -> a.a.a.k:
    com.googlecode.javaewah.BitmapStorage buffer$ceb0d36 -> a
    int position -> b
    void <init>(com.googlecode.javaewah.LongArray,int) -> <init>
    int getNumberOfLiteralWords() -> a
    int getNumberOfLiteralWords$7718452b(com.googlecode.javaewah.BitmapStorage,int) -> a
    boolean getRunningBit() -> b
    boolean getRunningBit$7718453c(com.googlecode.javaewah.BitmapStorage,int) -> b
    long getRunningLength() -> c
    long getRunningLength$7718452c(com.googlecode.javaewah.BitmapStorage,int) -> c
    void setNumberOfLiteralWords(long) -> a
    void setNumberOfLiteralWords$6bf0d88c(com.googlecode.javaewah.BitmapStorage,int,long) -> a
    void setRunningBit(boolean) -> a
    void setRunningBit$6bf1149c(com.googlecode.javaewah.BitmapStorage,int,boolean) -> a
    void setRunningLength(long) -> b
    void setRunningLength$6bf0d88c(com.googlecode.javaewah.BitmapStorage,int,long) -> b
    long size() -> d
    java.lang.String toString() -> toString
    com.googlecode.javaewah.RunningLengthWord clone() -> e
    java.lang.Object clone() -> clone
org.apache.commons.codec.digest.MurmurHash3 -> org.a.a.a.a.a:
    int hash32x86(byte[],int,int,int) -> a
org.eclipse.jgit.api.AddCommand -> org.eclipse.jgit.api.a:
    java.util.ArrayList filepatterns$7865b31 -> b
    org.eclipse.jgit.treewalk.FileTreeIterator workingTreeIterator$402f89e2 -> c
    boolean renormalize -> d
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.api.AddCommand addFilepattern(java.lang.String) -> a
    org.eclipse.jgit.dircache.DirCache call() -> a
    java.lang.Object call() -> call
org.eclipse.jgit.api.CheckoutCommand -> org.eclipse.jgit.api.b:
    java.lang.String name -> b
    boolean createBranch -> c
    org.eclipse.jgit.api.CheckoutResult status -> d
    java.util.ArrayList paths$7865b31 -> e
    java.util.HashSet actuallyModifiedPaths$5a95723b -> f
    org.eclipse.jgit.lib.NullProgressMonitor monitor$375bef60 -> g
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result -> h
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.lib.Ref call() -> a
    org.eclipse.jgit.api.CheckoutCommand checkoutPaths() -> f
    void checkoutPath(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.dircache.Checkout,java.lang.String,org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata) -> a
    org.eclipse.jgit.api.CheckoutCommand setName(java.lang.String) -> a
    org.eclipse.jgit.api.CheckoutCommand setCreateBranch$6e53ed56() -> b
    java.lang.Object call() -> call
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result() -> g
org.eclipse.jgit.api.CheckoutCommand$1 -> org.eclipse.jgit.api.c:
    org.eclipse.jgit.api.CheckoutCommand this$0 -> c
    org.eclipse.jgit.lib.ObjectReader val$r -> d
    org.eclipse.jgit.dircache.Checkout val$checkout -> e
    java.lang.String val$path -> f
    org.eclipse.jgit.lib.CoreConfig$EolStreamType val$eolStreamType -> g
    java.lang.String val$filterCommand -> h
    void <init>(org.eclipse.jgit.api.CheckoutCommand,java.lang.String,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.dircache.Checkout,java.lang.String,org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String) -> <init>
    void apply(org.eclipse.jgit.dircache.DirCacheEntry) -> a
org.eclipse.jgit.api.CheckoutResult -> org.eclipse.jgit.api.d:
    org.eclipse.jgit.api.CheckoutResult ERROR_RESULT -> a
    void <clinit>() -> <clinit>
    void <init>(int,byte) -> <init>
    void <init>(int) -> <init>
    void <init>() -> <init>
org.eclipse.jgit.api.CheckoutResult$Status -> org.eclipse.jgit.api.e:
    int NOT_TRIED$20996305 -> a
    int OK$20996305 -> b
    int CONFLICTS$20996305 -> c
    int NONDELETED$20996305 -> d
    int ERROR$20996305 -> e
    void <clinit>() -> <clinit>
org.eclipse.jgit.api.CommitCommand -> org.eclipse.jgit.api.f:
    org.slf4j.Logger log -> b
    org.eclipse.jgit.lib.PersonIdent author -> c
    org.eclipse.jgit.lib.PersonIdent committer -> d
    java.lang.String message -> e
    java.util.ArrayList only$7865b31 -> f
    boolean[] onlyProcessed -> g
    java.util.List parents -> h
    java.lang.String reflogComment -> i
    boolean useDefaultReflogMessage -> j
    java.util.HashMap hookOutRedirect -> k
    java.util.HashMap hookErrRedirect -> l
    java.lang.Boolean allowEmpty -> m
    java.lang.Boolean signCommit -> n
    java.lang.String signingKey -> o
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData signer$42bdf9e1$685ab4d1 -> p
    org.eclipse.jgit.lib.GpgConfig gpgConfig -> q
    org.eclipse.jgit.lib.CommitConfig$CleanupMode cleanupMode -> r
    boolean cleanDefaultIsStrip -> s
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result -> t
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.revwalk.RevCommit call() -> a
    org.eclipse.jgit.dircache.DirCache createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk) -> a
    boolean isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState) -> a
    org.eclipse.jgit.api.CommitCommand setMessage(java.lang.String) -> a
    org.eclipse.jgit.api.CommitCommand setInsertChangeId$428be565() -> b
    org.eclipse.jgit.api.CommitCommand setReflogComment(java.lang.String) -> b
    java.lang.Object call() -> call
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result() -> f
org.eclipse.jgit.api.CreateBranchCommand -> org.eclipse.jgit.api.g:
    java.lang.String name -> b
    java.lang.String startPoint -> c
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result -> d
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.lib.Ref call() -> a
    java.lang.String getStartPointOrHead() -> f
    org.eclipse.jgit.api.CreateBranchCommand setName(java.lang.String) -> a
    org.eclipse.jgit.api.CreateBranchCommand setStartPoint$57bd72de() -> b
    java.lang.Object call() -> call
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result() -> g
org.eclipse.jgit.api.CreateBranchCommand$SetupUpstreamMode -> org.eclipse.jgit.api.h:
    int TRACK$2d8b4dec -> a
    int NOTRACK$2d8b4dec -> b
    int SET_UPSTREAM$2d8b4dec -> c
    void <clinit>() -> <clinit>
org.eclipse.jgit.api.DeleteBranchCommand -> org.eclipse.jgit.api.i:
    java.util.HashSet branchNames$5a95723b -> b
    org.eclipse.jgit.lib.NullProgressMonitor monitor$375bef60 -> c
    boolean force -> d
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result -> e
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    java.util.ArrayList call$5679c1ce() -> a
    org.eclipse.jgit.api.DeleteBranchCommand setBranchNames(java.lang.String[]) -> a
    org.eclipse.jgit.api.DeleteBranchCommand setForce$117f406f() -> b
    java.lang.Object call() -> call
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result() -> f
org.eclipse.jgit.api.Git -> org.eclipse.jgit.api.Git:
    org.eclipse.jgit.lib.Repository repo -> a
    boolean closeRepo -> b
    void close() -> close
    org.eclipse.jgit.api.InitCommand init() -> init
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,boolean) -> <init>
    org.eclipse.jgit.api.CommitCommand commit() -> commit
    org.eclipse.jgit.api.MergeCommand merge() -> merge
    org.eclipse.jgit.api.CreateBranchCommand branchCreate() -> a
    org.eclipse.jgit.api.DeleteBranchCommand branchDelete() -> branchDelete
    org.eclipse.jgit.api.RenameBranchCommand branchRename() -> branchRename
    org.eclipse.jgit.api.AddCommand add() -> add
    org.eclipse.jgit.api.RmCommand rm() -> rm
    org.eclipse.jgit.api.CheckoutCommand checkout() -> checkout
    java.lang.String toString() -> toString
org.eclipse.jgit.api.GitCommand -> org.eclipse.jgit.api.j:
    org.eclipse.jgit.lib.Repository repo -> a
    java.util.concurrent.atomic.AtomicBoolean callable -> b
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.lib.Repository getRepository() -> c
    void setCallable$1385ff() -> d
    void checkCallable() -> e
org.eclipse.jgit.api.InitCommand -> org.eclipse.jgit.api.k:
    java.io.File directory -> a
    java.io.File gitDir -> b
    void <init>() -> <init>
    org.eclipse.jgit.api.Git call() -> a
    org.eclipse.jgit.api.InitCommand setDirectory(java.io.File) -> a
    java.lang.Object call() -> call
org.eclipse.jgit.api.MergeCommand -> org.eclipse.jgit.api.MergeCommand:
    org.eclipse.jgit.merge.StrategyRecursive mergeStrategy$67b88dd1$2790b600 -> b
    java.util.ArrayList commits$7865b31 -> c
    java.lang.Boolean squash -> d
    org.eclipse.jgit.api.MergeCommand$FastForwardMode fastForwardMode -> e
    java.lang.String message -> f
    org.eclipse.jgit.lib.NullProgressMonitor monitor$375bef60 -> g
    java.lang.Boolean commit -> h
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result -> i
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.api.MergeResult call() -> a
    org.eclipse.jgit.api.MergeCommand include(org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.api.MergeCommand setMessage(java.lang.String) -> a
    java.lang.Object call() -> call
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result() -> b
org.eclipse.jgit.api.MergeCommand$FastForwardMode -> org.eclipse.jgit.api.MergeCommand$FastForwardMode:
    org.eclipse.jgit.api.MergeCommand$FastForwardMode FF -> a
    org.eclipse.jgit.api.MergeCommand$FastForwardMode NO_FF -> b
    org.eclipse.jgit.api.MergeCommand$FastForwardMode FF_ONLY -> c
    int[] $SWITCH_TABLE$org$eclipse$jgit$api$MergeCommand$FastForwardMode$Merge -> d
    org.eclipse.jgit.api.MergeCommand$FastForwardMode[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    boolean matchConfigValue(java.lang.String) -> a
    org.eclipse.jgit.api.MergeCommand$FastForwardMode valueOf(org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge) -> a
    org.eclipse.jgit.api.MergeCommand$FastForwardMode[] values() -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$api$MergeCommand$FastForwardMode$Merge() -> b
org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge -> org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge:
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge TRUE -> TRUE
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge FALSE -> FALSE
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge ONLY -> ONLY
    int[] $SWITCH_TABLE$org$eclipse$jgit$api$MergeCommand$FastForwardMode -> $SWITCH_TABLE$org$eclipse$jgit$api$MergeCommand$FastForwardMode
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge valueOf(org.eclipse.jgit.api.MergeCommand$FastForwardMode) -> valueOf
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge[] values() -> values
    org.eclipse.jgit.api.MergeCommand$FastForwardMode$Merge valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$org$eclipse$jgit$api$MergeCommand$FastForwardMode() -> $SWITCH_TABLE$org$eclipse$jgit$api$MergeCommand$FastForwardMode
org.eclipse.jgit.api.MergeResult -> org.eclipse.jgit.api.l:
    org.eclipse.jgit.lib.ObjectId[] mergedCommits -> a
    org.eclipse.jgit.lib.ObjectId base -> b
    java.util.HashMap conflicts$5a983bf5 -> c
    org.eclipse.jgit.api.MergeResult$MergeStatus mergeStatus -> d
    java.lang.String description -> e
    org.eclipse.jgit.merge.StrategyRecursive mergeStrategy$67b88dd1$2790b600 -> f
    void <init>(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.api.MergeResult$MergeStatus,org.eclipse.jgit.merge.StrategyRecursive,java.util.HashMap,java.lang.String,byte) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.api.MergeResult$MergeStatus,org.eclipse.jgit.merge.StrategyRecursive,java.util.HashMap,java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus -> org.eclipse.jgit.api.m:
    org.eclipse.jgit.api.MergeResult$MergeStatus$1 FAST_FORWARD$22ddf91d -> a
    org.eclipse.jgit.api.MergeResult$MergeStatus$2 FAST_FORWARD_SQUASHED$22ddf91d -> b
    org.eclipse.jgit.api.MergeResult$MergeStatus$3 ALREADY_UP_TO_DATE$22ddf91d -> c
    org.eclipse.jgit.api.MergeResult$MergeStatus$4 FAILED$22ddf91d -> d
    org.eclipse.jgit.api.MergeResult$MergeStatus$5 MERGED$22ddf91d -> e
    org.eclipse.jgit.api.MergeResult$MergeStatus$6 MERGED_SQUASHED$22ddf91d -> f
    org.eclipse.jgit.api.MergeResult$MergeStatus$7 MERGED_SQUASHED_NOT_COMMITTED$22ddf91d -> g
    org.eclipse.jgit.api.MergeResult$MergeStatus$8 CONFLICTING$22ddf91d -> h
    org.eclipse.jgit.api.MergeResult$MergeStatus$9 ABORTED$22ddf91d -> i
    org.eclipse.jgit.api.MergeResult$MergeStatus$10 MERGED_NOT_COMMITTED$22ddf91d -> j
    org.eclipse.jgit.api.MergeResult$MergeStatus$11 NOT_SUPPORTED$22ddf91d -> k
    org.eclipse.jgit.api.MergeResult$MergeStatus$12 CHECKOUT_CONFLICT$22ddf91d -> l
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
org.eclipse.jgit.api.MergeResult$MergeStatus$1 -> org.eclipse.jgit.api.n:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$10 -> org.eclipse.jgit.api.o:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$11 -> org.eclipse.jgit.api.p:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$12 -> org.eclipse.jgit.api.q:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$2 -> org.eclipse.jgit.api.r:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$3 -> org.eclipse.jgit.api.s:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$4 -> org.eclipse.jgit.api.t:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$5 -> org.eclipse.jgit.api.u:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$6 -> org.eclipse.jgit.api.v:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$7 -> org.eclipse.jgit.api.w:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$8 -> org.eclipse.jgit.api.x:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.MergeResult$MergeStatus$9 -> org.eclipse.jgit.api.y:
    void <init>(java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.api.PackRefsCommand -> org.eclipse.jgit.api.z:
    org.eclipse.jgit.lib.ProgressMonitor monitor -> b
    boolean all -> c
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    org.eclipse.jgit.api.PackRefsCommand setProgressMonitor(org.eclipse.jgit.lib.ProgressMonitor) -> a
    org.eclipse.jgit.api.PackRefsCommand setAll$346921a3() -> a
    boolean isAll() -> b
    java.lang.String call() -> f
    java.lang.Object call() -> call
org.eclipse.jgit.api.RenameBranchCommand -> org.eclipse.jgit.api.A:
    java.lang.String newName -> b
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.lib.Ref call() -> a
    org.eclipse.jgit.api.RenameBranchCommand setNewName(java.lang.String) -> a
    java.lang.Object call() -> call
org.eclipse.jgit.api.RmCommand -> org.eclipse.jgit.api.B:
    java.util.ArrayList filepatterns$5036ee31 -> b
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.api.RmCommand addFilepattern(java.lang.String) -> a
    org.eclipse.jgit.dircache.DirCache call() -> a
    java.lang.Object call() -> call
org.eclipse.jgit.api.errors.CanceledException -> org.eclipse.jgit.api.a.a:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.ConcurrentRefUpdateException -> org.eclipse.jgit.api.a.b:
    void <init>(java.lang.String,org.eclipse.jgit.lib.RefUpdate$Result) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.errors.CheckoutConflictException) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
org.eclipse.jgit.api.errors.DetachedHeadException -> org.eclipse.jgit.api.a.c:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.EmptyCommitException -> org.eclipse.jgit.api.a.d:
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.errors.UnmergedPathException) -> <init>
org.eclipse.jgit.api.errors.FilterFailedException -> org.eclipse.jgit.api.a.e:
    void <init>(java.lang.Exception,java.lang.String,java.lang.String) -> <init>
    void <init>(int,java.lang.String,java.lang.String,java.lang.String) -> <init>
org.eclipse.jgit.api.errors.GitAPIException -> org.eclipse.jgit.api.a.f:
    void <init>(java.lang.String,java.lang.Exception) -> <init>
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.InvalidMergeHeadsException -> org.eclipse.jgit.api.a.g:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.InvalidRefNameException -> org.eclipse.jgit.api.a.h:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.JGitInternalException -> org.eclipse.jgit.api.a.i:
    void <init>(java.lang.String,java.lang.Exception) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void <init>(java.io.IOException) -> <init>
org.eclipse.jgit.api.errors.NoFilepatternException -> org.eclipse.jgit.api.a.j:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.NoHeadException -> org.eclipse.jgit.api.a.k:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.NoMessageException -> org.eclipse.jgit.api.a.l:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.RefAlreadyExistsException -> org.eclipse.jgit.api.a.m:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,byte) -> <init>
org.eclipse.jgit.api.errors.RefNotFoundException -> org.eclipse.jgit.api.a.n:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.UnsupportedSigningFormatException -> org.eclipse.jgit.api.a.o:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.api.errors.WrongRepositoryStateException -> org.eclipse.jgit.api.a.p:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.attributes.Attribute -> org.eclipse.jgit.a.a:
    java.lang.String key -> a
    org.eclipse.jgit.attributes.Attribute$State state -> b
    java.lang.String value -> c
    int[] $SWITCH_TABLE$org$eclipse$jgit$attributes$Attribute$State -> d
    void <init>(java.lang.String,org.eclipse.jgit.attributes.Attribute$State) -> <init>
    void <init>(java.lang.String,org.eclipse.jgit.attributes.Attribute$State,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    java.lang.String getKey() -> a
    org.eclipse.jgit.attributes.Attribute$State getState() -> b
    java.lang.String getValue() -> c
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$org$eclipse$jgit$attributes$Attribute$State() -> d
org.eclipse.jgit.attributes.Attribute$State -> org.eclipse.jgit.a.b:
    org.eclipse.jgit.attributes.Attribute$State SET -> a
    org.eclipse.jgit.attributes.Attribute$State UNSET -> b
    org.eclipse.jgit.attributes.Attribute$State UNSPECIFIED -> c
    org.eclipse.jgit.attributes.Attribute$State CUSTOM -> d
    org.eclipse.jgit.attributes.Attribute$State[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.attributes.Attribute$State[] values() -> a
org.eclipse.jgit.attributes.Attributes -> org.eclipse.jgit.a.c:
    java.util.LinkedHashMap map$5a983bf5 -> a
    void <init>() -> <init>
    org.eclipse.jgit.attributes.Attribute get(java.lang.String) -> a
    java.util.ArrayList getAll$6d99338e() -> a
    void put(org.eclipse.jgit.attributes.Attribute) -> a
    void remove(java.lang.String) -> b
    boolean containsKey(java.lang.String) -> c
    org.eclipse.jgit.attributes.Attribute$State getState(java.lang.String) -> g
    boolean isSet(java.lang.String) -> d
    boolean isUnset(java.lang.String) -> e
    java.lang.String getValue(java.lang.String) -> f
    boolean canBeContentMerged() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.eclipse.jgit.attributes.AttributesHandler -> org.eclipse.jgit.a.d:
    java.util.List BINARY_RULE_ATTRIBUTES -> a
    org.eclipse.jgit.treewalk.TreeWalk treeWalk -> b
    java.util.function.Supplier attributesTree -> c
    org.eclipse.jgit.hooks.Hooks globalNode$7da53a12 -> d
    org.eclipse.jgit.hooks.Hooks infoNode$7da53a12 -> e
    java.util.HashMap expansions$5a983bf5 -> f
    int[] $SWITCH_TABLE$org$eclipse$jgit$attributes$Attribute$State -> g
    int[] $SWITCH_TABLE$org$eclipse$jgit$treewalk$TreeWalk$OperationType -> h
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.treewalk.TreeWalk,java.util.function.Supplier) -> <init>
    org.eclipse.jgit.attributes.Attributes getAttributes() -> a
    void mergeAttributes$3df1bca9(org.eclipse.jgit.hooks.Hooks,java.lang.String,boolean,org.eclipse.jgit.attributes.Attributes) -> a
    void expandMacro(org.eclipse.jgit.attributes.Attribute,org.eclipse.jgit.attributes.Attributes) -> a
    org.eclipse.jgit.hooks.Hooks attributesNode$7a69f207(org.eclipse.jgit.treewalk.TreeWalk,org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
    org.eclipse.jgit.treewalk.AbstractTreeIterator parentOf(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> a
    org.eclipse.jgit.treewalk.AbstractTreeIterator rootOf(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> b
    int[] $SWITCH_TABLE$org$eclipse$jgit$attributes$Attribute$State() -> b
    int[] $SWITCH_TABLE$org$eclipse$jgit$treewalk$TreeWalk$OperationType() -> c
org.eclipse.jgit.attributes.AttributesNodeProvider -> org.eclipse.jgit.a.e:
    org.eclipse.jgit.hooks.Hooks getInfoAttributesNode$3c128193() -> a
    org.eclipse.jgit.hooks.Hooks getGlobalAttributesNode$3c128193() -> b
org.eclipse.jgit.attributes.AttributesRule -> org.eclipse.jgit.a.f:
    java.lang.String pattern -> a
    java.util.ArrayList attributes$7865b31 -> b
    boolean dirOnly -> c
    org.eclipse.jgit.ignore.IMatcher matcher -> d
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.util.List getAttributes() -> a
    java.lang.String getPattern() -> b
    boolean isMatch(java.lang.String,boolean) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.attributes.FilterCommand -> org.eclipse.jgit.a.g:
    void <init>() -> <init>
    int size() -> a
org.eclipse.jgit.attributes.FilterCommandRegistry -> org.eclipse.jgit.a.h:
    java.util.concurrent.ConcurrentHashMap filterCommandRegistry$5a983bf5 -> a
    void <clinit>() -> <clinit>
    boolean isRegistered(java.lang.String) -> a
    java.util.Set getRegisteredFilterCommands() -> a
    org.eclipse.jgit.attributes.FilterCommand createFilterCommand$31f1a08d(java.lang.String) -> b
org.eclipse.jgit.diff.ContentSource -> org.eclipse.jgit.b.a:
    void <init>() -> <init>
    long size$28a5cd9e(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader open$46bce7eb(org.eclipse.jgit.lib.ObjectId) -> b
org.eclipse.jgit.diff.ContentSource$ObjectReaderSource -> org.eclipse.jgit.b.b:
    org.eclipse.jgit.internal.storage.file.WindowCursor reader$63005ce7 -> a
    void <init>(org.eclipse.jgit.internal.storage.file.WindowCursor) -> <init>
    long size$28a5cd9e(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader open$46bce7eb(org.eclipse.jgit.lib.ObjectId) -> b
org.eclipse.jgit.diff.ContentSource$Pair -> org.eclipse.jgit.b.c:
    org.eclipse.jgit.diff.ContentSource$ObjectReaderSource oldSource$582d41a9 -> a
    org.eclipse.jgit.diff.ContentSource$ObjectReaderSource newSource$582d41a9 -> b
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$Side -> c
    void <init>(org.eclipse.jgit.diff.ContentSource$ObjectReaderSource,org.eclipse.jgit.diff.ContentSource$ObjectReaderSource) -> <init>
    long size(org.eclipse.jgit.diff.DiffEntry$Side,org.eclipse.jgit.diff.DiffEntry) -> a
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.diff.DiffEntry$Side,org.eclipse.jgit.diff.DiffEntry) -> b
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$Side() -> a
org.eclipse.jgit.diff.DiffAlgorithm -> org.eclipse.jgit.b.d:
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffAlgorithm$SupportedAlgorithm -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$Edit$Type -> b
    void <init>() -> <init>
    org.eclipse.jgit.diff.LowLevelDiffAlgorithm getAlgorithm$56434c90(org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm) -> a
    org.eclipse.jgit.diff.EditList diff$2d06660$2314a8f0$69e0c310(org.eclipse.jgit.diff.RawTextComparator$1,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText) -> a
    org.eclipse.jgit.diff.EditList diffNonCommon$2d06660(org.eclipse.jgit.diff.SubsequenceComparator,org.eclipse.jgit.diff.Subsequence,org.eclipse.jgit.diff.Subsequence) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffAlgorithm$SupportedAlgorithm() -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$Edit$Type() -> b
org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm -> org.eclipse.jgit.b.e:
    org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm MYERS -> a
    org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm HISTOGRAM -> b
    org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm[] ENUM$VALUES -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm[] values() -> a
org.eclipse.jgit.diff.DiffConfig -> org.eclipse.jgit.b.f:
    int renameLimit -> a
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    int getRenameLimit() -> a
org.eclipse.jgit.diff.DiffConfig$RenameDetectionType -> org.eclipse.jgit.b.g:
    org.eclipse.jgit.diff.DiffConfig$RenameDetectionType FALSE -> a
    org.eclipse.jgit.diff.DiffConfig$RenameDetectionType TRUE -> b
    org.eclipse.jgit.diff.DiffConfig$RenameDetectionType COPY -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
org.eclipse.jgit.diff.DiffEntry -> org.eclipse.jgit.b.h:
    org.eclipse.jgit.lib.AbbreviatedObjectId A_ZERO -> i
    java.lang.String oldPath -> a
    java.lang.String newPath -> b
    org.eclipse.jgit.attributes.Attribute diffAttribute -> j
    org.eclipse.jgit.lib.FileMode oldMode -> c
    org.eclipse.jgit.lib.FileMode newMode -> d
    org.eclipse.jgit.diff.DiffEntry$ChangeType changeType -> e
    int score -> f
    org.eclipse.jgit.lib.AbbreviatedObjectId oldId -> g
    org.eclipse.jgit.lib.AbbreviatedObjectId newId -> h
    int treeFilterMarks -> k
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$ChangeType -> l
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.util.ArrayList scan$7d7dbc5e(org.eclipse.jgit.treewalk.TreeWalk) -> a
    java.util.List breakModify(org.eclipse.jgit.diff.DiffEntry) -> a
    org.eclipse.jgit.diff.DiffEntry pair(org.eclipse.jgit.diff.DiffEntry$ChangeType,org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry,int) -> a
    java.lang.String getOldPath() -> a
    java.lang.String getNewPath() -> b
    org.eclipse.jgit.lib.FileMode getOldMode() -> c
    org.eclipse.jgit.lib.FileMode getNewMode() -> d
    org.eclipse.jgit.diff.DiffEntry$ChangeType getChangeType() -> e
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$ChangeType() -> f
org.eclipse.jgit.diff.DiffEntry$ChangeType -> org.eclipse.jgit.b.i:
    org.eclipse.jgit.diff.DiffEntry$ChangeType ADD -> a
    org.eclipse.jgit.diff.DiffEntry$ChangeType MODIFY -> b
    org.eclipse.jgit.diff.DiffEntry$ChangeType DELETE -> c
    org.eclipse.jgit.diff.DiffEntry$ChangeType RENAME -> d
    org.eclipse.jgit.diff.DiffEntry$ChangeType COPY -> e
    org.eclipse.jgit.diff.DiffEntry$ChangeType[] ENUM$VALUES -> f
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.diff.DiffEntry$ChangeType[] values() -> a
org.eclipse.jgit.diff.DiffEntry$Side -> org.eclipse.jgit.b.j:
    org.eclipse.jgit.diff.DiffEntry$Side OLD -> a
    org.eclipse.jgit.diff.DiffEntry$Side NEW -> b
    org.eclipse.jgit.diff.DiffEntry$Side[] ENUM$VALUES -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.diff.DiffEntry$Side[] values() -> a
org.eclipse.jgit.diff.Edit -> org.eclipse.jgit.b.k:
    int beginA -> a
    int endA -> b
    int beginB -> c
    int endB -> d
    void <init>(int,int) -> <init>
    void <init>(int,int,int,int) -> <init>
    org.eclipse.jgit.diff.Edit$Type getType() -> a
    boolean isEmpty() -> b
    int getBeginA() -> c
    int getEndA() -> d
    int getBeginB() -> e
    int getEndB() -> f
    int getLengthA() -> g
    int getLengthB() -> h
    void shift$13462e() -> i
    org.eclipse.jgit.diff.Edit before(org.eclipse.jgit.diff.Edit) -> a
    org.eclipse.jgit.diff.Edit after(org.eclipse.jgit.diff.Edit) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.eclipse.jgit.diff.Edit$Type -> org.eclipse.jgit.b.l:
    org.eclipse.jgit.diff.Edit$Type INSERT -> a
    org.eclipse.jgit.diff.Edit$Type DELETE -> b
    org.eclipse.jgit.diff.Edit$Type REPLACE -> c
    org.eclipse.jgit.diff.Edit$Type EMPTY -> d
    org.eclipse.jgit.diff.Edit$Type[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.diff.Edit$Type[] values() -> a
org.eclipse.jgit.diff.EditList -> org.eclipse.jgit.b.m:
    org.eclipse.jgit.diff.EditList singleton(org.eclipse.jgit.diff.Edit) -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.diff.HashedSequence -> org.eclipse.jgit.b.n:
    org.eclipse.jgit.attributes.FilterCommand base$4aaee78 -> a
    int[] hashes -> b
    void <init>(org.eclipse.jgit.diff.Subsequence,int[]) -> <init>
    int size() -> a
org.eclipse.jgit.diff.HashedSequenceComparator -> org.eclipse.jgit.b.o:
    org.eclipse.jgit.diff.SubsequenceComparator cmp$1b83fc02 -> a
    void <init>(org.eclipse.jgit.diff.SubsequenceComparator) -> <init>
    boolean equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int) -> a
    int hash$595ec4a9(org.eclipse.jgit.attributes.FilterCommand,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.HashedSequencePair -> org.eclipse.jgit.b.p:
    org.eclipse.jgit.diff.SubsequenceComparator cmp$1b83fc02 -> a
    org.eclipse.jgit.diff.Subsequence baseA$4aaee78$2b9d56c8 -> b
    org.eclipse.jgit.diff.Subsequence baseB$4aaee78$2b9d56c8 -> c
    org.eclipse.jgit.diff.HashedSequence cachedA -> d
    org.eclipse.jgit.diff.HashedSequence cachedB -> e
    void <init>(org.eclipse.jgit.diff.SubsequenceComparator,org.eclipse.jgit.diff.Subsequence,org.eclipse.jgit.diff.Subsequence) -> <init>
    org.eclipse.jgit.diff.HashedSequenceComparator getComparator() -> a
    org.eclipse.jgit.diff.HashedSequence getA() -> b
    org.eclipse.jgit.diff.HashedSequence getB() -> c
    org.eclipse.jgit.diff.HashedSequence wrap$18ff2714$7f73685c(org.eclipse.jgit.diff.Subsequence) -> a
org.eclipse.jgit.diff.HistogramDiff -> org.eclipse.jgit.b.q:
    org.eclipse.jgit.diff.MyersDiff$1 fallback$4542cc73 -> a
    int maxChainLength -> b
    void <init>() -> <init>
    void diffNonCommon(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit) -> a
org.eclipse.jgit.diff.HistogramDiff$State -> org.eclipse.jgit.b.r:
    org.eclipse.jgit.diff.HashedSequenceComparator cmp -> a
    org.eclipse.jgit.diff.HashedSequence a -> b
    org.eclipse.jgit.diff.HashedSequence b -> c
    java.util.ArrayList queue$7865b31 -> d
    org.eclipse.jgit.diff.EditList edits -> e
    org.eclipse.jgit.diff.HistogramDiff this$0 -> f
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$Edit$Type -> g
    void <init>(org.eclipse.jgit.diff.HistogramDiff,org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence) -> <init>
    void diffRegion(org.eclipse.jgit.diff.Edit) -> a
    void diffReplace(org.eclipse.jgit.diff.Edit) -> b
    org.eclipse.jgit.diff.SubsequenceComparator subcmp() -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$Edit$Type() -> b
org.eclipse.jgit.diff.HistogramDiffIndex -> org.eclipse.jgit.b.s:
    int maxChainLength -> a
    org.eclipse.jgit.diff.HashedSequenceComparator cmp -> b
    org.eclipse.jgit.diff.HashedSequence a -> c
    org.eclipse.jgit.diff.HashedSequence b -> d
    org.eclipse.jgit.diff.Edit region -> e
    int[] table -> f
    int keyShift -> g
    long[] recs -> h
    int recCnt -> i
    int[] next -> j
    int[] recIdx -> k
    int ptrShift -> l
    org.eclipse.jgit.diff.Edit lcs -> m
    int cnt -> n
    boolean hasCommon -> o
    void <init>(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit) -> <init>
    org.eclipse.jgit.diff.Edit findLongestCommonSequence() -> a
    int hash(org.eclipse.jgit.diff.HashedSequence,int) -> a
    long recCreate(int,int,int) -> a
    int recPtr(long) -> a
org.eclipse.jgit.diff.LowLevelDiffAlgorithm -> org.eclipse.jgit.b.t:
    void <init>() -> <init>
    org.eclipse.jgit.diff.EditList diffNonCommon$2d06660(org.eclipse.jgit.diff.SubsequenceComparator,org.eclipse.jgit.diff.Subsequence,org.eclipse.jgit.diff.Subsequence) -> a
    void diffNonCommon(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit) -> a
org.eclipse.jgit.diff.MyersDiff -> org.eclipse.jgit.b.u:
    org.eclipse.jgit.diff.MyersDiff$1 INSTANCE$4542cc73 -> a
    org.eclipse.jgit.diff.EditList edits -> e
    org.eclipse.jgit.diff.HashedSequenceComparator cmp -> b
    org.eclipse.jgit.diff.HashedSequence a -> c
    org.eclipse.jgit.diff.HashedSequence b -> d
    org.eclipse.jgit.diff.MyersDiff$MiddleEdit middle -> f
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit) -> <init>
    void calculateEdits(int,int,int,int) -> a
org.eclipse.jgit.diff.MyersDiff$1 -> org.eclipse.jgit.b.v:
    void <init>() -> <init>
    void diffNonCommon(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit) -> a
org.eclipse.jgit.diff.MyersDiff$MiddleEdit -> org.eclipse.jgit.b.w:
    org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths forward$4e5e7015 -> a
    org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths backward$4e5e7015 -> b
    int beginA -> c
    int endA -> d
    int beginB -> e
    int endB -> f
    org.eclipse.jgit.diff.Edit edit -> g
    org.eclipse.jgit.diff.MyersDiff this$0 -> h
    void <init>(org.eclipse.jgit.diff.MyersDiff) -> <init>
    void initialize(int,int,int,int) -> a
    org.eclipse.jgit.diff.Edit calculate(int,int,int,int) -> b
org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths -> org.eclipse.jgit.b.x:
    org.eclipse.jgit.diff.MyersDiff$MiddleEdit this$1 -> f
    void <init>(org.eclipse.jgit.diff.MyersDiff$MiddleEdit) -> <init>
    int snake(int,int) -> a
    int getLeft(int) -> a
    int getRight(int) -> b
    boolean isBetter(int,int) -> b
    void adjustMinMaxK(int,int) -> c
    boolean meets(int,int,int,long) -> a
org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths -> org.eclipse.jgit.b.y:
    org.eclipse.jgit.util.IntList x -> f
    org.eclipse.jgit.util.LongList snake -> g
    int beginK -> a
    int endK -> b
    int middleK -> c
    int prevBeginK -> h
    int prevEndK -> i
    int minK -> d
    int maxK -> e
    org.eclipse.jgit.diff.MyersDiff$MiddleEdit this$1 -> j
    void <init>(org.eclipse.jgit.diff.MyersDiff$MiddleEdit) -> <init>
    int getIndex(int,int) -> f
    int getX(int,int) -> d
    long getSnake(int,int) -> e
    int forceKIntoRange(int) -> d
    void initialize(int,int,int,int) -> a
    int snake(int,int) -> a
    int getLeft(int) -> a
    int getRight(int) -> b
    boolean isBetter(int,int) -> b
    void adjustMinMaxK(int,int) -> c
    boolean meets(int,int,int,long) -> a
    long newSnake(int,int) -> g
    boolean makeEdit(long,long) -> a
    boolean calculate(int) -> c
org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths -> org.eclipse.jgit.b.z:
    org.eclipse.jgit.diff.MyersDiff$MiddleEdit this$1 -> f
    void <init>(org.eclipse.jgit.diff.MyersDiff$MiddleEdit) -> <init>
    int snake(int,int) -> a
    int getLeft(int) -> a
    int getRight(int) -> b
    boolean isBetter(int,int) -> b
    void adjustMinMaxK(int,int) -> c
    boolean meets(int,int,int,long) -> a
org.eclipse.jgit.diff.RawText -> org.eclipse.jgit.b.A:
    org.eclipse.jgit.diff.RawText EMPTY_TEXT -> a
    java.util.concurrent.atomic.AtomicInteger BUFFER_SIZE -> d
    byte[] content -> b
    org.eclipse.jgit.util.IntList lines -> c
    void <clinit>() -> <clinit>
    void <init>(byte[]) -> <init>
    void <init>(byte[],org.eclipse.jgit.util.IntList) -> <init>
    int size() -> a
    void writeLine$3bdc843c(org.eclipse.jgit.merge.EolAwareOutputStream,int) -> a
    boolean isMissingNewlineAtEnd() -> b
    int getBufferSize() -> c
    boolean isBinary(java.io.InputStream) -> a
    boolean isBinary(byte[],int,boolean) -> a
    boolean isBinary(byte,byte) -> a
    boolean isCrLfText$71225a42(org.eclipse.jgit.lib.ObjectStream) -> a
    boolean isCrLfText(byte[],int,boolean) -> b
    org.eclipse.jgit.diff.RawText load$37ba5239(org.eclipse.jgit.lib.ObjectLoader) -> a
org.eclipse.jgit.diff.RawTextComparator -> org.eclipse.jgit.b.B:
    org.eclipse.jgit.diff.RawTextComparator$1 DEFAULT$24859952 -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int findForwardLine(org.eclipse.jgit.util.IntList,int,int) -> a
    int findReverseLine(org.eclipse.jgit.util.IntList,int,int) -> b
    int hashRegion(byte[],int,int) -> a
    org.eclipse.jgit.diff.Edit reduceCommonStartEnd$6e949cf1$5d99131f(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit) -> a
    int hash$595ec4a9(org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.RawTextComparator$1 -> org.eclipse.jgit.b.C:
    void <init>() -> <init>
    int hashRegion(byte[],int,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.RawTextComparator$2 -> org.eclipse.jgit.b.D:
    void <init>() -> <init>
    int hashRegion(byte[],int,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.RawTextComparator$3 -> org.eclipse.jgit.b.E:
    void <init>() -> <init>
    int hashRegion(byte[],int,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.RawTextComparator$4 -> org.eclipse.jgit.b.F:
    void <init>() -> <init>
    int hashRegion(byte[],int,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.RawTextComparator$5 -> org.eclipse.jgit.b.G:
    void <init>() -> <init>
    int hashRegion(byte[],int,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.diff.RenameDetector -> org.eclipse.jgit.b.H:
    org.eclipse.jgit.diff.RenameDetector$1 DIFF_COMPARATOR$3706e907 -> a
    java.util.ArrayList entries$7865b31 -> b
    java.util.List deleted -> c
    java.util.List added -> d
    boolean done -> e
    org.eclipse.jgit.internal.storage.file.WindowCursor objectReader$63005ce7 -> f
    int renameScore -> g
    int breakScore -> h
    int renameLimit -> i
    int bigFileThreshold -> j
    boolean overRenameLimit -> k
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$ChangeType -> l
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.diff.DiffConfig) -> <init>
    void addAll$3a3fcc9a$61fb9e66(java.util.ArrayList) -> a
    java.util.List compute() -> a
    java.util.List compute$160c98d2(org.eclipse.jgit.lib.NullProgressMonitor) -> a
    void advanceOrCancel$36dbab2b(org.eclipse.jgit.lib.NullProgressMonitor) -> b
    int calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry) -> a
    org.eclipse.jgit.diff.DiffEntry bestPathMatch(org.eclipse.jgit.diff.DiffEntry,java.util.List) -> a
    java.util.HashMap populateMap$59ff5ae9(java.util.List,org.eclipse.jgit.lib.NullProgressMonitor) -> a
    java.lang.String path(org.eclipse.jgit.diff.DiffEntry) -> a
    org.eclipse.jgit.lib.FileMode mode(org.eclipse.jgit.diff.DiffEntry) -> b
    org.eclipse.jgit.lib.AbbreviatedObjectId id(org.eclipse.jgit.diff.DiffEntry) -> c
    boolean sameType(org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.FileMode) -> a
    org.eclipse.jgit.diff.DiffEntry exactRename(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$ChangeType() -> b
org.eclipse.jgit.diff.RenameDetector$1 -> org.eclipse.jgit.b.I:
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$ChangeType -> a
    void <init>() -> <init>
    java.lang.String nameOf(org.eclipse.jgit.diff.DiffEntry) -> a
    int sortOf(org.eclipse.jgit.diff.DiffEntry$ChangeType) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
    int[] $SWITCH_TABLE$org$eclipse$jgit$diff$DiffEntry$ChangeType() -> a
org.eclipse.jgit.diff.SequenceComparator -> org.eclipse.jgit.b.J:
    void <init>() -> <init>
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
    int hash$595ec4a9(org.eclipse.jgit.attributes.FilterCommand,int) -> a
    org.eclipse.jgit.diff.Edit reduceCommonStartEnd$6e949cf1$5d99131f(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit) -> a
org.eclipse.jgit.diff.SimilarityIndex -> org.eclipse.jgit.b.K:
    org.eclipse.jgit.diff.SimilarityIndex$TableFullException TABLE_FULL_OUT_OF_MEMORY -> a
    long hashedCnt -> b
    int idSize -> c
    int idGrowAt -> d
    long[] idHash -> e
    int idHashBits -> f
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean isBinary(org.eclipse.jgit.lib.ObjectLoader) -> b
    void hash(org.eclipse.jgit.lib.ObjectLoader) -> a
    void sort() -> a
    int score(org.eclipse.jgit.diff.SimilarityIndex,int) -> a
    int packedIndex$134621() -> b
    void add(int,int) -> a
    long pair(int,long) -> a
    int slot(int) -> a
    int growAt(int) -> b
    void grow() -> c
org.eclipse.jgit.diff.SimilarityIndex$TableFullException -> org.eclipse.jgit.b.L:
    void <init>() -> <init>
org.eclipse.jgit.diff.SimilarityRenameDetector -> org.eclipse.jgit.b.M:
    org.eclipse.jgit.diff.ContentSource$Pair reader -> a
    java.util.List srcs -> b
    java.util.List dsts -> c
    long[] matrix -> d
    int renameScore -> e
    int bigFileThreshold -> f
    boolean tableOverflow -> g
    java.util.ArrayList out$7865b31 -> h
    void <init>(org.eclipse.jgit.diff.ContentSource$Pair,java.util.List,java.util.List) -> <init>
    void setRenameScore(int) -> a
    void setBigFileThreshold(int) -> b
    void compute$36dbab2b(org.eclipse.jgit.lib.NullProgressMonitor) -> a
    java.util.ArrayList getMatches$5679c1ce() -> a
    java.util.List getLeftOverSources() -> b
    java.util.List getLeftOverDestinations() -> c
    boolean isTableOverflow() -> d
    int buildMatrix$36dbab38(org.eclipse.jgit.lib.NullProgressMonitor) -> b
    int nameScore(java.lang.String,java.lang.String) -> a
    org.eclipse.jgit.diff.SimilarityIndex hash(org.eclipse.jgit.lib.ObjectLoader) -> a
    long size(org.eclipse.jgit.diff.DiffEntry$Side,org.eclipse.jgit.diff.DiffEntry) -> a
    int srcFile(long) -> a
    int dstFile(long) -> b
    long encode(int,int,int) -> a
    boolean isFile(org.eclipse.jgit.lib.FileMode) -> a
org.eclipse.jgit.diff.Subsequence -> org.eclipse.jgit.b.N:
    org.eclipse.jgit.attributes.FilterCommand base$4aaee78 -> a
    int begin -> b
    int size -> c
    org.eclipse.jgit.diff.Subsequence a$5a3ddd9e(org.eclipse.jgit.attributes.FilterCommand,org.eclipse.jgit.diff.Edit) -> a
    org.eclipse.jgit.diff.Subsequence b$5a3ddd9e(org.eclipse.jgit.attributes.FilterCommand,org.eclipse.jgit.diff.Edit) -> b
    org.eclipse.jgit.diff.EditList toBase(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.Subsequence,org.eclipse.jgit.diff.Subsequence) -> a
    void <init>(org.eclipse.jgit.attributes.FilterCommand,int,int) -> <init>
    int size() -> a
org.eclipse.jgit.diff.SubsequenceComparator -> org.eclipse.jgit.b.O:
    org.eclipse.jgit.diff.SequenceComparator cmp -> a
    void <init>(org.eclipse.jgit.diff.SequenceComparator) -> <init>
    int hash$595ec4a9(org.eclipse.jgit.attributes.FilterCommand,int) -> a
    boolean equals$40c57867(org.eclipse.jgit.attributes.FilterCommand,int,org.eclipse.jgit.attributes.FilterCommand,int) -> a
org.eclipse.jgit.dircache.BaseDirCacheEditor -> org.eclipse.jgit.c.a:
    org.eclipse.jgit.dircache.DirCache cache -> a
    org.eclipse.jgit.dircache.DirCacheEntry[] entries -> b
    int entryCnt -> c
    void <init>(org.eclipse.jgit.dircache.DirCache,int) -> <init>
    org.eclipse.jgit.dircache.DirCache getDirCache() -> a
    void fastAdd(org.eclipse.jgit.dircache.DirCacheEntry) -> a
    void fastKeep(int,int) -> a
    void finish() -> b
    void replace() -> c
    boolean commit() -> d
org.eclipse.jgit.dircache.Checkout -> org.eclipse.jgit.c.b:
    org.eclipse.jgit.lib.FileModeCache cache -> a
    org.eclipse.jgit.treewalk.WorkingTreeOptions options -> b
    boolean recursiveDelete -> c
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.treewalk.WorkingTreeOptions) -> <init>
    org.eclipse.jgit.dircache.Checkout setRecursiveDeletion$56e34da6() -> a
    void safeCreateParentDirectory$25ed085e(java.lang.String,java.io.File) -> a
    void checkoutGitlink(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String) -> a
    void checkout(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata,org.eclipse.jgit.lib.ObjectReader,java.lang.String) -> a
org.eclipse.jgit.dircache.DirCache -> org.eclipse.jgit.c.c:
    byte[] SIG_DIRC -> b
    org.eclipse.jgit.dircache.DirCacheEntry[] NO_ENTRIES -> c
    byte[] NO_CHECKSUM -> d
    java.util.Comparator ENT_CMP -> a
    java.io.File liveFile -> e
    org.eclipse.jgit.dircache.DirCacheEntry[] sortedEntries -> f
    int entryCnt -> g
    org.eclipse.jgit.dircache.DirCacheTree tree -> h
    org.eclipse.jgit.internal.storage.file.LockFile myLock -> i
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> j
    byte[] readIndexChecksum -> k
    byte[] writeIndexChecksum -> l
    org.eclipse.jgit.events.IndexChangedListener indexChangedListener -> m
    org.eclipse.jgit.lib.Repository repository -> n
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion version -> o
    boolean skipHash -> p
    int[] $SWITCH_TABLE$org$eclipse$jgit$dircache$DirCache$DirCacheVersion -> q
    void <clinit>() -> <clinit>
    int cmp(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry) -> a
    int cmp(byte[],int,org.eclipse.jgit.dircache.DirCacheEntry) -> a
    int cmp(byte[],int,byte[],int) -> a
    org.eclipse.jgit.dircache.DirCache newInCore() -> a
    org.eclipse.jgit.dircache.DirCache read$7280d2e9$3128d5e7(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.revwalk.RevTree) -> a
    org.eclipse.jgit.dircache.DirCache read(org.eclipse.jgit.lib.Repository) -> a
    org.eclipse.jgit.dircache.DirCache lock$104a9495(java.io.File) -> a
    org.eclipse.jgit.dircache.DirCache lock(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.events.IndexChangedListener) -> a
    void <init>(java.io.File) -> <init>
    org.eclipse.jgit.dircache.DirCacheBuilder builder() -> b
    org.eclipse.jgit.dircache.DirCacheEditor editor() -> c
    void replace(org.eclipse.jgit.dircache.DirCacheEntry[],int) -> a
    void read() -> j
    void clear() -> k
    void readFrom$71225a3e(org.eclipse.jgit.util.io.SilentFileInputStream) -> a
    void skipOptionalExtension$a7b86fd(java.io.BufferedInputStream,java.security.MessageDigest,byte[],long) -> a
    java.lang.String formatExtensionName(byte[]) -> a
    boolean is_DIRC(byte[]) -> b
    void write() -> d
    void readConfig() -> l
    java.security.MessageDigest newMessageDigest() -> m
    boolean commit() -> e
    void requireLocked(org.eclipse.jgit.internal.storage.file.LockFile) -> a
    void unlock() -> f
    int findEntry(java.lang.String) -> a
    int findEntry(int,byte[],int) -> a
    int nextEntry(int) -> a
    int nextEntry(byte[],int,int) -> a
    int getEntryCount() -> g
    org.eclipse.jgit.dircache.DirCacheEntry getEntry(int) -> b
    org.eclipse.jgit.dircache.DirCacheEntry getEntry(java.lang.String) -> b
    void toArray(int,org.eclipse.jgit.dircache.DirCacheEntry[],int,int) -> a
    org.eclipse.jgit.dircache.DirCacheTree getCacheTree$181d128d() -> h
    org.eclipse.jgit.lib.ObjectId writeTree(org.eclipse.jgit.lib.ObjectInserter) -> a
    boolean hasUnmergedPaths() -> i
    int[] $SWITCH_TABLE$org$eclipse$jgit$dircache$DirCache$DirCacheVersion() -> n
    int lambda$0(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry) -> b
org.eclipse.jgit.dircache.DirCache$DirCacheConfig -> org.eclipse.jgit.c.d:
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion indexVersion -> a
    boolean skipHash -> b
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion getIndexVersion() -> a
    boolean isSkipHash() -> b
org.eclipse.jgit.dircache.DirCache$DirCacheVersion -> org.eclipse.jgit.c.e:
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion DIRC_VERSION_MINIMUM -> a
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion DIRC_VERSION_EXTENDED -> b
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion DIRC_VERSION_PATHCOMPRESS -> c
    int version -> d
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,int) -> <init>
    int getVersionCode() -> a
    boolean matchConfigValue(java.lang.String) -> a
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion fromInt(int) -> a
    org.eclipse.jgit.dircache.DirCache$DirCacheVersion[] values() -> b
org.eclipse.jgit.dircache.DirCacheBuildIterator -> org.eclipse.jgit.c.f:
    org.eclipse.jgit.dircache.DirCacheBuilder builder -> m
    void <init>(org.eclipse.jgit.dircache.DirCacheBuilder) -> <init>
    void <init>(org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.dircache.DirCacheTree) -> <init>
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> a
    void skip() -> a
    void stopWalk() -> b
    boolean needsStopWalk() -> c
org.eclipse.jgit.dircache.DirCacheBuilder -> org.eclipse.jgit.c.g:
    boolean sorted -> d
    void <init>(org.eclipse.jgit.dircache.DirCache,int) -> <init>
    void add(org.eclipse.jgit.dircache.DirCacheEntry) -> b
    void keep(int,int) -> b
    void addTree$5e2da21$76d77c4f(byte[],int,org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.ObjectId) -> a
    boolean isTree(org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
    org.eclipse.jgit.treewalk.CanonicalTreeParser enterTree$24ff8e7a(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    org.eclipse.jgit.dircache.DirCacheEntry toEntry(int,org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
    void finish() -> b
    void beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry) -> c
    java.lang.IllegalStateException bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String) -> a
    boolean commit() -> d
    org.eclipse.jgit.dircache.DirCache getDirCache() -> a
org.eclipse.jgit.dircache.DirCacheCheckout -> org.eclipse.jgit.c.h:
    org.slf4j.Logger LOG -> a
    org.eclipse.jgit.lib.Repository repo -> b
    java.util.LinkedHashMap updated$5a983bf5 -> c
    java.util.ArrayList conflicts -> d
    java.util.ArrayList removed -> e
    java.util.ArrayList kept -> f
    org.eclipse.jgit.lib.ObjectId mergeCommitTree -> g
    org.eclipse.jgit.dircache.DirCache dc -> h
    org.eclipse.jgit.dircache.DirCacheBuilder builder -> i
    org.eclipse.jgit.treewalk.NameConflictTreeWalk walk -> j
    org.eclipse.jgit.revwalk.RevTree headCommitTree$2424ecf1 -> k
    org.eclipse.jgit.treewalk.FileTreeIterator workingTree$402f89e2 -> l
    boolean failOnConflict -> m
    java.util.ArrayList toBeDeleted -> n
    boolean initialCheckout -> o
    boolean performingCheckout -> p
    org.eclipse.jgit.dircache.Checkout checkout -> q
    org.eclipse.jgit.lib.NullProgressMonitor monitor$375bef60 -> r
    void <clinit>() -> <clinit>
    java.util.LinkedHashMap getUpdated$604efcea() -> a
    java.util.ArrayList getConflicts$5679c1ce() -> b
    java.util.ArrayList getToBeDeleted$5679c1ce() -> c
    java.util.ArrayList getRemoved$5679c1ce() -> d
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.FileTreeIterator) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevTree) -> <init>
    void setProgressMonitor$36dbab2b(org.eclipse.jgit.lib.NullProgressMonitor) -> a
    int addTree$5cc6db93(org.eclipse.jgit.treewalk.NameConflictTreeWalk,org.eclipse.jgit.lib.ObjectId) -> a
    boolean checkout() -> e
    boolean doCheckout() -> g
    void removeEmptyParents(java.io.File) -> a
    boolean equalIdAndMode(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode) -> a
    void conflict$3aa7225(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
    void keep$4a6d076d(org.eclipse.jgit.dircache.DirCacheEntry) -> a
    void remove(java.lang.String) -> a
    void update(org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
    void update(int,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode) -> a
    void setFailOnConflict$1385ff() -> f
    boolean isModifiedSubtree_IndexWorkingtree(java.lang.String) -> b
    boolean isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId) -> a
    boolean isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId) -> a
    void getContent$62c99a2c(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata,org.eclipse.jgit.lib.ObjectLoader,org.eclipse.jgit.treewalk.WorkingTreeOptions,java.io.FileOutputStream) -> a
    void getContent$b1137b5(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata,org.eclipse.jgit.dircache.DirCacheCheckout$StreamSupplier,org.eclipse.jgit.treewalk.WorkingTreeOptions,java.io.FileOutputStream) -> a
    void runExternalFilterCommand(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata,org.eclipse.jgit.dircache.DirCacheCheckout$StreamSupplier,java.io.OutputStream) -> a
    void runBuiltinFilterCommand(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata,org.eclipse.jgit.dircache.DirCacheCheckout$StreamSupplier,java.io.OutputStream) -> a
    void checkValidPath(org.eclipse.jgit.treewalk.CanonicalTreeParser) -> b
    void checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata -> org.eclipse.jgit.c.i:
    org.eclipse.jgit.lib.CoreConfig$EolStreamType eolStreamType -> a
    java.lang.String smudgeFilterCommand -> b
    org.eclipse.jgit.dircache.DirCacheCheckout$CheckoutMetadata EMPTY -> c
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String) -> <init>
org.eclipse.jgit.dircache.DirCacheCheckout$StreamSupplier -> org.eclipse.jgit.c.j:
    java.io.InputStream load() -> load
org.eclipse.jgit.dircache.DirCacheEditor -> org.eclipse.jgit.c.k:
    java.util.Comparator EDIT_CMP -> d
    java.util.ArrayList edits$7865b31 -> e
    int editIdx -> f
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.dircache.DirCache,int) -> <init>
    void add$613f5141(org.eclipse.jgit.api.CheckoutCommand$1) -> a
    boolean commit() -> d
    void finish() -> b
    boolean inDir(org.eclipse.jgit.dircache.DirCacheEntry,byte[],int) -> a
    int pdir(byte[],int) -> a
    org.eclipse.jgit.dircache.DirCache getDirCache() -> a
    int lambda$0(org.eclipse.jgit.dircache.DirCacheEditor$PathEdit,org.eclipse.jgit.dircache.DirCacheEditor$PathEdit) -> a
org.eclipse.jgit.dircache.DirCacheEditor$DeletePath -> org.eclipse.jgit.c.l:
    void apply(org.eclipse.jgit.dircache.DirCacheEntry) -> a
org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree -> org.eclipse.jgit.c.m:
    void <init>(byte[]) -> <init>
    void apply(org.eclipse.jgit.dircache.DirCacheEntry) -> a
org.eclipse.jgit.dircache.DirCacheEditor$PathEdit -> org.eclipse.jgit.c.n:
    byte[] path -> a
    boolean replace -> b
    void <init>(java.lang.String) -> <init>
    void <init>(byte[]) -> <init>
    void apply(org.eclipse.jgit.dircache.DirCacheEntry) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.dircache.DirCacheEntry -> org.eclipse.jgit.c.o:
    byte[] nullpad -> b
    byte[] info -> c
    int infoOffset -> d
    byte[] path -> a
    void <clinit>() -> <clinit>
    void <init>(byte[],org.eclipse.jgit.util.MutableInteger,java.io.BufferedInputStream,java.security.MessageDigest,java.time.Instant,org.eclipse.jgit.dircache.DirCache$DirCacheVersion,org.eclipse.jgit.dircache.DirCacheEntry) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(byte[]) -> <init>
    void <init>(byte[],int) -> <init>
    int readNulTerminatedString$72bf0a5d$916f80(java.io.BufferedInputStream,java.io.ByteArrayOutputStream) -> a
    void write$2c6e03ee(java.security.DigestOutputStream,org.eclipse.jgit.dircache.DirCache$DirCacheVersion,org.eclipse.jgit.dircache.DirCacheEntry) -> a
    boolean mightBeRacilyClean(java.time.Instant) -> a
    void smudgeRacilyClean() -> a
    boolean isSmudged() -> b
    byte[] idBuffer() -> c
    int idOffset() -> d
    boolean isAssumeValid() -> e
    int getStage() -> f
    int getRawMode() -> g
    org.eclipse.jgit.lib.FileMode getFileMode() -> h
    void setFileMode(org.eclipse.jgit.lib.FileMode) -> a
    void setFileMode(int) -> a
    java.time.Instant getLastModifiedInstant() -> i
    void setLastModified(java.time.Instant) -> b
    int getLength() -> j
    void setLength(int) -> b
    void setLength(long) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId() -> k
    void setObjectId$36eb52dc(org.eclipse.jgit.lib.ObjectId) -> a
    void setObjectIdFromRaw(byte[],int) -> a
    java.lang.String getPathString() -> l
    byte[] getRawPath() -> m
    java.lang.String toString() -> toString
    void copyMetaData$7f0c63e1(org.eclipse.jgit.dircache.DirCacheEntry) -> a
    boolean isExtended() -> n
    int getExtendedFlags() -> o
    void checkPath(byte[]) -> b
    java.lang.String toString(byte[]) -> a
    int getMaximumInfoLength(boolean) -> a
org.eclipse.jgit.dircache.DirCacheIterator -> org.eclipse.jgit.c.p:
    byte[] DOT_GIT_ATTRIBUTES_BYTES -> m
    org.eclipse.jgit.dircache.DirCache cache -> a
    org.eclipse.jgit.dircache.DirCacheTree tree -> n
    int treeStart -> o
    int treeEnd -> p
    byte[] subtreeId -> q
    int ptr -> b
    int nextSubtreePos -> r
    org.eclipse.jgit.dircache.DirCacheEntry currentEntry -> s
    org.eclipse.jgit.dircache.DirCacheTree currentSubtree -> c
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.dircache.DirCache) -> <init>
    void <init>(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree) -> <init>
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> a
    org.eclipse.jgit.treewalk.EmptyTreeIterator createEmptyTreeIterator() -> d
    boolean hasId() -> e
    byte[] idBuffer() -> f
    int idOffset() -> g
    boolean first() -> h
    boolean eof() -> i
    void next(int) -> a
    void back(int) -> b
    void parseEntry(boolean) -> a
    org.eclipse.jgit.dircache.DirCacheEntry getDirCacheEntry() -> j
    org.eclipse.jgit.hooks.Hooks getEntryAttributesNode$231fbf5c(org.eclipse.jgit.lib.ObjectReader) -> b
org.eclipse.jgit.dircache.DirCacheIterator$LazyLoadingAttributesNode -> org.eclipse.jgit.c.q:
    org.eclipse.jgit.lib.ObjectId objectId -> a
    void <init>(org.eclipse.jgit.lib.ObjectId) -> <init>
    org.eclipse.jgit.hooks.Hooks load$231fbf5c(org.eclipse.jgit.lib.ObjectReader) -> a
org.eclipse.jgit.dircache.DirCacheTree -> org.eclipse.jgit.c.r:
    byte[] NO_NAME -> b
    org.eclipse.jgit.dircache.DirCacheTree[] NO_CHILDREN -> c
    java.util.Comparator TREE_CMP -> d
    byte[] encodedName -> a
    int entrySpan -> e
    org.eclipse.jgit.lib.ObjectId id -> f
    org.eclipse.jgit.dircache.DirCacheTree[] children -> g
    int childCnt -> h
    boolean $assertionsDisabled -> i
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(byte[],int,int) -> <init>
    void <init>(byte[],org.eclipse.jgit.util.MutableInteger) -> <init>
    void write(byte[],java.io.OutputStream) -> a
    boolean isValid() -> a
    int getEntrySpan() -> b
    int getChildCount() -> c
    org.eclipse.jgit.dircache.DirCacheTree getChild(int) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId() -> d
    org.eclipse.jgit.lib.ObjectId writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter) -> a
    int computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter) -> b
    boolean contains(byte[],int,int) -> a
    void validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int) -> a
    void removeChild(int) -> b
    boolean peq(byte[],byte[],int) -> a
    java.lang.String toString() -> toString
    int lambda$0(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree) -> a
org.eclipse.jgit.dircache.InvalidPathException -> org.eclipse.jgit.c.s:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
org.eclipse.jgit.errors.BinaryBlobException -> org.eclipse.jgit.d.a:
    void <init>() -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
org.eclipse.jgit.errors.CheckoutConflictException -> org.eclipse.jgit.d.b:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String[]) -> <init>
    java.lang.String buildList(java.lang.String[]) -> a
org.eclipse.jgit.errors.CommandFailedException -> org.eclipse.jgit.d.c:
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
org.eclipse.jgit.errors.ConfigInvalidException -> org.eclipse.jgit.d.d:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
org.eclipse.jgit.errors.CorruptObjectException -> org.eclipse.jgit.d.e:
    void <init>(org.eclipse.jgit.lib.ObjectChecker$ErrorType,org.eclipse.jgit.lib.AnyObjectId,java.lang.String) -> <init>
    void <init>(org.eclipse.jgit.lib.AnyObjectId,java.lang.String) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectId,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.zip.DataFormatException) -> <init>
org.eclipse.jgit.errors.DirCacheNameConflictException -> org.eclipse.jgit.d.f:
    void <init>(java.lang.String,java.lang.String) -> <init>
org.eclipse.jgit.errors.IllegalTodoFileModification -> org.eclipse.jgit.d.g:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.IncorrectObjectTypeException -> org.eclipse.jgit.d.h:
    void <init>(org.eclipse.jgit.lib.ObjectId,java.lang.String) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectId,int) -> <init>
org.eclipse.jgit.errors.IndexReadException -> org.eclipse.jgit.d.i:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.InvalidObjectIdException -> org.eclipse.jgit.d.j:
    void <init>(byte[],int,int) -> <init>
    void <init>(java.lang.String) -> <init>
    java.lang.String msg(byte[],int,int) -> a
org.eclipse.jgit.errors.InvalidPatternException -> org.eclipse.jgit.d.k:
    java.lang.String pattern -> a
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.regex.PatternSyntaxException) -> <init>
    java.lang.String getPattern() -> a
org.eclipse.jgit.errors.LargeObjectException -> org.eclipse.jgit.d.l:
    org.eclipse.jgit.lib.ObjectId objectId -> a
    void <init>() -> <init>
    void <init>(java.io.IOException) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectId) -> <init>
    java.lang.String getObjectName() -> a
    void setObjectId(org.eclipse.jgit.lib.AnyObjectId) -> a
    java.lang.String getMessage() -> getMessage
org.eclipse.jgit.errors.LargeObjectException$ExceedsByteArrayLimit -> org.eclipse.jgit.d.m:
    void <init>() -> <init>
    java.lang.String getMessage() -> getMessage
org.eclipse.jgit.errors.LargeObjectException$ExceedsLimit -> org.eclipse.jgit.d.n:
    long limit -> a
    long size -> b
    void <init>(long,long) -> <init>
    java.lang.String getMessage() -> getMessage
org.eclipse.jgit.errors.LargeObjectException$OutOfMemory -> org.eclipse.jgit.d.o:
    void <init>(java.lang.OutOfMemoryError) -> <init>
    java.lang.String getMessage() -> getMessage
org.eclipse.jgit.errors.LockFailedException -> org.eclipse.jgit.d.p:
    void <init>(java.lang.String) -> <init>
    void <init>(java.io.File) -> <init>
org.eclipse.jgit.errors.MissingObjectException -> org.eclipse.jgit.d.q:
    org.eclipse.jgit.lib.ObjectId missing -> a
    void <init>(org.eclipse.jgit.lib.ObjectId,java.lang.String) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectId,int) -> <init>
    org.eclipse.jgit.lib.ObjectId getObjectId() -> a
org.eclipse.jgit.errors.NoMergeBaseException -> org.eclipse.jgit.d.r:
    void <init>(org.eclipse.jgit.errors.NoMergeBaseException$MergeBaseFailureReason,java.lang.String) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.lib.AbbreviatedObjectId) -> <init>
org.eclipse.jgit.errors.NoMergeBaseException$MergeBaseFailureReason -> org.eclipse.jgit.d.s:
    org.eclipse.jgit.errors.NoMergeBaseException$MergeBaseFailureReason MULTIPLE_MERGE_BASES_NOT_SUPPORTED -> a
    org.eclipse.jgit.errors.NoMergeBaseException$MergeBaseFailureReason TOO_MANY_MERGE_BASES -> b
    org.eclipse.jgit.errors.NoMergeBaseException$MergeBaseFailureReason CONFLICTS_DURING_MERGE_BASE_CALCULATION -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
org.eclipse.jgit.errors.NoPackSignatureException -> org.eclipse.jgit.d.t:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.NoWorkTreeException -> org.eclipse.jgit.d.u:
    void <init>() -> <init>
org.eclipse.jgit.errors.PackInvalidException -> org.eclipse.jgit.d.v:
    void <init>(org.eclipse.jgit.internal.storage.file.PackFile,java.lang.Exception) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
org.eclipse.jgit.errors.PackMismatchException -> org.eclipse.jgit.d.w:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.RepositoryNotFoundException -> org.eclipse.jgit.d.x:
    void <init>(java.io.File) -> <init>
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.RevisionSyntaxException -> org.eclipse.jgit.d.y:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.SearchForReuseTimeout -> org.eclipse.jgit.d.z:
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
org.eclipse.jgit.errors.StopWalkException -> org.eclipse.jgit.d.A:
    org.eclipse.jgit.errors.StopWalkException INSTANCE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
org.eclipse.jgit.errors.StoredObjectRepresentationNotAvailableException -> org.eclipse.jgit.d.B:
    void <init>(java.io.IOException) -> <init>
org.eclipse.jgit.errors.TranslationBundleException -> org.eclipse.jgit.d.C:
    void <init>(java.lang.String,java.util.MissingResourceException) -> <init>
org.eclipse.jgit.errors.TranslationBundleLoadingException -> org.eclipse.jgit.d.D:
    void <init>(java.lang.Class,java.util.Locale,java.util.MissingResourceException) -> <init>
org.eclipse.jgit.errors.TranslationStringMissingException -> org.eclipse.jgit.d.E:
    void <init>(java.lang.Class,java.util.Locale,java.lang.String,java.util.MissingResourceException) -> <init>
org.eclipse.jgit.errors.TransportException -> org.eclipse.jgit.d.F:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.errors.UnmergedPathException -> org.eclipse.jgit.d.G:
    void <init>(org.eclipse.jgit.dircache.DirCacheEntry) -> <init>
org.eclipse.jgit.errors.UnpackException -> org.eclipse.jgit.d.H:
org.eclipse.jgit.errors.UnsupportedPackIndexVersionException -> org.eclipse.jgit.d.I:
    void <init>(int) -> <init>
org.eclipse.jgit.errors.UnsupportedPackVersionException -> org.eclipse.jgit.d.J:
    void <init>(long) -> <init>
org.eclipse.jgit.events.ConfigChangedEvent -> org.eclipse.jgit.e.a:
    void <init>() -> <init>
    java.lang.Class getListenerType() -> a
    void dispatch$7e780304(org.eclipse.jgit.events.ConfigChangedListener) -> a
org.eclipse.jgit.events.ConfigChangedListener -> org.eclipse.jgit.e.b:
    void onConfigChanged(org.eclipse.jgit.events.ConfigChangedEvent) -> onConfigChanged
org.eclipse.jgit.events.IndexChangedEvent -> org.eclipse.jgit.e.c:
    void <init>() -> <init>
    java.lang.Class getListenerType() -> a
    void dispatch$7e780304(org.eclipse.jgit.events.ConfigChangedListener) -> a
org.eclipse.jgit.events.IndexChangedListener -> org.eclipse.jgit.e.d:
    void onIndexChanged(org.eclipse.jgit.events.IndexChangedEvent) -> onIndexChanged
org.eclipse.jgit.events.ListenerHandle -> org.eclipse.jgit.e.e:
    java.lang.Class type -> a
    org.eclipse.jgit.events.ConfigChangedListener listener$542464b1 -> b
    void <init>(java.lang.Class,org.eclipse.jgit.events.ConfigChangedListener) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.events.ListenerList -> org.eclipse.jgit.e.f:
    java.util.concurrent.ConcurrentHashMap lists$5a983bf5 -> a
    void <init>() -> <init>
    org.eclipse.jgit.events.ListenerHandle addConfigChangedListener(org.eclipse.jgit.events.ConfigChangedListener) -> a
    void dispatch(org.eclipse.jgit.events.RepositoryEvent) -> a
org.eclipse.jgit.events.RefsChangedEvent -> org.eclipse.jgit.e.g:
    void <init>() -> <init>
    java.lang.Class getListenerType() -> a
    void dispatch$7e780304(org.eclipse.jgit.events.ConfigChangedListener) -> a
org.eclipse.jgit.events.RefsChangedListener -> org.eclipse.jgit.e.h:
org.eclipse.jgit.events.RepositoryEvent -> org.eclipse.jgit.e.i:
    org.eclipse.jgit.lib.Repository repository -> a
    void <init>() -> <init>
    void setRepository(org.eclipse.jgit.lib.Repository) -> a
    java.lang.Class getListenerType() -> a
    void dispatch$7e780304(org.eclipse.jgit.events.ConfigChangedListener) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.events.WorkingTreeModifiedEvent -> org.eclipse.jgit.e.j:
    java.util.Collection modified -> a
    java.util.ArrayList deleted$5036ee31$7865b31 -> b
    void <init>(java.util.AbstractCollection,java.util.ArrayList) -> <init>
    boolean isEmpty() -> b
    java.lang.Class getListenerType() -> a
    void dispatch$7e780304(org.eclipse.jgit.events.ConfigChangedListener) -> a
org.eclipse.jgit.events.WorkingTreeModifiedListener -> org.eclipse.jgit.e.k:
org.eclipse.jgit.hooks.CommitMsgHook -> org.eclipse.jgit.f.a:
    java.lang.String commitMessage -> a
    void <init>(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> <init>
    java.lang.String call() -> a
    java.lang.String getHookName() -> b
    java.lang.String[] getParameters() -> c
    java.lang.String getCommitEditMessageFilePath() -> f
    org.eclipse.jgit.hooks.CommitMsgHook setCommitMessage(java.lang.String) -> a
    java.lang.Object call() -> call
org.eclipse.jgit.hooks.GitHook -> org.eclipse.jgit.f.b:
    org.eclipse.jgit.lib.Repository repo -> a
    java.io.PrintStream outputStream$33c83ab2 -> b
    java.io.PrintStream errorStream$33c83ab2 -> c
    void <init>(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> <init>
    java.lang.String getHookName() -> b
    org.eclipse.jgit.lib.Repository getRepository() -> d
    java.lang.String[] getParameters() -> c
    void doRun() -> e
    void handleError(java.lang.String,org.eclipse.jgit.util.ProcessResult) -> a
org.eclipse.jgit.hooks.Hooks -> org.eclipse.jgit.f.c:
    java.util.List rules -> a
    org.eclipse.jgit.hooks.PreCommitHook preCommit(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> a
    org.eclipse.jgit.hooks.PostCommitHook postCommit(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> b
    org.eclipse.jgit.hooks.CommitMsgHook commitMsg(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> c
    void <init>() -> <init>
    void <init>(java.util.List) -> <init>
    void parse(java.io.InputStream) -> a
    java.util.List getRules() -> a
    java.util.ArrayList find$67268e80(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit) -> a
    byte[] readSome$21cc789a(java.io.File) -> a
    byte[] readFully(java.io.File,int) -> a
    void readFully(java.io.InputStream,byte[],int,int) -> a
    void readFully$4df4c87b(java.security.DigestInputStream,byte[]) -> a
    int readFully$70a3d3ef(java.io.InputStream,byte[]) -> a
    void skipFully$4cd69bba(java.io.BufferedInputStream,long) -> a
    int compareUInt32(int,int) -> a
    int decodeUInt16(byte[],int) -> a
    int decodeUInt24(byte[],int) -> b
    int decodeInt32(byte[],int) -> c
    long decodeInt64(byte[],int) -> d
    long decodeUInt32(byte[],int) -> e
    long decodeUInt64(byte[],int) -> f
    void encodeInt16(byte[],int,int) -> a
    void encodeInt32(byte[],int,int) -> b
    void encodeInt64(byte[],int,long) -> a
    int compare(byte[],int,int,int,byte[],int,int,int) -> a
    int compareSameName(byte[],int,int,byte[],int,int,int) -> a
    int coreCompare(byte[],int,int,int,byte[],int,int,int) -> b
    int lastPathChar(int) -> a
    java.lang.String format(java.util.Date) -> a
    long round(long,long) -> a
org.eclipse.jgit.hooks.PostCommitHook -> org.eclipse.jgit.f.d:
    void <init>(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> <init>
    java.lang.Void call() -> a
    java.lang.String getHookName() -> b
    void handleError(java.lang.String,org.eclipse.jgit.util.ProcessResult) -> a
    java.lang.Object call() -> call
org.eclipse.jgit.hooks.PreCommitHook -> org.eclipse.jgit.f.e:
    void <init>(org.eclipse.jgit.lib.Repository,java.io.PrintStream,java.io.PrintStream) -> <init>
    java.lang.Void call() -> a
    java.lang.String getHookName() -> b
    java.lang.Object call() -> call
org.eclipse.jgit.ignore.FastIgnoreRule -> org.eclipse.jgit.g.a:
    org.eclipse.jgit.ignore.IMatcher matcher -> a
    boolean inverse -> b
    boolean dirOnly -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void parse(java.lang.String) -> a
    boolean isMatch$44c588c3(java.lang.String,boolean) -> a
    boolean getResult() -> a
    boolean isEmpty() -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.eclipse.jgit.ignore.IMatcher -> org.eclipse.jgit.g.b:
    org.eclipse.jgit.ignore.IMatcher$1 NO_MATCH$70300a3d -> a
    void <clinit>() -> <clinit>
    boolean matches$44c588c3(java.lang.String,boolean) -> a
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.ignore.IMatcher$1 -> org.eclipse.jgit.g.c:
    void <init>() -> <init>
    boolean matches$44c588c3(java.lang.String,boolean) -> a
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.ignore.IgnoreNode -> org.eclipse.jgit.g.d:
    org.slf4j.Logger LOG -> a
    java.util.List rules -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.util.List) -> <init>
    void parse(java.lang.String,java.io.InputStream) -> a
    java.util.List getRules() -> a
    java.lang.Boolean checkIgnored(java.lang.String,boolean) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.ignore.internal.AbstractMatcher -> org.eclipse.jgit.g.a.a:
    boolean dirOnly -> b
    java.lang.String pattern -> c
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher -> org.eclipse.jgit.g.a.b:
    void <init>(java.lang.String,java.lang.Character,boolean) -> <init>
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.ignore.internal.NameMatcher -> org.eclipse.jgit.g.a.c:
    boolean beginning -> e
    char slash -> f
    java.lang.String subPattern -> d
    void <init>(java.lang.String,java.lang.Character,boolean,boolean) -> <init>
    boolean matches$44c588c3(java.lang.String,boolean) -> a
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.ignore.internal.PathMatcher -> org.eclipse.jgit.g.a.d:
    org.eclipse.jgit.ignore.internal.WildMatcher WILD_NO_DIRECTORY -> d
    org.eclipse.jgit.ignore.internal.WildMatcher WILD_ONLY_DIRECTORY -> e
    java.util.ArrayList matchers$7865b31 -> f
    char slash -> g
    boolean beginning -> h
    int[] $SWITCH_TABLE$org$eclipse$jgit$ignore$internal$Strings$PatternState -> i
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,java.lang.Character,boolean) -> <init>
    org.eclipse.jgit.ignore.internal.AbstractMatcher createPathMatcher$637aa2f4(java.lang.String,java.lang.Character,boolean) -> a
    org.eclipse.jgit.ignore.internal.AbstractMatcher createNameMatcher0$78aa6e9a(java.lang.String,java.lang.Character,boolean,boolean) -> a
    boolean matches$44c588c3(java.lang.String,boolean) -> a
    boolean matches(java.lang.String,int,int) -> a
    boolean matches$5fd9a75c(int,java.lang.String,int,int,boolean) -> a
    boolean isWild(org.eclipse.jgit.ignore.IMatcher) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$ignore$internal$Strings$PatternState() -> a
org.eclipse.jgit.ignore.internal.Strings -> org.eclipse.jgit.g.a.e:
    java.util.List POSIX_CHAR_CLASSES -> a
    java.util.List JAVA_CHAR_CLASSES -> b
    java.util.regex.Pattern UNSUPPORTED -> c
    void <clinit>() -> <clinit>
    char getPathSeparator(java.lang.Character) -> a
    java.lang.String stripTrailing$18195202(java.lang.String) -> a
    java.lang.String stripTrailingWhitespace(java.lang.String) -> b
    boolean isDirectoryPattern(java.lang.String) -> c
    int count$44bb1429(java.lang.String,char) -> a
    java.util.ArrayList split$41012029(java.lang.String,char) -> b
    boolean isWildCard(java.lang.String) -> d
    boolean isComplexWildcard(java.lang.String) -> h
    boolean escapedByBackslash(char) -> a
    org.eclipse.jgit.ignore.internal.Strings$PatternState checkWildCards(java.lang.String) -> e
    java.util.regex.Pattern convertGlob(java.lang.String) -> f
    char lookBehind(java.lang.StringBuilder) -> a
    char lookAhead(java.lang.String,int) -> a
    java.lang.String deleteBackslash(java.lang.String) -> g
org.eclipse.jgit.ignore.internal.Strings$PatternState -> org.eclipse.jgit.g.a.f:
    org.eclipse.jgit.ignore.internal.Strings$PatternState LEADING_ASTERISK_ONLY -> a
    org.eclipse.jgit.ignore.internal.Strings$PatternState TRAILING_ASTERISK_ONLY -> b
    org.eclipse.jgit.ignore.internal.Strings$PatternState COMPLEX -> c
    org.eclipse.jgit.ignore.internal.Strings$PatternState NONE -> d
    org.eclipse.jgit.ignore.internal.Strings$PatternState[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.ignore.internal.Strings$PatternState[] values() -> a
org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher -> org.eclipse.jgit.g.a.g:
    void <init>(java.lang.String,java.lang.Character,boolean) -> <init>
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.ignore.internal.WildCardMatcher -> org.eclipse.jgit.g.a.h:
    java.util.regex.Pattern p -> e
    void <init>(java.lang.String,java.lang.Character,boolean) -> <init>
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.ignore.internal.WildMatcher -> org.eclipse.jgit.g.a.i:
    void <init>(boolean) -> <init>
    boolean matches$44c588c3(java.lang.String,boolean) -> a
    boolean matches(java.lang.String,int,int) -> a
org.eclipse.jgit.internal.JGitText -> org.eclipse.jgit.internal.JGitText:
    java.lang.String abbreviationLengthMustBeNonNegative -> abbreviationLengthMustBeNonNegative
    java.lang.String abortingRebase -> abortingRebase
    java.lang.String abortingRebaseFailed -> abortingRebaseFailed
    java.lang.String abortingRebaseFailedNoOrigHead -> abortingRebaseFailedNoOrigHead
    java.lang.String advertisementCameBefore -> advertisementCameBefore
    java.lang.String advertisementOfCameBefore -> advertisementOfCameBefore
    java.lang.String amazonS3ActionFailed -> amazonS3ActionFailed
    java.lang.String amazonS3ActionFailedGivingUp -> amazonS3ActionFailedGivingUp
    java.lang.String ambiguousObjectAbbreviation -> ambiguousObjectAbbreviation
    java.lang.String aNewObjectIdIsRequired -> aNewObjectIdIsRequired
    java.lang.String anExceptionOccurredWhileTryingToAddTheIdOfHEAD -> anExceptionOccurredWhileTryingToAddTheIdOfHEAD
    java.lang.String anSSHSessionHasBeenAlreadyCreated -> anSSHSessionHasBeenAlreadyCreated
    java.lang.String applyBinaryBaseOidWrong -> applyBinaryBaseOidWrong
    java.lang.String applyBinaryForInCoreNotSupported -> applyBinaryForInCoreNotSupported
    java.lang.String applyBinaryOidTooShort -> applyBinaryOidTooShort
    java.lang.String applyBinaryPatchTypeNotSupported -> applyBinaryPatchTypeNotSupported
    java.lang.String applyBinaryResultOidWrong -> applyBinaryResultOidWrong
    java.lang.String applyPatchDestInvalid -> applyPatchDestInvalid
    java.lang.String applyPatchSourceInvalid -> applyPatchSourceInvalid
    java.lang.String applyPatchWithoutSourceOnAlreadyExistingSource -> applyPatchWithoutSourceOnAlreadyExistingSource
    java.lang.String applyPatchWithCreationOverAlreadyExistingDestination -> applyPatchWithCreationOverAlreadyExistingDestination
    java.lang.String applyPatchWithSourceOnNonExistentSource -> applyPatchWithSourceOnNonExistentSource
    java.lang.String applyTextPatchCannotApplyHunk -> applyTextPatchCannotApplyHunk
    java.lang.String applyTextPatchSingleClearingHunk -> applyTextPatchSingleClearingHunk
    java.lang.String applyTextPatchUnorderedHunkApplications -> applyTextPatchUnorderedHunkApplications
    java.lang.String applyTextPatchUnorderedHunks -> applyTextPatchUnorderedHunks
    java.lang.String applyingCommit -> applyingCommit
    java.lang.String archiveFormatAlreadyAbsent -> archiveFormatAlreadyAbsent
    java.lang.String archiveFormatAlreadyRegistered -> archiveFormatAlreadyRegistered
    java.lang.String argumentIsNotAValidCommentString -> argumentIsNotAValidCommentString
    java.lang.String assumeAtomicCreateNewFile -> assumeAtomicCreateNewFile
    java.lang.String atLeastOnePathIsRequired -> atLeastOnePathIsRequired
    java.lang.String atLeastOnePatternIsRequired -> atLeastOnePatternIsRequired
    java.lang.String atLeastTwoFiltersNeeded -> atLeastTwoFiltersNeeded
    java.lang.String atomicPushNotSupported -> atomicPushNotSupported
    java.lang.String atomicRefUpdatesNotSupported -> atomicRefUpdatesNotSupported
    java.lang.String atomicSymRefNotSupported -> atomicSymRefNotSupported
    java.lang.String authenticationNotSupported -> authenticationNotSupported
    java.lang.String badBase64InputCharacterAt -> badBase64InputCharacterAt
    java.lang.String badEntryDelimiter -> badEntryDelimiter
    java.lang.String badEntryName -> badEntryName
    java.lang.String badEscape -> badEscape
    java.lang.String badGroupHeader -> badGroupHeader
    java.lang.String badIgnorePattern -> badIgnorePattern
    java.lang.String badIgnorePatternFull -> badIgnorePatternFull
    java.lang.String badObjectType -> badObjectType
    java.lang.String badRef -> badRef
    java.lang.String badSectionEntry -> badSectionEntry
    java.lang.String badShallowLine -> badShallowLine
    java.lang.String bareRepositoryNoWorkdirAndIndex -> bareRepositoryNoWorkdirAndIndex
    java.lang.String base85invalidChar -> base85invalidChar
    java.lang.String base85length -> base85length
    java.lang.String base85overflow -> base85overflow
    java.lang.String base85tooLong -> base85tooLong
    java.lang.String base85tooShort -> base85tooShort
    java.lang.String baseLengthIncorrect -> baseLengthIncorrect
    java.lang.String binaryDeltaBaseLengthMismatch -> binaryDeltaBaseLengthMismatch
    java.lang.String binaryDeltaInvalidOffset -> binaryDeltaInvalidOffset
    java.lang.String binaryDeltaInvalidResultLength -> binaryDeltaInvalidResultLength
    java.lang.String binaryHunkDecodeError -> binaryHunkDecodeError
    java.lang.String binaryHunkInvalidLength -> binaryHunkInvalidLength
    java.lang.String binaryHunkLineTooShort -> binaryHunkLineTooShort
    java.lang.String binaryHunkMissingNewline -> binaryHunkMissingNewline
    java.lang.String bitmapAccessErrorForPackfile -> bitmapAccessErrorForPackfile
    java.lang.String bitmapFailedToGet -> bitmapFailedToGet
    java.lang.String bitmapMissingObject -> bitmapMissingObject
    java.lang.String bitmapsMustBePrepared -> bitmapsMustBePrepared
    java.lang.String bitmapUseNoopNoListener -> bitmapUseNoopNoListener
    java.lang.String blameNotCommittedYet -> blameNotCommittedYet
    java.lang.String blockLimitNotMultipleOfBlockSize -> blockLimitNotMultipleOfBlockSize
    java.lang.String blockLimitNotPositive -> blockLimitNotPositive
    java.lang.String blockSizeNotPowerOf2 -> blockSizeNotPowerOf2
    java.lang.String bothRefTargetsMustNotBeNull -> bothRefTargetsMustNotBeNull
    java.lang.String branchNameInvalid -> branchNameInvalid
    java.lang.String buildingBitmaps -> buildingBitmaps
    java.lang.String cachedPacksPreventsIndexCreation -> cachedPacksPreventsIndexCreation
    java.lang.String cachedPacksPreventsListingObjects -> cachedPacksPreventsListingObjects
    java.lang.String cannotAccessLastModifiedForSafeDeletion -> cannotAccessLastModifiedForSafeDeletion
    java.lang.String cannotBeCombined -> cannotBeCombined
    java.lang.String cannotBeRecursiveWhenTreesAreIncluded -> cannotBeRecursiveWhenTreesAreIncluded
    java.lang.String cannotChangeActionOnComment -> cannotChangeActionOnComment
    java.lang.String cannotCheckoutFromUnbornBranch -> cannotCheckoutFromUnbornBranch
    java.lang.String cannotCheckoutOursSwitchBranch -> cannotCheckoutOursSwitchBranch
    java.lang.String cannotCombineSquashWithNoff -> cannotCombineSquashWithNoff
    java.lang.String cannotCombineTopoSortWithTopoKeepBranchTogetherSort -> cannotCombineTopoSortWithTopoKeepBranchTogetherSort
    java.lang.String cannotCombineTreeFilterWithRevFilter -> cannotCombineTreeFilterWithRevFilter
    java.lang.String cannotCommitOnARepoWithState -> cannotCommitOnARepoWithState
    java.lang.String cannotCommitWriteTo -> cannotCommitWriteTo
    java.lang.String cannotConnectPipes -> cannotConnectPipes
    java.lang.String cannotConvertScriptToText -> cannotConvertScriptToText
    java.lang.String cannotCreateConfig -> cannotCreateConfig
    java.lang.String cannotCreateDirectory -> cannotCreateDirectory
    java.lang.String cannotCreateHEAD -> cannotCreateHEAD
    java.lang.String cannotCreateIndexfile -> cannotCreateIndexfile
    java.lang.String cannotCreateTempDir -> cannotCreateTempDir
    java.lang.String cannotDeleteCheckedOutBranch -> cannotDeleteCheckedOutBranch
    java.lang.String cannotDeleteFile -> cannotDeleteFile
    java.lang.String cannotDeleteObjectsPath -> cannotDeleteObjectsPath
    java.lang.String cannotDetermineProxyFor -> cannotDetermineProxyFor
    java.lang.String cannotDownload -> cannotDownload
    java.lang.String cannotEnterObjectsPath -> cannotEnterObjectsPath
    java.lang.String cannotEnterPathFromParent -> cannotEnterPathFromParent
    java.lang.String cannotExecute -> cannotExecute
    java.lang.String cannotFindMergeBaseUsingFirstParent -> cannotFindMergeBaseUsingFirstParent
    java.lang.String cannotGet -> cannotGet
    java.lang.String cannotGetObjectsPath -> cannotGetObjectsPath
    java.lang.String cannotListObjectsPath -> cannotListObjectsPath
    java.lang.String cannotListPackPath -> cannotListPackPath
    java.lang.String cannotListRefs -> cannotListRefs
    java.lang.String cannotLock -> cannotLock
    java.lang.String cannotLockPackIn -> cannotLockPackIn
    java.lang.String cannotMatchOnEmptyString -> cannotMatchOnEmptyString
    java.lang.String cannotMkdirObjectPath -> cannotMkdirObjectPath
    java.lang.String cannotMoveIndexTo -> cannotMoveIndexTo
    java.lang.String cannotMovePackTo -> cannotMovePackTo
    java.lang.String cannotOpenService -> cannotOpenService
    java.lang.String cannotParseDate -> cannotParseDate
    java.lang.String cannotParseGitURIish -> cannotParseGitURIish
    java.lang.String cannotPullOnARepoWithState -> cannotPullOnARepoWithState
    java.lang.String cannotRead -> cannotRead
    java.lang.String cannotReadBackDelta -> cannotReadBackDelta
    java.lang.String cannotReadBlob -> cannotReadBlob
    java.lang.String cannotReadByte -> cannotReadByte
    java.lang.String cannotReadCommit -> cannotReadCommit
    java.lang.String cannotReadFile -> cannotReadFile
    java.lang.String cannotReadHEAD -> cannotReadHEAD
    java.lang.String cannotReadIndex -> cannotReadIndex
    java.lang.String cannotReadObject -> cannotReadObject
    java.lang.String cannotReadObjectsPath -> cannotReadObjectsPath
    java.lang.String cannotReadTree -> cannotReadTree
    java.lang.String cannotRebaseWithoutCurrentHead -> cannotRebaseWithoutCurrentHead
    java.lang.String cannotSaveConfig -> cannotSaveConfig
    java.lang.String cannotSquashFixupWithoutPreviousCommit -> cannotSquashFixupWithoutPreviousCommit
    java.lang.String cannotStoreObjects -> cannotStoreObjects
    java.lang.String cannotResolveUniquelyAbbrevObjectId -> cannotResolveUniquelyAbbrevObjectId
    java.lang.String cannotUpdateUnbornBranch -> cannotUpdateUnbornBranch
    java.lang.String cannotWriteObjectsPath -> cannotWriteObjectsPath
    java.lang.String canOnlyCherryPickCommitsWithOneParent -> canOnlyCherryPickCommitsWithOneParent
    java.lang.String canOnlyRevertCommitsWithOneParent -> canOnlyRevertCommitsWithOneParent
    java.lang.String commitDoesNotHaveGivenParent -> commitDoesNotHaveGivenParent
    java.lang.String cantFindObjectInReversePackIndexForTheSpecifiedOffset -> cantFindObjectInReversePackIndexForTheSpecifiedOffset
    java.lang.String channelMustBeInRange1_255 -> channelMustBeInRange1_255
    java.lang.String characterClassIsNotSupported -> characterClassIsNotSupported
    java.lang.String checkingOutFiles -> checkingOutFiles
    java.lang.String checkoutConflictWithFile -> checkoutConflictWithFile
    java.lang.String checkoutConflictWithFiles -> checkoutConflictWithFiles
    java.lang.String checkoutUnexpectedResult -> checkoutUnexpectedResult
    java.lang.String classCastNotA -> classCastNotA
    java.lang.String cloneNonEmptyDirectory -> cloneNonEmptyDirectory
    java.lang.String closeLockTokenFailed -> closeLockTokenFailed
    java.lang.String closed -> closed
    java.lang.String closePidLockFailed -> closePidLockFailed
    java.lang.String collisionOn -> collisionOn
    java.lang.String commandClosedStderrButDidntExit -> commandClosedStderrButDidntExit
    java.lang.String commandRejectedByHook -> commandRejectedByHook
    java.lang.String commandWasCalledInTheWrongState -> commandWasCalledInTheWrongState
    java.lang.String commitGraphChunkNeeded -> commitGraphChunkNeeded
    java.lang.String commitGraphChunkRepeated -> commitGraphChunkRepeated
    java.lang.String commitGraphChunkUnknown -> commitGraphChunkUnknown
    java.lang.String commitGraphFileIsTooLargeForJgit -> commitGraphFileIsTooLargeForJgit
    java.lang.String commitGraphUnexpectedSize -> commitGraphUnexpectedSize
    java.lang.String commitGraphWritingCancelled -> commitGraphWritingCancelled
    java.lang.String commitMessageNotSpecified -> commitMessageNotSpecified
    java.lang.String commitOnRepoWithoutHEADCurrentlyNotSupported -> commitOnRepoWithoutHEADCurrentlyNotSupported
    java.lang.String commitAmendOnInitialNotPossible -> commitAmendOnInitialNotPossible
    java.lang.String commitsHaveAlreadyBeenMarkedAsStart -> commitsHaveAlreadyBeenMarkedAsStart
    java.lang.String compressingObjects -> compressingObjects
    java.lang.String computingCommitGeneration -> computingCommitGeneration
    java.lang.String computingPathBloomFilters -> computingPathBloomFilters
    java.lang.String configSubsectionContainsNewline -> configSubsectionContainsNewline
    java.lang.String configSubsectionContainsNullByte -> configSubsectionContainsNullByte
    java.lang.String configValueContainsNullByte -> configValueContainsNullByte
    java.lang.String configHandleIsStale -> configHandleIsStale
    java.lang.String configHandleMayBeLocked -> configHandleMayBeLocked
    java.lang.String connectionFailed -> connectionFailed
    java.lang.String connectionTimeOut -> connectionTimeOut
    java.lang.String contextMustBeNonNegative -> contextMustBeNonNegative
    java.lang.String cookieFilePathRelative -> cookieFilePathRelative
    java.lang.String copyFileFailedNullFiles -> copyFileFailedNullFiles
    java.lang.String corruptCommitGraph -> corruptCommitGraph
    java.lang.String corruptionDetectedReReadingAt -> corruptionDetectedReReadingAt
    java.lang.String corruptObjectBadDate -> corruptObjectBadDate
    java.lang.String corruptObjectBadEmail -> corruptObjectBadEmail
    java.lang.String corruptObjectBadStream -> corruptObjectBadStream
    java.lang.String corruptObjectBadTimezone -> corruptObjectBadTimezone
    java.lang.String corruptObjectDuplicateEntryNames -> corruptObjectDuplicateEntryNames
    java.lang.String corruptObjectGarbageAfterSize -> corruptObjectGarbageAfterSize
    java.lang.String corruptObjectIncorrectLength -> corruptObjectIncorrectLength
    java.lang.String corruptObjectIncorrectSorting -> corruptObjectIncorrectSorting
    java.lang.String corruptObjectInvalidModeChar -> corruptObjectInvalidModeChar
    java.lang.String corruptObjectInvalidModeStartsZero -> corruptObjectInvalidModeStartsZero
    java.lang.String corruptObjectInvalidMode2 -> corruptObjectInvalidMode2
    java.lang.String corruptObjectInvalidMode3 -> corruptObjectInvalidMode3
    java.lang.String corruptObjectInvalidName -> corruptObjectInvalidName
    java.lang.String corruptObjectInvalidNameAux -> corruptObjectInvalidNameAux
    java.lang.String corruptObjectInvalidNameCon -> corruptObjectInvalidNameCon
    java.lang.String corruptObjectInvalidNameCom -> corruptObjectInvalidNameCom
    java.lang.String corruptObjectInvalidNameEnd -> corruptObjectInvalidNameEnd
    java.lang.String corruptObjectInvalidNameIgnorableUnicode -> corruptObjectInvalidNameIgnorableUnicode
    java.lang.String corruptObjectInvalidNameInvalidUtf8 -> corruptObjectInvalidNameInvalidUtf8
    java.lang.String corruptObjectInvalidNameLpt -> corruptObjectInvalidNameLpt
    java.lang.String corruptObjectInvalidNameNul -> corruptObjectInvalidNameNul
    java.lang.String corruptObjectInvalidNamePrn -> corruptObjectInvalidNamePrn
    java.lang.String corruptObjectInvalidObject -> corruptObjectInvalidObject
    java.lang.String corruptObjectInvalidParent -> corruptObjectInvalidParent
    java.lang.String corruptObjectInvalidTree -> corruptObjectInvalidTree
    java.lang.String corruptObjectInvalidType -> corruptObjectInvalidType
    java.lang.String corruptObjectInvalidType2 -> corruptObjectInvalidType2
    java.lang.String corruptObjectMissingEmail -> corruptObjectMissingEmail
    java.lang.String corruptObjectNameContainsByte -> corruptObjectNameContainsByte
    java.lang.String corruptObjectNameContainsChar -> corruptObjectNameContainsChar
    java.lang.String corruptObjectNameContainsNullByte -> corruptObjectNameContainsNullByte
    java.lang.String corruptObjectNameContainsSlash -> corruptObjectNameContainsSlash
    java.lang.String corruptObjectNameDot -> corruptObjectNameDot
    java.lang.String corruptObjectNameDotDot -> corruptObjectNameDotDot
    java.lang.String corruptObjectNameZeroLength -> corruptObjectNameZeroLength
    java.lang.String corruptObjectNegativeSize -> corruptObjectNegativeSize
    java.lang.String corruptObjectNoAuthor -> corruptObjectNoAuthor
    java.lang.String corruptObjectNoCommitter -> corruptObjectNoCommitter
    java.lang.String corruptObjectNoHeader -> corruptObjectNoHeader
    java.lang.String corruptObjectNoObjectHeader -> corruptObjectNoObjectHeader
    java.lang.String corruptObjectNoTagHeader -> corruptObjectNoTagHeader
    java.lang.String corruptObjectNotreeHeader -> corruptObjectNotreeHeader
    java.lang.String corruptObjectNoTypeHeader -> corruptObjectNoTypeHeader
    java.lang.String corruptObjectPackfileChecksumIncorrect -> corruptObjectPackfileChecksumIncorrect
    java.lang.String corruptObjectTruncatedInMode -> corruptObjectTruncatedInMode
    java.lang.String corruptObjectTruncatedInName -> corruptObjectTruncatedInName
    java.lang.String corruptObjectTruncatedInObjectId -> corruptObjectTruncatedInObjectId
    java.lang.String corruptObjectZeroId -> corruptObjectZeroId
    java.lang.String corruptReverseIndexChecksumIncorrect -> corruptReverseIndexChecksumIncorrect
    java.lang.String corruptPack -> corruptPack
    java.lang.String corruptUseCnt -> corruptUseCnt
    java.lang.String couldNotFindTabInLine -> couldNotFindTabInLine
    java.lang.String couldNotFindSixTabsInLine -> couldNotFindSixTabsInLine
    java.lang.String couldNotGetAdvertisedRef -> couldNotGetAdvertisedRef
    java.lang.String couldNotGetRepoStatistics -> couldNotGetRepoStatistics
    java.lang.String couldNotHashByteArrayWithSha256 -> couldNotHashByteArrayWithSha256
    java.lang.String couldNotLockHEAD -> couldNotLockHEAD
    java.lang.String couldNotPersistCookies -> couldNotPersistCookies
    java.lang.String couldNotReadCookieFile -> couldNotReadCookieFile
    java.lang.String couldNotReadIndexInOneGo -> couldNotReadIndexInOneGo
    java.lang.String couldNotReadObjectWhileParsingCommit -> couldNotReadObjectWhileParsingCommit
    java.lang.String couldNotRewindToUpstreamCommit -> couldNotRewindToUpstreamCommit
    java.lang.String couldNotSignStringWithKey -> couldNotSignStringWithKey
    java.lang.String couldNotURLEncodeToUTF8 -> couldNotURLEncodeToUTF8
    java.lang.String countingObjects -> countingObjects
    java.lang.String createBranchFailedUnknownReason -> createBranchFailedUnknownReason
    java.lang.String createBranchUnexpectedResult -> createBranchUnexpectedResult
    java.lang.String createNewFileFailed -> createNewFileFailed
    java.lang.String createRequiresZeroOldId -> createRequiresZeroOldId
    java.lang.String credentialPassword -> credentialPassword
    java.lang.String credentialPassphrase -> credentialPassphrase
    java.lang.String credentialUsername -> credentialUsername
    java.lang.String daemonAlreadyRunning -> daemonAlreadyRunning
    java.lang.String daysAgo -> daysAgo
    java.lang.String deepenNotWithDeepen -> deepenNotWithDeepen
    java.lang.String deepenSinceWithDeepen -> deepenSinceWithDeepen
    java.lang.String deleteBranchUnexpectedResult -> deleteBranchUnexpectedResult
    java.lang.String deleteFileFailed -> deleteFileFailed
    java.lang.String deletedOrphanInPackDir -> deletedOrphanInPackDir
    java.lang.String deleteRequiresZeroNewId -> deleteRequiresZeroNewId
    java.lang.String deleteTagUnexpectedResult -> deleteTagUnexpectedResult
    java.lang.String deletingBranches -> deletingBranches
    java.lang.String deletingNotSupported -> deletingNotSupported
    java.lang.String depthMustBeAt1 -> depthMustBeAt1
    java.lang.String depthWithUnshallow -> depthWithUnshallow
    java.lang.String destinationIsNotAWildcard -> destinationIsNotAWildcard
    java.lang.String detachedHeadDetected -> detachedHeadDetected
    java.lang.String diffToolNotGivenError -> diffToolNotGivenError
    java.lang.String diffToolNotSpecifiedInGitAttributesError -> diffToolNotSpecifiedInGitAttributesError
    java.lang.String diffToolNullError -> diffToolNullError
    java.lang.String dirCacheDoesNotHaveABackingFile -> dirCacheDoesNotHaveABackingFile
    java.lang.String dirCacheFileIsNotLocked -> dirCacheFileIsNotLocked
    java.lang.String dirCacheIsNotLocked -> dirCacheIsNotLocked
    java.lang.String DIRCChecksumMismatch -> DIRCChecksumMismatch
    java.lang.String DIRCCorruptLength -> DIRCCorruptLength
    java.lang.String DIRCCorruptLengthFirst -> DIRCCorruptLengthFirst
    java.lang.String DIRCExtensionIsTooLargeAt -> DIRCExtensionIsTooLargeAt
    java.lang.String DIRCExtensionNotSupportedByThisVersion -> DIRCExtensionNotSupportedByThisVersion
    java.lang.String DIRCHasTooManyEntries -> DIRCHasTooManyEntries
    java.lang.String DIRCUnrecognizedExtendedFlags -> DIRCUnrecognizedExtendedFlags
    java.lang.String downloadCancelled -> downloadCancelled
    java.lang.String downloadCancelledDuringIndexing -> downloadCancelledDuringIndexing
    java.lang.String duplicateAdvertisementsOf -> duplicateAdvertisementsOf
    java.lang.String duplicateCacheTablesGiven -> duplicateCacheTablesGiven
    java.lang.String duplicatePackExtensionsForCacheTables -> duplicatePackExtensionsForCacheTables
    java.lang.String duplicatePackExtensionsSet -> duplicatePackExtensionsSet
    java.lang.String duplicateRef -> duplicateRef
    java.lang.String duplicateRefAttribute -> duplicateRefAttribute
    java.lang.String duplicateRemoteRefUpdateIsIllegal -> duplicateRemoteRefUpdateIsIllegal
    java.lang.String duplicateStagesNotAllowed -> duplicateStagesNotAllowed
    java.lang.String eitherGitDirOrWorkTreeRequired -> eitherGitDirOrWorkTreeRequired
    java.lang.String emptyCommit -> emptyCommit
    java.lang.String emptyPathNotPermitted -> emptyPathNotPermitted
    java.lang.String emptyRef -> emptyRef
    java.lang.String encryptionError -> encryptionError
    java.lang.String encryptionOnlyPBE -> encryptionOnlyPBE
    java.lang.String endOfFileInEscape -> endOfFileInEscape
    java.lang.String entryNotFoundByPath -> entryNotFoundByPath
    java.lang.String enumValueNotSupported0 -> enumValueNotSupported0
    java.lang.String enumValueNotSupported2 -> enumValueNotSupported2
    java.lang.String enumValueNotSupported3 -> enumValueNotSupported3
    java.lang.String enumValuesNotAvailable -> enumValuesNotAvailable
    java.lang.String errorInPackedRefs -> errorInPackedRefs
    java.lang.String errorInvalidProtocolWantedOldNewRef -> errorInvalidProtocolWantedOldNewRef
    java.lang.String errorListing -> errorListing
    java.lang.String errorOccurredDuringUnpackingOnTheRemoteEnd -> errorOccurredDuringUnpackingOnTheRemoteEnd
    java.lang.String errorReadingInfoRefs -> errorReadingInfoRefs
    java.lang.String exceptionCaughtDuringExecutionOfHook -> exceptionCaughtDuringExecutionOfHook
    java.lang.String exceptionCaughtDuringExecutionOfAddCommand -> exceptionCaughtDuringExecutionOfAddCommand
    java.lang.String exceptionCaughtDuringExecutionOfArchiveCommand -> exceptionCaughtDuringExecutionOfArchiveCommand
    java.lang.String exceptionCaughtDuringExecutionOfCherryPickCommand -> exceptionCaughtDuringExecutionOfCherryPickCommand
    java.lang.String exceptionCaughtDuringExecutionOfCommand -> exceptionCaughtDuringExecutionOfCommand
    java.lang.String exceptionCaughtDuringExecutionOfCommitCommand -> exceptionCaughtDuringExecutionOfCommitCommand
    java.lang.String exceptionCaughtDuringExecutionOfFetchCommand -> exceptionCaughtDuringExecutionOfFetchCommand
    java.lang.String exceptionCaughtDuringExecutionOfLsRemoteCommand -> exceptionCaughtDuringExecutionOfLsRemoteCommand
    java.lang.String exceptionCaughtDuringExecutionOfMergeCommand -> exceptionCaughtDuringExecutionOfMergeCommand
    java.lang.String exceptionCaughtDuringExecutionOfPullCommand -> exceptionCaughtDuringExecutionOfPullCommand
    java.lang.String exceptionCaughtDuringExecutionOfPushCommand -> exceptionCaughtDuringExecutionOfPushCommand
    java.lang.String exceptionCaughtDuringExecutionOfResetCommand -> exceptionCaughtDuringExecutionOfResetCommand
    java.lang.String exceptionCaughtDuringExecutionOfRevertCommand -> exceptionCaughtDuringExecutionOfRevertCommand
    java.lang.String exceptionCaughtDuringExecutionOfRmCommand -> exceptionCaughtDuringExecutionOfRmCommand
    java.lang.String exceptionCaughtDuringExecutionOfTagCommand -> exceptionCaughtDuringExecutionOfTagCommand
    java.lang.String exceptionHookExecutionInterrupted -> exceptionHookExecutionInterrupted
    java.lang.String exceptionOccurredDuringAddingOfOptionToALogCommand -> exceptionOccurredDuringAddingOfOptionToALogCommand
    java.lang.String exceptionOccurredDuringReadingOfGIT_DIR -> exceptionOccurredDuringReadingOfGIT_DIR
    java.lang.String exceptionWhileFindingUserHome -> exceptionWhileFindingUserHome
    java.lang.String exceptionWhileLoadingCommitGraph -> exceptionWhileLoadingCommitGraph
    java.lang.String exceptionWhileReadingPack -> exceptionWhileReadingPack
    java.lang.String expectedACKNAKFoundEOF -> expectedACKNAKFoundEOF
    java.lang.String expectedACKNAKGot -> expectedACKNAKGot
    java.lang.String expectedBooleanStringValue -> expectedBooleanStringValue
    java.lang.String expectedCharacterEncodingGuesses -> expectedCharacterEncodingGuesses
    java.lang.String expectedDirectoryNotSubmodule -> expectedDirectoryNotSubmodule
    java.lang.String expectedEOFReceived -> expectedEOFReceived
    java.lang.String expectedGot -> expectedGot
    java.lang.String expectedLessThanGot -> expectedLessThanGot
    java.lang.String expectedPktLineWithService -> expectedPktLineWithService
    java.lang.String expectedReceivedContentType -> expectedReceivedContentType
    java.lang.String expectedReportForRefNotReceived -> expectedReportForRefNotReceived
    java.lang.String failedAtomicFileCreation -> failedAtomicFileCreation
    java.lang.String failedCreateLockFile -> failedCreateLockFile
    java.lang.String failedPidLock -> failedPidLock
    java.lang.String failedReadHttpsProtocols -> failedReadHttpsProtocols
    java.lang.String failedToDetermineFilterDefinition -> failedToDetermineFilterDefinition
    java.lang.String failedToConvert -> failedToConvert
    java.lang.String failedUpdatingRefs -> failedUpdatingRefs
    java.lang.String failureDueToOneOfTheFollowing -> failureDueToOneOfTheFollowing
    java.lang.String failureUpdatingFETCH_HEAD -> failureUpdatingFETCH_HEAD
    java.lang.String failureUpdatingTrackingRef -> failureUpdatingTrackingRef
    java.lang.String fileAlreadyExists -> fileAlreadyExists
    java.lang.String fileCannotBeDeleted -> fileCannotBeDeleted
    java.lang.String fileIsTooLarge -> fileIsTooLarge
    java.lang.String fileModeNotSetForPath -> fileModeNotSetForPath
    java.lang.String filterExecutionFailed -> filterExecutionFailed
    java.lang.String filterExecutionFailedRc -> filterExecutionFailedRc
    java.lang.String filterRequiresCapability -> filterRequiresCapability
    java.lang.String findingCommitsForCommitGraph -> findingCommitsForCommitGraph
    java.lang.String findingGarbage -> findingGarbage
    java.lang.String flagIsDisposed -> flagIsDisposed
    java.lang.String flagNotFromThis -> flagNotFromThis
    java.lang.String flagsAlreadyCreated -> flagsAlreadyCreated
    java.lang.String funnyRefname -> funnyRefname
    java.lang.String gcAlreadyRunning -> gcAlreadyRunning
    java.lang.String gcFailed -> gcFailed
    java.lang.String gcTooManyUnpruned -> gcTooManyUnpruned
    java.lang.String headRequiredToStash -> headRequiredToStash
    java.lang.String hoursAgo -> hoursAgo
    java.lang.String httpConfigCannotNormalizeURL -> httpConfigCannotNormalizeURL
    java.lang.String httpConfigInvalidURL -> httpConfigInvalidURL
    java.lang.String httpFactoryInUse -> httpFactoryInUse
    java.lang.String httpPreAuthTooLate -> httpPreAuthTooLate
    java.lang.String httpUserInfoDecodeError -> httpUserInfoDecodeError
    java.lang.String httpWrongConnectionType -> httpWrongConnectionType
    java.lang.String hugeIndexesAreNotSupportedByJgitYet -> hugeIndexesAreNotSupportedByJgitYet
    java.lang.String hunkBelongsToAnotherFile -> hunkBelongsToAnotherFile
    java.lang.String hunkDisconnectedFromFile -> hunkDisconnectedFromFile
    java.lang.String hunkHeaderDoesNotMatchBodyLineCountOf -> hunkHeaderDoesNotMatchBodyLineCountOf
    java.lang.String illegalArgumentNotA -> illegalArgumentNotA
    java.lang.String illegalCombinationOfArguments -> illegalCombinationOfArguments
    java.lang.String illegalHookName -> illegalHookName
    java.lang.String illegalPackingPhase -> illegalPackingPhase
    java.lang.String illegalTernarySearchTreeKey -> illegalTernarySearchTreeKey
    java.lang.String illegalTernarySearchTreeValue -> illegalTernarySearchTreeValue
    java.lang.String incorrectHashFor -> incorrectHashFor
    java.lang.String incorrectOBJECT_ID_LENGTH -> incorrectOBJECT_ID_LENGTH
    java.lang.String indexFileCorruptedNegativeBucketCount -> indexFileCorruptedNegativeBucketCount
    java.lang.String indexFileIsTooLargeForJgit -> indexFileIsTooLargeForJgit
    java.lang.String indexNumbersNotIncreasing -> indexNumbersNotIncreasing
    java.lang.String indexWriteException -> indexWriteException
    java.lang.String initFailedBareRepoDifferentDirs -> initFailedBareRepoDifferentDirs
    java.lang.String initFailedDirIsNoDirectory -> initFailedDirIsNoDirectory
    java.lang.String initFailedGitDirIsNoDirectory -> initFailedGitDirIsNoDirectory
    java.lang.String initFailedNonBareRepoSameDirs -> initFailedNonBareRepoSameDirs
    java.lang.String inMemoryBufferLimitExceeded -> inMemoryBufferLimitExceeded
    java.lang.String inputDidntMatchLength -> inputDidntMatchLength
    java.lang.String inputStreamClosed -> inputStreamClosed
    java.lang.String inputStreamMustSupportMark -> inputStreamMustSupportMark
    java.lang.String integerValueNotInRange -> integerValueNotInRange
    java.lang.String integerValueNotInRangeSubSection -> integerValueNotInRangeSubSection
    java.lang.String integerValueOutOfRange -> integerValueOutOfRange
    java.lang.String internalRevisionError -> internalRevisionError
    java.lang.String internalServerError -> internalServerError
    java.lang.String interruptedWriting -> interruptedWriting
    java.lang.String inTheFuture -> inTheFuture
    java.lang.String invalidAdvertisementOf -> invalidAdvertisementOf
    java.lang.String invalidAncestryLength -> invalidAncestryLength
    java.lang.String invalidAwsApiSignatureVersion -> invalidAwsApiSignatureVersion
    java.lang.String invalidBooleanValue -> invalidBooleanValue
    java.lang.String invalidChannel -> invalidChannel
    java.lang.String invalidCommitParentNumber -> invalidCommitParentNumber
    java.lang.String invalidCoreAbbrev -> invalidCoreAbbrev
    java.lang.String invalidDepth -> invalidDepth
    java.lang.String invalidEncoding -> invalidEncoding
    java.lang.String invalidEncryption -> invalidEncryption
    java.lang.String invalidExpandWildcard -> invalidExpandWildcard
    java.lang.String invalidExtraEdgeListPosition -> invalidExtraEdgeListPosition
    java.lang.String invalidFilter -> invalidFilter
    java.lang.String invalidGitdirRef -> invalidGitdirRef
    java.lang.String invalidGitModules -> invalidGitModules
    java.lang.String invalidGitType -> invalidGitType
    java.lang.String invalidHeaderFormat -> invalidHeaderFormat
    java.lang.String invalidHeaderKey -> invalidHeaderKey
    java.lang.String invalidHeaderValue -> invalidHeaderValue
    java.lang.String invalidHexString -> invalidHexString
    java.lang.String invalidHomeDirectory -> invalidHomeDirectory
    java.lang.String invalidHooksPath -> invalidHooksPath
    java.lang.String invalidId -> invalidId
    java.lang.String invalidId0 -> invalidId0
    java.lang.String invalidIdLength -> invalidIdLength
    java.lang.String invalidIgnoreParamSubmodule -> invalidIgnoreParamSubmodule
    java.lang.String invalidIgnoreRule -> invalidIgnoreRule
    java.lang.String invalidIntegerValue -> invalidIntegerValue
    java.lang.String invalidKey -> invalidKey
    java.lang.String invalidLineInConfigFile -> invalidLineInConfigFile
    java.lang.String invalidLineInConfigFileWithParam -> invalidLineInConfigFileWithParam
    java.lang.String invalidModeFor -> invalidModeFor
    java.lang.String invalidModeForPath -> invalidModeForPath
    java.lang.String invalidNameContainsDotDot -> invalidNameContainsDotDot
    java.lang.String invalidNegativeAndForce -> invalidNegativeAndForce
    java.lang.String invalidObject -> invalidObject
    java.lang.String invalidOldIdSent -> invalidOldIdSent
    java.lang.String invalidPacketLineHeader -> invalidPacketLineHeader
    java.lang.String invalidPath -> invalidPath
    java.lang.String invalidPurgeFactor -> invalidPurgeFactor
    java.lang.String invalidRedirectLocation -> invalidRedirectLocation
    java.lang.String invalidRefAdvertisementLine -> invalidRefAdvertisementLine
    java.lang.String invalidReflogRevision -> invalidReflogRevision
    java.lang.String invalidRefName -> invalidRefName
    java.lang.String invalidReftableBlock -> invalidReftableBlock
    java.lang.String invalidReftableCRC -> invalidReftableCRC
    java.lang.String invalidReftableFile -> invalidReftableFile
    java.lang.String invalidRemote -> invalidRemote
    java.lang.String invalidShallowObject -> invalidShallowObject
    java.lang.String invalidStageForPath -> invalidStageForPath
    java.lang.String invalidSystemProperty -> invalidSystemProperty
    java.lang.String invalidTagOption -> invalidTagOption
    java.lang.String invalidTimeout -> invalidTimeout
    java.lang.String invalidTimestamp -> invalidTimestamp
    java.lang.String invalidTimeUnitValue2 -> invalidTimeUnitValue2
    java.lang.String invalidTimeUnitValue3 -> invalidTimeUnitValue3
    java.lang.String invalidTreeZeroLengthName -> invalidTreeZeroLengthName
    java.lang.String invalidURL -> invalidURL
    java.lang.String invalidWildcards -> invalidWildcards
    java.lang.String invalidRefSpec -> invalidRefSpec
    java.lang.String invalidRepositoryStateNoHead -> invalidRepositoryStateNoHead
    java.lang.String invalidWindowSize -> invalidWindowSize
    java.lang.String isAStaticFlagAndHasNorevWalkInstance -> isAStaticFlagAndHasNorevWalkInstance
    java.lang.String JRELacksMD5Implementation -> JRELacksMD5Implementation
    java.lang.String kNotInRange -> kNotInRange
    java.lang.String largeObjectExceedsByteArray -> largeObjectExceedsByteArray
    java.lang.String largeObjectExceedsLimit -> largeObjectExceedsLimit
    java.lang.String largeObjectException -> largeObjectException
    java.lang.String largeObjectOutOfMemory -> largeObjectOutOfMemory
    java.lang.String lengthExceedsMaximumArraySize -> lengthExceedsMaximumArraySize
    java.lang.String lfsHookConflict -> lfsHookConflict
    java.lang.String listingAlternates -> listingAlternates
    java.lang.String listingPacks -> listingPacks
    java.lang.String localObjectsIncomplete -> localObjectsIncomplete
    java.lang.String localRefIsMissingObjects -> localRefIsMissingObjects
    java.lang.String localRepository -> localRepository
    java.lang.String lockCountMustBeGreaterOrEqual1 -> lockCountMustBeGreaterOrEqual1
    java.lang.String lockAlreadyHeld -> lockAlreadyHeld
    java.lang.String lockError -> lockError
    java.lang.String lockFailedRetry -> lockFailedRetry
    java.lang.String lockOnNotClosed -> lockOnNotClosed
    java.lang.String lockOnNotHeld -> lockOnNotHeld
    java.lang.String lockStreamClosed -> lockStreamClosed
    java.lang.String lockStreamMultiple -> lockStreamMultiple
    java.lang.String logInconsistentFiletimeDiff -> logInconsistentFiletimeDiff
    java.lang.String logInvalidDefaultCharset -> logInvalidDefaultCharset
    java.lang.String logLargerFiletimeDiff -> logLargerFiletimeDiff
    java.lang.String logSmallerFiletime -> logSmallerFiletime
    java.lang.String logXDGConfigHomeInvalid -> logXDGConfigHomeInvalid
    java.lang.String looseObjectHandleIsStale -> looseObjectHandleIsStale
    java.lang.String maxCountMustBeNonNegative -> maxCountMustBeNonNegative
    java.lang.String mergeConflictOnNonNoteEntries -> mergeConflictOnNonNoteEntries
    java.lang.String mergeConflictOnNotes -> mergeConflictOnNotes
    java.lang.String mergeStrategyAlreadyExistsAsDefault -> mergeStrategyAlreadyExistsAsDefault
    java.lang.String mergeStrategyDoesNotSupportHeads -> mergeStrategyDoesNotSupportHeads
    java.lang.String mergeUsingStrategyResultedInDescription -> mergeUsingStrategyResultedInDescription
    java.lang.String mergeRecursiveConflictsWhenMergingCommonAncestors -> mergeRecursiveConflictsWhenMergingCommonAncestors
    java.lang.String mergeRecursiveTooManyMergeBasesFor -> mergeRecursiveTooManyMergeBasesFor
    java.lang.String mergeToolNotGivenError -> mergeToolNotGivenError
    java.lang.String mergeToolNullError -> mergeToolNullError
    java.lang.String messageAndTaggerNotAllowedInUnannotatedTags -> messageAndTaggerNotAllowedInUnannotatedTags
    java.lang.String minutesAgo -> minutesAgo
    java.lang.String mismatchOffset -> mismatchOffset
    java.lang.String mismatchCRC -> mismatchCRC
    java.lang.String missingAccesskey -> missingAccesskey
    java.lang.String missingAwsRegion -> missingAwsRegion
    java.lang.String missingConfigurationForKey -> missingConfigurationForKey
    java.lang.String missingCookieFile -> missingCookieFile
    java.lang.String missingCRC -> missingCRC
    java.lang.String missingDeltaBase -> missingDeltaBase
    java.lang.String missingForwardImageInGITBinaryPatch -> missingForwardImageInGITBinaryPatch
    java.lang.String missingObject -> missingObject
    java.lang.String missingPrerequisiteCommits -> missingPrerequisiteCommits
    java.lang.String missingRequiredParameter -> missingRequiredParameter
    java.lang.String missingSecretkey -> missingSecretkey
    java.lang.String mixedStagesNotAllowed -> mixedStagesNotAllowed
    java.lang.String mkDirFailed -> mkDirFailed
    java.lang.String mkDirsFailed -> mkDirsFailed
    java.lang.String month -> month
    java.lang.String months -> months
    java.lang.String monthsAgo -> monthsAgo
    java.lang.String multipleMergeBasesFor -> multipleMergeBasesFor
    java.lang.String nameMustNotBeNullOrEmpty -> nameMustNotBeNullOrEmpty
    java.lang.String need2Arguments -> need2Arguments
    java.lang.String newIdMustNotBeNull -> newIdMustNotBeNull
    java.lang.String newlineInQuotesNotAllowed -> newlineInQuotesNotAllowed
    java.lang.String noApplyInDelete -> noApplyInDelete
    java.lang.String noClosingBracket -> noClosingBracket
    java.lang.String noCommitsSelectedForShallow -> noCommitsSelectedForShallow
    java.lang.String noCredentialsProvider -> noCredentialsProvider
    java.lang.String noHEADExistsAndNoExplicitStartingRevisionWasSpecified -> noHEADExistsAndNoExplicitStartingRevisionWasSpecified
    java.lang.String noHMACsupport -> noHMACsupport
    java.lang.String noMergeBase -> noMergeBase
    java.lang.String noMergeHeadSpecified -> noMergeHeadSpecified
    java.lang.String nonBareLinkFilesNotSupported -> nonBareLinkFilesNotSupported
    java.lang.String nonCommitToHeads -> nonCommitToHeads
    java.lang.String noPackExtConfigurationGiven -> noPackExtConfigurationGiven
    java.lang.String noPackExtGivenForConfiguration -> noPackExtGivenForConfiguration
    java.lang.String noPathAttributesFound -> noPathAttributesFound
    java.lang.String noSuchRef -> noSuchRef
    java.lang.String noSuchRefKnown -> noSuchRefKnown
    java.lang.String noSuchSubmodule -> noSuchSubmodule
    java.lang.String notABoolean -> notABoolean
    java.lang.String notABundle -> notABundle
    java.lang.String notACommitGraph -> notACommitGraph
    java.lang.String notADIRCFile -> notADIRCFile
    java.lang.String notAGitDirectory -> notAGitDirectory
    java.lang.String notAPACKFile -> notAPACKFile
    java.lang.String notARef -> notARef
    java.lang.String notASCIIString -> notASCIIString
    java.lang.String notAuthorized -> notAuthorized
    java.lang.String notAValidPack -> notAValidPack
    java.lang.String notFound -> notFound
    java.lang.String nothingToFetch -> nothingToFetch
    java.lang.String nothingToPush -> nothingToPush
    java.lang.String notMergedExceptionMessage -> notMergedExceptionMessage
    java.lang.String notShallowedUnshallow -> notShallowedUnshallow
    java.lang.String noXMLParserAvailable -> noXMLParserAvailable
    java.lang.String nullRevCommit -> nullRevCommit
    java.lang.String numberDoesntFit -> numberDoesntFit
    java.lang.String objectAtHasBadZlibStream -> objectAtHasBadZlibStream
    java.lang.String objectIsCorrupt -> objectIsCorrupt
    java.lang.String objectIsCorrupt3 -> objectIsCorrupt3
    java.lang.String objectIsNotA -> objectIsNotA
    java.lang.String objectNotFound -> objectNotFound
    java.lang.String objectNotFoundIn -> objectNotFoundIn
    java.lang.String obtainingCommitsForCherryPick -> obtainingCommitsForCherryPick
    java.lang.String oldIdMustNotBeNull -> oldIdMustNotBeNull
    java.lang.String onlyOneFetchSupported -> onlyOneFetchSupported
    java.lang.String onlyOneOperationCallPerConnectionIsSupported -> onlyOneOperationCallPerConnectionIsSupported
    java.lang.String openFilesMustBeAtLeast1 -> openFilesMustBeAtLeast1
    java.lang.String openingConnection -> openingConnection
    java.lang.String operationCanceled -> operationCanceled
    java.lang.String outputHasAlreadyBeenStarted -> outputHasAlreadyBeenStarted
    java.lang.String overflowedReftableBlock -> overflowedReftableBlock
    java.lang.String packChecksumMismatch -> packChecksumMismatch
    java.lang.String packCorruptedWhileWritingToFilesystem -> packCorruptedWhileWritingToFilesystem
    java.lang.String packedRefsHandleIsStale -> packedRefsHandleIsStale
    java.lang.String packetSizeMustBeAtLeast -> packetSizeMustBeAtLeast
    java.lang.String packetSizeMustBeAtMost -> packetSizeMustBeAtMost
    java.lang.String packedRefsCorruptionDetected -> packedRefsCorruptionDetected
    java.lang.String packfileCorruptionDetected -> packfileCorruptionDetected
    java.lang.String packFileInvalid -> packFileInvalid
    java.lang.String packfileIsTruncated -> packfileIsTruncated
    java.lang.String packfileIsTruncatedNoParam -> packfileIsTruncatedNoParam
    java.lang.String packHandleIsStale -> packHandleIsStale
    java.lang.String packHasUnresolvedDeltas -> packHasUnresolvedDeltas
    java.lang.String packInaccessible -> packInaccessible
    java.lang.String packingCancelledDuringObjectsWriting -> packingCancelledDuringObjectsWriting
    java.lang.String packObjectCountMismatch -> packObjectCountMismatch
    java.lang.String packRefs -> packRefs
    java.lang.String packRefsFailed -> packRefsFailed
    java.lang.String packRefsSuccessful -> packRefsSuccessful
    java.lang.String packSizeNotSetYet -> packSizeNotSetYet
    java.lang.String packTooLargeForIndexVersion1 -> packTooLargeForIndexVersion1
    java.lang.String packWasDeleted -> packWasDeleted
    java.lang.String packWriterStatistics -> packWriterStatistics
    java.lang.String panicCantRenameIndexFile -> panicCantRenameIndexFile
    java.lang.String patchApplyException -> patchApplyException
    java.lang.String patchApplyErrorWithHunk -> patchApplyErrorWithHunk
    java.lang.String patchApplyErrorWithoutHunk -> patchApplyErrorWithoutHunk
    java.lang.String patchFormatException -> patchFormatException
    java.lang.String pathNotConfigured -> pathNotConfigured
    java.lang.String peeledLineBeforeRef -> peeledLineBeforeRef
    java.lang.String peeledRefIsRequired -> peeledRefIsRequired
    java.lang.String peerDidNotSupplyACompleteObjectGraph -> peerDidNotSupplyACompleteObjectGraph
    java.lang.String personIdentEmailNonNull -> personIdentEmailNonNull
    java.lang.String personIdentNameNonNull -> personIdentNameNonNull
    java.lang.String postCommitHookFailed -> postCommitHookFailed
    java.lang.String prefixRemote -> prefixRemote
    java.lang.String problemWithResolvingPushRefSpecsLocally -> problemWithResolvingPushRefSpecsLocally
    java.lang.String progressMonUploading -> progressMonUploading
    java.lang.String propertyIsAlreadyNonNull -> propertyIsAlreadyNonNull
    java.lang.String pruneLoosePackedObjects -> pruneLoosePackedObjects
    java.lang.String pruneLooseUnreferencedObjects -> pruneLooseUnreferencedObjects
    java.lang.String pullTaskName -> pullTaskName
    java.lang.String pushCancelled -> pushCancelled
    java.lang.String pushCertificateInvalidField -> pushCertificateInvalidField
    java.lang.String pushCertificateInvalidFieldValue -> pushCertificateInvalidFieldValue
    java.lang.String pushCertificateInvalidHeader -> pushCertificateInvalidHeader
    java.lang.String pushCertificateInvalidSignature -> pushCertificateInvalidSignature
    java.lang.String pushDefaultNothing -> pushDefaultNothing
    java.lang.String pushDefaultNoUpstream -> pushDefaultNoUpstream
    java.lang.String pushDefaultSimple -> pushDefaultSimple
    java.lang.String pushDefaultTriangularUpstream -> pushDefaultTriangularUpstream
    java.lang.String pushDefaultUnknown -> pushDefaultUnknown
    java.lang.String pushIsNotSupportedForBundleTransport -> pushIsNotSupportedForBundleTransport
    java.lang.String pushNotPermitted -> pushNotPermitted
    java.lang.String pushOptionsNotSupported -> pushOptionsNotSupported
    java.lang.String rawLogMessageDoesNotParseAsLogEntry -> rawLogMessageDoesNotParseAsLogEntry
    java.lang.String readConfigFailed -> readConfigFailed
    java.lang.String readShallowFailed -> readShallowFailed
    java.lang.String readFileStoreAttributesFailed -> readFileStoreAttributesFailed
    java.lang.String readerIsRequired -> readerIsRequired
    java.lang.String readingObjectsFromLocalRepositoryFailed -> readingObjectsFromLocalRepositoryFailed
    java.lang.String readLastModifiedFailed -> readLastModifiedFailed
    java.lang.String readTimedOut -> readTimedOut
    java.lang.String receivePackObjectTooLarge1 -> receivePackObjectTooLarge1
    java.lang.String receivePackObjectTooLarge2 -> receivePackObjectTooLarge2
    java.lang.String receivePackInvalidLimit -> receivePackInvalidLimit
    java.lang.String receivePackTooLarge -> receivePackTooLarge
    java.lang.String receivingObjects -> receivingObjects
    java.lang.String redirectBlocked -> redirectBlocked
    java.lang.String redirectHttp -> redirectHttp
    java.lang.String redirectLimitExceeded -> redirectLimitExceeded
    java.lang.String redirectLocationMissing -> redirectLocationMissing
    java.lang.String redirectsOff -> redirectsOff
    java.lang.String refAlreadyExists -> refAlreadyExists
    java.lang.String refAlreadyExists1 -> refAlreadyExists1
    java.lang.String reflogEntryNotFound -> reflogEntryNotFound
    java.lang.String refNotResolved -> refNotResolved
    java.lang.String reftableDirExists -> reftableDirExists
    java.lang.String reftableRecordsMustIncrease -> reftableRecordsMustIncrease
    java.lang.String refUpdateReturnCodeWas -> refUpdateReturnCodeWas
    java.lang.String remoteBranchNotFound -> remoteBranchNotFound
    java.lang.String remoteConfigHasNoURIAssociated -> remoteConfigHasNoURIAssociated
    java.lang.String remoteDoesNotHaveSpec -> remoteDoesNotHaveSpec
    java.lang.String remoteDoesNotSupportSmartHTTPPush -> remoteDoesNotSupportSmartHTTPPush
    java.lang.String remoteHungUpUnexpectedly -> remoteHungUpUnexpectedly
    java.lang.String remoteNameCannotBeNull -> remoteNameCannotBeNull
    java.lang.String renameBranchFailedAmbiguous -> renameBranchFailedAmbiguous
    java.lang.String renameBranchFailedNotABranch -> renameBranchFailedNotABranch
    java.lang.String renameBranchFailedUnknownReason -> renameBranchFailedUnknownReason
    java.lang.String renameBranchUnexpectedResult -> renameBranchUnexpectedResult
    java.lang.String renameCancelled -> renameCancelled
    java.lang.String renameFileFailed -> renameFileFailed
    java.lang.String renameFileFailedNullFiles -> renameFileFailedNullFiles
    java.lang.String renamesAlreadyFound -> renamesAlreadyFound
    java.lang.String renamesBreakingModifies -> renamesBreakingModifies
    java.lang.String renamesFindingByContent -> renamesFindingByContent
    java.lang.String renamesFindingExact -> renamesFindingExact
    java.lang.String renamesRejoiningModifies -> renamesRejoiningModifies
    java.lang.String repositoryAlreadyExists -> repositoryAlreadyExists
    java.lang.String repositoryConfigFileInvalid -> repositoryConfigFileInvalid
    java.lang.String repositoryIsRequired -> repositoryIsRequired
    java.lang.String repositoryNotFound -> repositoryNotFound
    java.lang.String repositoryState_applyMailbox -> repositoryState_applyMailbox
    java.lang.String repositoryState_bare -> repositoryState_bare
    java.lang.String repositoryState_bisecting -> repositoryState_bisecting
    java.lang.String repositoryState_conflicts -> repositoryState_conflicts
    java.lang.String repositoryState_merged -> repositoryState_merged
    java.lang.String repositoryState_normal -> repositoryState_normal
    java.lang.String repositoryState_rebase -> repositoryState_rebase
    java.lang.String repositoryState_rebaseInteractive -> repositoryState_rebaseInteractive
    java.lang.String repositoryState_rebaseOrApplyMailbox -> repositoryState_rebaseOrApplyMailbox
    java.lang.String repositoryState_rebaseWithMerge -> repositoryState_rebaseWithMerge
    java.lang.String requiredHashFunctionNotAvailable -> requiredHashFunctionNotAvailable
    java.lang.String resettingHead -> resettingHead
    java.lang.String resolvingDeltas -> resolvingDeltas
    java.lang.String resultLengthIncorrect -> resultLengthIncorrect
    java.lang.String rewinding -> rewinding
    java.lang.String s3ActionDeletion -> s3ActionDeletion
    java.lang.String s3ActionReading -> s3ActionReading
    java.lang.String s3ActionWriting -> s3ActionWriting
    java.lang.String saveFileStoreAttributesFailed -> saveFileStoreAttributesFailed
    java.lang.String searchForReachableBranches -> searchForReachableBranches
    java.lang.String searchForReuse -> searchForReuse
    java.lang.String searchForReuseTimeout -> searchForReuseTimeout
    java.lang.String searchForSizes -> searchForSizes
    java.lang.String secondsAgo -> secondsAgo
    java.lang.String selectingCommits -> selectingCommits
    java.lang.String sequenceTooLargeForDiffAlgorithm -> sequenceTooLargeForDiffAlgorithm
    java.lang.String serviceNotEnabledNoName -> serviceNotEnabledNoName
    java.lang.String serviceNotPermitted -> serviceNotPermitted
    java.lang.String sha1CollisionDetected -> sha1CollisionDetected
    java.lang.String shallowCommitsAlreadyInitialized -> shallowCommitsAlreadyInitialized
    java.lang.String shallowNotSupported -> shallowNotSupported
    java.lang.String shallowPacksRequireDepthWalk -> shallowPacksRequireDepthWalk
    java.lang.String shortCompressedStreamAt -> shortCompressedStreamAt
    java.lang.String shortReadOfBlock -> shortReadOfBlock
    java.lang.String shortReadOfOptionalDIRCExtensionExpectedAnotherBytes -> shortReadOfOptionalDIRCExtensionExpectedAnotherBytes
    java.lang.String shortSkipOfBlock -> shortSkipOfBlock
    java.lang.String shutdownCleanup -> shutdownCleanup
    java.lang.String shutdownCleanupFailed -> shutdownCleanupFailed
    java.lang.String shutdownCleanupListenerFailed -> shutdownCleanupListenerFailed
    java.lang.String signatureServiceConflict -> signatureServiceConflict
    java.lang.String signatureTypeUnknown -> signatureTypeUnknown
    java.lang.String signatureVerificationError -> signatureVerificationError
    java.lang.String signatureVerificationUnavailable -> signatureVerificationUnavailable
    java.lang.String signedTagMessageNoLf -> signedTagMessageNoLf
    java.lang.String signingServiceUnavailable -> signingServiceUnavailable
    java.lang.String similarityScoreMustBeWithinBounds -> similarityScoreMustBeWithinBounds
    java.lang.String skipMustBeNonNegative -> skipMustBeNonNegative
    java.lang.String skipNotAccessiblePath -> skipNotAccessiblePath
    java.lang.String smartHTTPPushDisabled -> smartHTTPPushDisabled
    java.lang.String sourceDestinationMustMatch -> sourceDestinationMustMatch
    java.lang.String sourceIsNotAWildcard -> sourceIsNotAWildcard
    java.lang.String sourceRefDoesntResolveToAnyObject -> sourceRefDoesntResolveToAnyObject
    java.lang.String sourceRefNotSpecifiedForRefspec -> sourceRefNotSpecifiedForRefspec
    java.lang.String squashCommitNotUpdatingHEAD -> squashCommitNotUpdatingHEAD
    java.lang.String sshCommandFailed -> sshCommandFailed
    java.lang.String sshCommandTimeout -> sshCommandTimeout
    java.lang.String sslFailureExceptionMessage -> sslFailureExceptionMessage
    java.lang.String sslFailureInfo -> sslFailureInfo
    java.lang.String sslFailureCause -> sslFailureCause
    java.lang.String sslFailureTrustExplanation -> sslFailureTrustExplanation
    java.lang.String sslTrustAlways -> sslTrustAlways
    java.lang.String sslTrustForRepo -> sslTrustForRepo
    java.lang.String sslTrustNow -> sslTrustNow
    java.lang.String sslVerifyCannotSave -> sslVerifyCannotSave
    java.lang.String stalePidLock -> stalePidLock
    java.lang.String staleRevFlagsOn -> staleRevFlagsOn
    java.lang.String startingReadStageWithoutWrittenRequestDataPendingIsNotSupported -> startingReadStageWithoutWrittenRequestDataPendingIsNotSupported
    java.lang.String stashApplyConflict -> stashApplyConflict
    java.lang.String stashApplyFailed -> stashApplyFailed
    java.lang.String stashApplyWithoutHead -> stashApplyWithoutHead
    java.lang.String stashApplyOnUnsafeRepository -> stashApplyOnUnsafeRepository
    java.lang.String stashCommitIncorrectNumberOfParents -> stashCommitIncorrectNumberOfParents
    java.lang.String stashDropDeleteRefFailed -> stashDropDeleteRefFailed
    java.lang.String stashDropFailed -> stashDropFailed
    java.lang.String stashDropMissingReflog -> stashDropMissingReflog
    java.lang.String stashDropNotSupported -> stashDropNotSupported
    java.lang.String stashFailed -> stashFailed
    java.lang.String stashResolveFailed -> stashResolveFailed
    java.lang.String statelessRPCRequiresOptionToBeEnabled -> statelessRPCRequiresOptionToBeEnabled
    java.lang.String storePushCertMultipleRefs -> storePushCertMultipleRefs
    java.lang.String storePushCertOneRef -> storePushCertOneRef
    java.lang.String storePushCertReflog -> storePushCertReflog
    java.lang.String submoduleExists -> submoduleExists
    java.lang.String submoduleNameInvalid -> submoduleNameInvalid
    java.lang.String submoduleParentRemoteUrlInvalid -> submoduleParentRemoteUrlInvalid
    java.lang.String submodulePathInvalid -> submodulePathInvalid
    java.lang.String submoduleUrlInvalid -> submoduleUrlInvalid
    java.lang.String supportOnlyPackIndexVersion2 -> supportOnlyPackIndexVersion2
    java.lang.String systemConfigFileInvalid -> systemConfigFileInvalid
    java.lang.String tagAlreadyExists -> tagAlreadyExists
    java.lang.String tagNameInvalid -> tagNameInvalid
    java.lang.String tagOnRepoWithoutHEADCurrentlyNotSupported -> tagOnRepoWithoutHEADCurrentlyNotSupported
    java.lang.String timeoutMeasureFsTimestampResolution -> timeoutMeasureFsTimestampResolution
    java.lang.String transactionAborted -> transactionAborted
    java.lang.String theFactoryMustNotBeNull -> theFactoryMustNotBeNull
    java.lang.String threadInterruptedWhileRunning -> threadInterruptedWhileRunning
    java.lang.String timeIsUncertain -> timeIsUncertain
    java.lang.String timerAlreadyTerminated -> timerAlreadyTerminated
    java.lang.String tooManyCommands -> tooManyCommands
    java.lang.String tooManyFilters -> tooManyFilters
    java.lang.String tooManyIncludeRecursions -> tooManyIncludeRecursions
    java.lang.String topologicalSortRequired -> topologicalSortRequired
    java.lang.String transportExceptionBadRef -> transportExceptionBadRef
    java.lang.String transportExceptionEmptyRef -> transportExceptionEmptyRef
    java.lang.String transportExceptionInvalid -> transportExceptionInvalid
    java.lang.String transportExceptionMissingAssumed -> transportExceptionMissingAssumed
    java.lang.String transportExceptionReadRef -> transportExceptionReadRef
    java.lang.String transportNeedsRepository -> transportNeedsRepository
    java.lang.String transportProtoBundleFile -> transportProtoBundleFile
    java.lang.String transportProtoFTP -> transportProtoFTP
    java.lang.String transportProtoGitAnon -> transportProtoGitAnon
    java.lang.String transportProtoHTTP -> transportProtoHTTP
    java.lang.String transportProtoLocal -> transportProtoLocal
    java.lang.String transportProtoSFTP -> transportProtoSFTP
    java.lang.String transportProtoSSH -> transportProtoSSH
    java.lang.String transportProtoTest -> transportProtoTest
    java.lang.String transportProvidedRefWithNoObjectId -> transportProvidedRefWithNoObjectId
    java.lang.String treeEntryAlreadyExists -> treeEntryAlreadyExists
    java.lang.String treeFilterMarkerTooManyFilters -> treeFilterMarkerTooManyFilters
    java.lang.String treeWalkMustHaveExactlyTwoTrees -> treeWalkMustHaveExactlyTwoTrees
    java.lang.String truncatedHunkLinesMissingForAncestor -> truncatedHunkLinesMissingForAncestor
    java.lang.String truncatedHunkNewLinesMissing -> truncatedHunkNewLinesMissing
    java.lang.String truncatedHunkOldLinesMissing -> truncatedHunkOldLinesMissing
    java.lang.String tSizeMustBeGreaterOrEqual1 -> tSizeMustBeGreaterOrEqual1
    java.lang.String unableToCheckConnectivity -> unableToCheckConnectivity
    java.lang.String unableToCreateNewObject -> unableToCreateNewObject
    java.lang.String unableToReadFullInt -> unableToReadFullInt
    java.lang.String unableToReadFullArray -> unableToReadFullArray
    java.lang.String unableToReadPackfile -> unableToReadPackfile
    java.lang.String unableToRemovePath -> unableToRemovePath
    java.lang.String unableToWrite -> unableToWrite
    java.lang.String unableToSignCommitNoSecretKey -> unableToSignCommitNoSecretKey
    java.lang.String unauthorized -> unauthorized
    java.lang.String unencodeableFile -> unencodeableFile
    java.lang.String unexpectedAwsApiSignatureVersion -> unexpectedAwsApiSignatureVersion
    java.lang.String unexpectedCompareResult -> unexpectedCompareResult
    java.lang.String unexpectedEndOfConfigFile -> unexpectedEndOfConfigFile
    java.lang.String unexpectedEndOfInput -> unexpectedEndOfInput
    java.lang.String unexpectedEofInPack -> unexpectedEofInPack
    java.lang.String unexpectedHunkTrailer -> unexpectedHunkTrailer
    java.lang.String unexpectedOddResult -> unexpectedOddResult
    java.lang.String unexpectedPacketLine -> unexpectedPacketLine
    java.lang.String unexpectedRefReport -> unexpectedRefReport
    java.lang.String unexpectedReportLine -> unexpectedReportLine
    java.lang.String unexpectedReportLine2 -> unexpectedReportLine2
    java.lang.String unexpectedSubmoduleStatus -> unexpectedSubmoduleStatus
    java.lang.String unknownOrUnsupportedCommand -> unknownOrUnsupportedCommand
    java.lang.String unknownDIRCVersion -> unknownDIRCVersion
    java.lang.String unknownHost -> unknownHost
    java.lang.String unknownObject -> unknownObject
    java.lang.String unknownObjectInIndex -> unknownObjectInIndex
    java.lang.String unknownObjectType -> unknownObjectType
    java.lang.String unknownObjectType2 -> unknownObjectType2
    java.lang.String unknownPackExtension -> unknownPackExtension
    java.lang.String unknownPositionEncoding -> unknownPositionEncoding
    java.lang.String unknownRefStorageFormat -> unknownRefStorageFormat
    java.lang.String unknownRepositoryFormat -> unknownRepositoryFormat
    java.lang.String unknownRepositoryFormat2 -> unknownRepositoryFormat2
    java.lang.String unknownTransportCommand -> unknownTransportCommand
    java.lang.String unknownZlibError -> unknownZlibError
    java.lang.String unlockLockFileFailed -> unlockLockFileFailed
    java.lang.String unmergedPath -> unmergedPath
    java.lang.String unmergedPaths -> unmergedPaths
    java.lang.String unpackException -> unpackException
    java.lang.String unreadableCommitGraph -> unreadableCommitGraph
    java.lang.String unreadableObjectSizeIndex -> unreadableObjectSizeIndex
    java.lang.String unreadablePackIndex -> unreadablePackIndex
    java.lang.String unrecognizedPackExtension -> unrecognizedPackExtension
    java.lang.String unrecognizedRef -> unrecognizedRef
    java.lang.String unsetMark -> unsetMark
    java.lang.String unsupportedAlternates -> unsupportedAlternates
    java.lang.String unsupportedArchiveFormat -> unsupportedArchiveFormat
    java.lang.String unsupportedCommand0 -> unsupportedCommand0
    java.lang.String unsupportedCommitGraphVersion -> unsupportedCommitGraphVersion
    java.lang.String unsupportedEncryptionAlgorithm -> unsupportedEncryptionAlgorithm
    java.lang.String unsupportedEncryptionVersion -> unsupportedEncryptionVersion
    java.lang.String unsupportedGC -> unsupportedGC
    java.lang.String unsupportedMark -> unsupportedMark
    java.lang.String unsupportedObjectIdVersion -> unsupportedObjectIdVersion
    java.lang.String unsupportedObjectSizeIndexVersion -> unsupportedObjectSizeIndexVersion
    java.lang.String unsupportedOperationNotAddAtEnd -> unsupportedOperationNotAddAtEnd
    java.lang.String unsupportedPackIndexVersion -> unsupportedPackIndexVersion
    java.lang.String unsupportedPackReverseIndexVersion -> unsupportedPackReverseIndexVersion
    java.lang.String unsupportedPackVersion -> unsupportedPackVersion
    java.lang.String unsupportedReftableVersion -> unsupportedReftableVersion
    java.lang.String unsupportedRepositoryDescription -> unsupportedRepositoryDescription
    java.lang.String unsupportedSizesObjSizeIndex -> unsupportedSizesObjSizeIndex
    java.lang.String updateRequiresOldIdAndNewId -> updateRequiresOldIdAndNewId
    java.lang.String updatingConfig -> updatingConfig
    java.lang.String updatingHeadFailed -> updatingHeadFailed
    java.lang.String updatingReferences -> updatingReferences
    java.lang.String updatingRefFailed -> updatingRefFailed
    java.lang.String upstreamBranchName -> upstreamBranchName
    java.lang.String uriNotConfigured -> uriNotConfigured
    java.lang.String uriNotFound -> uriNotFound
    java.lang.String uriNotFoundWithMessage -> uriNotFoundWithMessage
    java.lang.String URINotSupported -> URINotSupported
    java.lang.String userConfigInvalid -> userConfigInvalid
    java.lang.String validatingGitModules -> validatingGitModules
    java.lang.String valueExceedsRange -> valueExceedsRange
    java.lang.String verifySignatureBad -> verifySignatureBad
    java.lang.String verifySignatureExpired -> verifySignatureExpired
    java.lang.String verifySignatureGood -> verifySignatureGood
    java.lang.String verifySignatureIssuer -> verifySignatureIssuer
    java.lang.String verifySignatureKey -> verifySignatureKey
    java.lang.String verifySignatureMade -> verifySignatureMade
    java.lang.String verifySignatureTrust -> verifySignatureTrust
    java.lang.String walkFailure -> walkFailure
    java.lang.String wantNoSpaceWithCapabilities -> wantNoSpaceWithCapabilities
    java.lang.String wantNotValid -> wantNotValid
    java.lang.String weeksAgo -> weeksAgo
    java.lang.String windowSizeMustBeLesserThanLimit -> windowSizeMustBeLesserThanLimit
    java.lang.String windowSizeMustBePowerOf2 -> windowSizeMustBePowerOf2
    java.lang.String writerAlreadyInitialized -> writerAlreadyInitialized
    java.lang.String writeTimedOut -> writeTimedOut
    java.lang.String writingNotPermitted -> writingNotPermitted
    java.lang.String writingNotSupported -> writingNotSupported
    java.lang.String writingOutCommitGraph -> writingOutCommitGraph
    java.lang.String writingObjects -> writingObjects
    java.lang.String wrongDecompressedLength -> wrongDecompressedLength
    java.lang.String wrongRepositoryState -> wrongRepositoryState
    java.lang.String year -> year
    java.lang.String years -> years
    java.lang.String years0MonthsAgo -> years0MonthsAgo
    java.lang.String yearsAgo -> yearsAgo
    java.lang.String yearsMonthsAgo -> yearsMonthsAgo
    void <init>() -> <init>
    org.eclipse.jgit.internal.JGitText get() -> get
org.eclipse.jgit.internal.revwalk.AddToBitmapFilter -> org.eclipse.jgit.internal.a.a:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder bitmap$7f48663e -> c
    void <init>(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder) -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.Object clone() -> clone
org.eclipse.jgit.internal.revwalk.AddToBitmapWithCacheFilter -> org.eclipse.jgit.internal.a.b:
    org.eclipse.jgit.internal.storage.pack.BitmapCommit cachedCommit$4cae90d9 -> c
    org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder cachedBitmap$61797f27 -> d
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder bitmap$7f48663e -> e
    void <init>(org.eclipse.jgit.internal.storage.pack.BitmapCommit,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder) -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.Object clone() -> clone
org.eclipse.jgit.internal.revwalk.AddUnseenToBitmapFilter -> org.eclipse.jgit.internal.a.c:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder seen$7f48663e -> c
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder bitmap$7f48663e -> d
    void <init>(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder,org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder) -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.Object clone() -> clone
org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter -> org.eclipse.jgit.internal.b.a.a:
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter FULL -> a
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter EMPTY -> b
    byte[] data -> c
    int offset -> d
    int length -> e
    void <clinit>() -> <clinit>
    void <init>(byte[],int,int) -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter fromPaths(java.util.Set) -> a
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter fromFile(byte[],int,int) -> a
    boolean maybeContains(byte[]) -> a
    void writeTo(java.io.ByteArrayOutputStream) -> a
org.eclipse.jgit.internal.storage.commitgraph.CommitGraph -> org.eclipse.jgit.internal.b.a.b:
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$1 EMPTY$50541b1a -> a
    void <clinit>() -> <clinit>
    int findGraphPosition(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData$CommitDataImpl getCommitData$25de14ff(int) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(int) -> b
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter getChangedPathFilter(int) -> c
org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$1 -> org.eclipse.jgit.internal.b.a.c:
    void <init>() -> <init>
    int findGraphPosition(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData$CommitDataImpl getCommitData$25de14ff(int) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(int) -> b
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter getChangedPathFilter(int) -> c
org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData -> org.eclipse.jgit.internal.b.a.d:
    org.eclipse.jgit.lib.ObjectId getTree() -> a
    int[] getParents() -> b
    long getCommitTime() -> c
    int getGeneration() -> d
    org.eclipse.jgit.attributes.FilterCommand create$1cf26583() -> e
    void write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[]) -> a
    void write$2e5bee53(org.eclipse.jgit.util.BlockList,byte[]) -> a
    java.lang.String getFromBranch() -> f
    org.eclipse.jgit.lib.ObjectId getOldId() -> g
    org.eclipse.jgit.lib.ObjectId getNewId() -> h
    org.eclipse.jgit.lib.PersonIdent getWho() -> i
    java.lang.String getComment() -> j
    org.eclipse.jgit.internal.storage.file.UnpackedObject parseCheckout$1cb8481e$71041aa5() -> k
    void signObject$7affd97a$7fa9128e$d67e35c(org.eclipse.jgit.lib.CommitBuilder) -> a
    org.eclipse.jgit.lib.GpgSignature sign$3448a757() -> l
    boolean getBoolean(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    java.lang.Enum getEnum$d2fa455(org.eclipse.jgit.lib.Config,java.lang.Enum[],java.lang.String,java.lang.String,java.lang.Enum) -> a
    int getInt(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,int) -> a
    long getLong(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,long) -> a
    long getTimeUnit(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,long,java.util.concurrent.TimeUnit) -> a
    java.nio.file.Path getPath$3ee30954(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,org.eclipse.jgit.util.FS) -> a
    java.util.ArrayList getRefSpecs$2bf42cbd(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String) -> a
    org.eclipse.jgit.revwalk.RevObject next() -> m
    boolean isSameObject$2838e5b1(java.lang.Comparable,java.lang.Comparable) -> a
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder -> org.eclipse.jgit.internal.b.a.e:
    byte[] oidFanout -> a
    byte[] oidLookup -> b
    byte[] commitData -> c
    byte[] extraList -> d
    byte[] bloomFilterIndex -> e
    byte[] bloomFilterData -> f
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder builder() -> a
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder addOidFanout(byte[]) -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder addOidLookUp(byte[]) -> b
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder addCommitData(byte[]) -> c
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder addExtraList(byte[]) -> d
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder addBloomFilterIndex(byte[]) -> e
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphBuilder addBloomFilterData(byte[]) -> f
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphV1 build$6950c179() -> b
    void assertChunkNotNull(java.lang.Object,int) -> a
    void assertChunkNotSeenYet(java.lang.Object,int) -> b
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphFormatException -> org.eclipse.jgit.internal.b.a.f:
    void <init>(java.lang.String) -> <init>
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphLoader -> org.eclipse.jgit.internal.b.a.g:
    org.slf4j.Logger LOG -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphV1 open$32c68890(java.io.File) -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphV1 read$be6c302$69fb56ff(org.eclipse.jgit.util.io.SilentFileInputStream) -> a
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphLoader$ChunkSegment -> org.eclipse.jgit.internal.b.a.h:
    int id -> a
    long offset -> b
    void <init>(int,long) -> <init>
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphV1 -> org.eclipse.jgit.internal.b.a.i:
    org.eclipse.jgit.internal.storage.commitgraph.GraphObjectIndex idx -> b
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData commitData -> c
    org.eclipse.jgit.internal.storage.commitgraph.GraphChangedPathFilterData cpfData -> d
    void <init>(org.eclipse.jgit.internal.storage.commitgraph.GraphObjectIndex,org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData,org.eclipse.jgit.internal.storage.commitgraph.GraphChangedPathFilterData) -> <init>
    int findGraphPosition(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData$CommitDataImpl getCommitData$25de14ff(int) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(int) -> b
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter getChangedPathFilter(int) -> c
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter -> org.eclipse.jgit.internal.b.a.j:
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$PathDiffCalculator PATH_DIFF_CALCULATOR -> a
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommits graphCommits -> b
    boolean generateChangedPathFilters -> c
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.commitgraph.GraphCommits,boolean) -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$Stats write(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream) -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$BloomFilterChunks computeBloomFilterChunks(org.eclipse.jgit.lib.ProgressMonitor) -> a
    long lambda$0(org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$ChunkHeader) -> a
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$BloomFilterChunks -> org.eclipse.jgit.internal.b.a.k:
    java.io.ByteArrayOutputStream index -> a
    java.io.ByteArrayOutputStream data -> b
    void <init>(java.io.ByteArrayOutputStream,java.io.ByteArrayOutputStream) -> <init>
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$ChunkHeader -> org.eclipse.jgit.internal.b.a.l:
    int id -> a
    long size -> b
    java.util.Optional data -> c
    void <init>(int,long) -> <init>
    void <init>(int,java.io.ByteArrayOutputStream) -> <init>
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$PathDiffCalculator -> org.eclipse.jgit.internal.b.a.m:
    int stepCounter -> a
    void <init>() -> <init>
    java.util.Optional changedPaths(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.revwalk.RevCommit) -> a
org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$Stats -> org.eclipse.jgit.internal.b.a.n:
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$Stats EMPTY -> a
    void <clinit>() -> <clinit>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphWriter$Stats from$64ccfb1b() -> a
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.commitgraph.GraphChangedPathFilterData -> org.eclipse.jgit.internal.b.a.o:
    byte[] bloomFilterIndex -> a
    byte[] bloomFilterData -> b
    void <init>(byte[],byte[]) -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter getChangedPathFilter(int) -> a
org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData -> org.eclipse.jgit.internal.b.a.p:
    int[] NO_PARENTS -> a
    byte[] data -> b
    byte[] extraList -> c
    void <clinit>() -> <clinit>
    void <init>(byte[],byte[]) -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData$CommitDataImpl getCommitData$25de14ff(int) -> a
    int[] findParentsForOctopusMerge(int,int) -> a
org.eclipse.jgit.internal.storage.commitgraph.GraphCommitData$CommitDataImpl -> org.eclipse.jgit.internal.b.a.q:
    org.eclipse.jgit.lib.ObjectId tree -> a
    int[] parents -> b
    long commitTime -> c
    int generation -> d
    void <init>(org.eclipse.jgit.lib.ObjectId,int[],long,int) -> <init>
    org.eclipse.jgit.lib.ObjectId getTree() -> a
    int[] getParents() -> b
    long getCommitTime() -> c
    int getGeneration() -> d
org.eclipse.jgit.internal.storage.commitgraph.GraphCommits -> org.eclipse.jgit.internal.b.a.r:
    org.eclipse.jgit.util.BlockList sortedCommits$7865b31 -> a
    org.eclipse.jgit.lib.ObjectIdOwnerMap commitPosMap -> b
    int extraEdgeCnt -> c
    org.eclipse.jgit.lib.ObjectReader objectReader -> d
    org.eclipse.jgit.internal.storage.commitgraph.GraphCommits fromWalk$39e4fd69(org.eclipse.jgit.lib.ProgressMonitor,java.util.HashSet,org.eclipse.jgit.revwalk.RevWalk) -> a
    void <init>(org.eclipse.jgit.util.BlockList,org.eclipse.jgit.lib.ObjectReader) -> <init>
    int getOidPosition(org.eclipse.jgit.revwalk.RevCommit) -> a
    int getExtraEdgeCnt() -> a
    int size() -> b
    org.eclipse.jgit.lib.ObjectReader getObjectReader() -> c
    java.util.Iterator iterator() -> iterator
org.eclipse.jgit.internal.storage.commitgraph.GraphCommits$CommitWithPosition -> org.eclipse.jgit.internal.b.a.s:
    int position -> a
    void <init>(org.eclipse.jgit.revwalk.RevCommit,int) -> <init>
org.eclipse.jgit.internal.storage.commitgraph.GraphObjectIndex -> org.eclipse.jgit.internal.b.a.t:
    int[] fanoutTable -> a
    byte[] oidLookup -> b
    long commitCnt -> c
    void <init>(byte[],byte[]) -> <init>
    int findGraphPosition(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(int) -> a
    long getCommitCnt() -> a
org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex -> org.eclipse.jgit.internal.b.b.a:
    org.eclipse.jgit.lib.ObjectIdOwnerMap bitmaps -> a
    void <init>(org.eclipse.jgit.lib.ObjectIdOwnerMap) -> <init>
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectIdOwnerMap getBitmaps() -> a
org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap -> org.eclipse.jgit.internal.b.b.b:
    java.lang.Object bitmapContainer -> a
    int flags -> b
    void <init>(org.eclipse.jgit.lib.ObjectId,com.googlecode.javaewah.EWAHCompressedBitmap,org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap,int) -> <init>
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap() -> a
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmapWithoutCaching() -> b
    int getFlags() -> c
org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$XorCompressedBitmap -> org.eclipse.jgit.internal.b.b.c:
    com.googlecode.javaewah.EWAHCompressedBitmap bitmap -> a
    org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap xorBitmap -> b
    void <init>(com.googlecode.javaewah.EWAHCompressedBitmap,org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap) -> <init>
org.eclipse.jgit.internal.storage.file.BasePackIndexWriter -> org.eclipse.jgit.internal.b.b.d:
    byte[] TOC -> a
    java.security.DigestOutputStream out -> b
    byte[] tmp -> c
    org.eclipse.jgit.util.BlockList entries$7865b31 -> d
    byte[] packChecksum -> e
    void <clinit>() -> <clinit>
    int oldestPossibleFormat$61fb9e59(org.eclipse.jgit.util.BlockList) -> a
    org.eclipse.jgit.internal.storage.file.BasePackIndexWriter createVersion$1eb2c47f(java.io.OutputStream,int) -> a
    void <init>(java.io.OutputStream) -> <init>
    void write$2e5bee53(org.eclipse.jgit.util.BlockList,byte[]) -> a
    void writeImpl() -> n
    void writeTOC$13462e() -> o
    void writeFanOutTable() -> p
    void writeChecksumFooter() -> q
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl -> org.eclipse.jgit.internal.b.b.e:
    org.eclipse.jgit.internal.storage.file.PackBitmapIndex packIndex -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$MutableBitmapIndex mutableIndex -> b
    int indexObjectCount -> c
    void <init>(org.eclipse.jgit.internal.storage.file.PackBitmapIndex) -> <init>
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder newBitmapBuilder() -> a
    int findPosition(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder newBitmapBuilder$304338c3() -> b
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap getBitmap$380e555f(org.eclipse.jgit.lib.ObjectId) -> a
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$BitmapObjectImpl -> org.eclipse.jgit.internal.b.b.f:
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset -> org.eclipse.jgit.internal.b.b.g:
    org.eclipse.jgit.internal.storage.file.InflatingBitSet inflatingBitmap -> a
    org.eclipse.jgit.internal.storage.file.PackReverseIndexFactory toAdd$3553e3b1 -> b
    void <init>() -> <init>
    void <init>(com.googlecode.javaewah.EWAHCompressedBitmap) -> <init>
    com.googlecode.javaewah.EWAHCompressedBitmap combine() -> a
    void or(com.googlecode.javaewah.EWAHCompressedBitmap) -> a
    boolean contains(int) -> a
    void set(int) -> b
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap -> org.eclipse.jgit.internal.b.b.h:
    com.googlecode.javaewah.EWAHCompressedBitmap bitmap -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl bitmapIndex -> b
    void <init>(com.googlecode.javaewah.EWAHCompressedBitmap,org.eclipse.jgit.internal.storage.file.BitmapIndexImpl) -> <init>
    com.googlecode.javaewah.IntIteratorImpl ofObjectType$24ef4825$23605ac(int) -> a
    java.util.Iterator iterator() -> iterator
    com.googlecode.javaewah.EWAHCompressedBitmap retrieveCompressed() -> a
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap$1 -> org.eclipse.jgit.internal.b.b.i:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$BitmapObjectImpl out -> a
    com.googlecode.javaewah.IntIteratorImpl cached$56e17e03$33121e2c -> b
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap this$1 -> c
    com.googlecode.javaewah.IntIteratorImpl val$commits$56e17e03$33121e2c -> d
    com.googlecode.javaewah.IntIteratorImpl val$trees$56e17e03$33121e2c -> e
    com.googlecode.javaewah.IntIteratorImpl val$blobs$56e17e03$33121e2c -> f
    com.googlecode.javaewah.IntIteratorImpl val$tags$56e17e03$33121e2c -> g
    void <init>(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap,com.googlecode.javaewah.IntIteratorImpl,com.googlecode.javaewah.IntIteratorImpl,com.googlecode.javaewah.IntIteratorImpl,com.googlecode.javaewah.IntIteratorImpl,com.googlecode.javaewah.IntIteratorImpl) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder -> org.eclipse.jgit.internal.b.b.j:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset bitset -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl bitmapIndex -> b
    void <init>(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl) -> <init>
    boolean contains(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder addObject$d3bf651(org.eclipse.jgit.revwalk.RevObject,int) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap build() -> e
    java.util.Iterator iterator() -> iterator
    int cardinality() -> b
    com.googlecode.javaewah.EWAHCompressedBitmap retrieveCompressed() -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder or$267df25a(org.eclipse.jgit.lib.BitmapIndex$Bitmap) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap build$600aaf08() -> c
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl getBitmapIndex$49f66a95() -> d
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$MutableBitmapIndex -> org.eclipse.jgit.internal.b.b.k:
    org.eclipse.jgit.lib.ObjectIdOwnerMap revMap -> a
    org.eclipse.jgit.util.BlockList revList -> b
    void <init>() -> <init>
    int findPosition(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$MutableEntry getObject(int) -> a
    int findOrInsert$59808466$69e33c3d(org.eclipse.jgit.revwalk.RevObject) -> a
org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$MutableEntry -> org.eclipse.jgit.internal.b.b.l:
    int position -> a
    void <init>(org.eclipse.jgit.revwalk.RevObject,int) -> <init>
org.eclipse.jgit.internal.storage.file.ByteArrayWindow -> org.eclipse.jgit.internal.b.b.m:
    byte[] array -> b
    void <init>(org.eclipse.jgit.internal.storage.file.Pack,long,byte[]) -> <init>
    int copy(int,byte[],int,int) -> a
    int setInput(int,java.util.zip.Inflater) -> a
    void crc32(java.util.zip.CRC32,long,int) -> a
    void write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int) -> a
    void check(java.util.zip.Inflater,byte[],long,int) -> a
org.eclipse.jgit.internal.storage.file.ByteWindow -> org.eclipse.jgit.internal.b.b.n:
    org.eclipse.jgit.internal.storage.file.Pack pack -> b
    long start -> a
    long end -> c
    void <init>(org.eclipse.jgit.internal.storage.file.Pack,long,int) -> <init>
    int size() -> a
    boolean contains(org.eclipse.jgit.internal.storage.file.Pack,long) -> a
    int copy(long,byte[],int,int) -> a
    int copy(int,byte[],int,int) -> a
    void write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int) -> a
    int setInput(long,java.util.zip.Inflater) -> a
    int setInput(int,java.util.zip.Inflater) -> a
org.eclipse.jgit.internal.storage.file.DeltaBaseCache -> org.eclipse.jgit.internal.b.b.o:
    java.lang.ref.SoftReference DEAD -> a
    int defaultMaxByteCount -> b
    int maxByteCount -> c
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot[] cache -> d
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot lruHead -> e
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot lruTail -> f
    int openByteCount -> g
    void <clinit>() -> <clinit>
    int hash(long) -> a
    void reconfigure(org.eclipse.jgit.storage.file.WindowCacheConfig) -> a
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Entry get(org.eclipse.jgit.internal.storage.file.Pack,long) -> a
    void store(org.eclipse.jgit.internal.storage.file.Pack,long,byte[],int) -> a
    void moveToHead(org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot) -> a
    void unlink(org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot) -> b
    void clearEntry(org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot) -> c
org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Entry -> org.eclipse.jgit.internal.b.b.p:
    byte[] data -> a
    int type -> b
    void <init>(byte[],int) -> <init>
org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot -> org.eclipse.jgit.internal.b.b.q:
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot lruPrev -> a
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache$Slot lruNext -> b
    org.eclipse.jgit.internal.storage.file.Pack provider -> c
    long position -> d
    int sz -> e
    java.lang.ref.SoftReference data -> f
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.file.FileCommitGraph -> org.eclipse.jgit.internal.b.b.r:
    org.slf4j.Logger LOG -> a
    java.util.concurrent.atomic.AtomicReference baseGraph -> b
    void <clinit>() -> <clinit>
    void <init>(java.io.File) -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph get() -> a
org.eclipse.jgit.internal.storage.file.FileCommitGraph$GraphSnapshot -> org.eclipse.jgit.internal.b.b.s:
    java.io.File file -> a
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> b
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph graph -> c
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,org.eclipse.jgit.internal.storage.file.FileSnapshot,org.eclipse.jgit.internal.storage.commitgraph.CommitGraphV1) -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph getCommitGraph() -> a
    org.eclipse.jgit.internal.storage.file.FileCommitGraph$GraphSnapshot refresh() -> b
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraphV1 open$32c68890(java.io.File) -> a
org.eclipse.jgit.internal.storage.file.FileObjectDatabase -> org.eclipse.jgit.internal.b.b.t:
    void <init>() -> <init>
    org.eclipse.jgit.lib.ObjectReader newReader() -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter newInserter() -> b
    void resolve$24086fc(java.util.HashSet,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    org.eclipse.jgit.lib.Config getConfig() -> c
    void selectObjectRepresentation(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    java.io.File getDirectory() -> d
    java.io.File fileFor$18b9084f(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader openObject(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> a
    long getObjectSize$73b9fdc0(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader openLooseObject(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean) -> a
    java.util.Collection getPacks() -> e
    java.util.Optional getCommitGraph() -> f
    org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter newInserter$3221133d() -> g
org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult -> org.eclipse.jgit.internal.b.b.u:
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult INSERTED -> a
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult EXISTS_PACKED -> b
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult EXISTS_LOOSE -> c
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult FAILURE -> d
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult[] values() -> a
org.eclipse.jgit.internal.storage.file.FileReftableDatabase -> org.eclipse.jgit.internal.b.b.v:
    org.eclipse.jgit.internal.storage.file.FileReftableDatabase$1 reftableDatabase$e29554f -> a
    org.eclipse.jgit.internal.storage.file.FileRepository fileRepository -> b
    org.eclipse.jgit.internal.storage.file.FileReftableStack reftableStack -> c
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository,java.io.File) -> <init>
    org.eclipse.jgit.internal.storage.reftable.ReftableReflogReader getReflogReader$4491a17e(java.lang.String) -> a
    void packRefs(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.api.PackRefsCommand) -> a
    org.eclipse.jgit.lib.RefUpdate newUpdate(java.lang.String,boolean) -> a
    org.eclipse.jgit.lib.Ref exactRef(java.lang.String) -> b
    java.util.List getRefs() -> a
    org.eclipse.jgit.util.RefMap getRefs$694ad9f4(java.lang.String) -> c
    java.util.List getAdditionalRefs() -> b
    org.eclipse.jgit.lib.Ref peel(org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.lib.ObjectIdRef doPeel$20ed47f(org.eclipse.jgit.lib.Ref) -> b
    org.eclipse.jgit.lib.Ref recreate(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref,boolean) -> a
    org.eclipse.jgit.lib.RefRename newRename(java.lang.String,java.lang.String) -> a
    boolean isNameConflicting(java.lang.String) -> d
    void close() -> c
    void create() -> d
    boolean addReftable(org.eclipse.jgit.internal.storage.file.FileReftableStack$Writer) -> a
    void lambda$0() -> e
    org.eclipse.jgit.lib.Config lambda$1() -> f
org.eclipse.jgit.internal.storage.file.FileReftableDatabase$1 -> org.eclipse.jgit.internal.b.b.w:
    org.eclipse.jgit.internal.storage.file.FileReftableDatabase this$0 -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileReftableDatabase) -> <init>
    org.eclipse.jgit.internal.storage.reftable.MergedReftable openMergedReftable() -> a
org.eclipse.jgit.internal.storage.file.FileReftableDatabase$FileRefRename -> org.eclipse.jgit.internal.b.b.x:
    org.eclipse.jgit.internal.storage.file.FileReftableDatabase this$0 -> c
    void <init>(org.eclipse.jgit.internal.storage.file.FileReftableDatabase,org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate) -> <init>
    void writeRename(org.eclipse.jgit.internal.storage.reftable.ReftableWriter) -> a
    org.eclipse.jgit.lib.RefUpdate$Result doRename() -> a
    java.lang.String lambda$0(org.eclipse.jgit.lib.Ref) -> a
org.eclipse.jgit.internal.storage.file.FileReftableDatabase$FileReftableRefUpdate -> org.eclipse.jgit.internal.b.b.y:
    org.eclipse.jgit.revwalk.RevWalk rw -> a
    org.eclipse.jgit.lib.Ref dstRef -> b
    org.eclipse.jgit.internal.storage.file.FileReftableDatabase this$0 -> c
    void <init>(org.eclipse.jgit.internal.storage.file.FileReftableDatabase,org.eclipse.jgit.lib.Ref) -> <init>
    org.eclipse.jgit.lib.RefDatabase getRefDatabase() -> a
    org.eclipse.jgit.internal.storage.file.FileRepository getRepository$70b619e2() -> b
    void unlock() -> c
    org.eclipse.jgit.lib.RefUpdate$Result update(org.eclipse.jgit.revwalk.RevWalk) -> a
    boolean tryLock(boolean) -> a
    void writeUpdate(org.eclipse.jgit.internal.storage.reftable.ReftableWriter) -> a
    org.eclipse.jgit.lib.PersonIdent getRefLogIdent() -> d
    void writeDelete(org.eclipse.jgit.internal.storage.reftable.ReftableWriter) -> b
    org.eclipse.jgit.lib.RefUpdate$Result doUpdate(org.eclipse.jgit.lib.RefUpdate$Result) -> a
    org.eclipse.jgit.lib.RefUpdate$Result doDelete(org.eclipse.jgit.lib.RefUpdate$Result) -> b
    void writeLink(org.eclipse.jgit.internal.storage.reftable.ReftableWriter) -> c
    org.eclipse.jgit.lib.RefUpdate$Result doLink(java.lang.String) -> a
org.eclipse.jgit.internal.storage.file.FileReftableStack -> org.eclipse.jgit.internal.b.b.z:
    org.eclipse.jgit.internal.storage.reftable.MergedReftable mergedReftable -> a
    java.util.ArrayList stack$7865b31 -> b
    long lastNextUpdateIndex -> c
    java.io.File stackPath -> d
    java.io.File reftableDir -> e
    java.lang.Runnable onChange -> f
    java.security.SecureRandom random -> g
    java.util.function.Supplier configSupplier -> h
    org.eclipse.jgit.internal.storage.file.FileReftableStack$CompactionStats stats -> i
    long OVERHEAD -> j
    void <clinit>() -> <clinit>
    void <init>(java.io.File,java.io.File,java.lang.Runnable,java.util.function.Supplier) -> <init>
    void reloadOnce$61fb9e66(java.util.ArrayList) -> a
    void reload() -> a
    org.eclipse.jgit.internal.storage.reftable.MergedReftable getMergedReftable() -> b
    java.util.ArrayList readTableNames$5679c1ce() -> d
    boolean isUpToDate() -> e
    void close() -> close
    long nextUpdateIndex() -> f
    java.lang.String filename(long,long) -> a
    boolean addReftable(org.eclipse.jgit.internal.storage.file.FileReftableStack$Writer) -> a
    org.eclipse.jgit.storage.pack.PackStatistics$ObjectType reftableConfig$3af03d79() -> g
    java.io.File compactLocked(int,int) -> a
    boolean compactRange(int,int) -> b
    int log(long) -> a
    void compactFully() -> c
    java.lang.String lambda$0(org.eclipse.jgit.internal.storage.file.FileReftableStack$StackEntry) -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableReader lambda$1(org.eclipse.jgit.internal.storage.file.FileReftableStack$StackEntry) -> b
    void lambda$3(org.eclipse.jgit.internal.storage.reftable.ReftableReader) -> a
    void lambda$2(org.eclipse.jgit.internal.storage.reftable.ReftableReader) -> b
    org.eclipse.jgit.internal.storage.reftable.ReftableReader lambda$4(org.eclipse.jgit.internal.storage.file.FileReftableStack$StackEntry) -> c
    boolean lambda$5(org.eclipse.jgit.internal.storage.file.FileReftableStack$Segment) -> a
    java.lang.Integer lambda$6(org.eclipse.jgit.internal.storage.file.FileReftableStack$Segment) -> b
org.eclipse.jgit.internal.storage.file.FileReftableStack$CompactionStats -> org.eclipse.jgit.internal.b.b.A:
    long tables -> a
    long bytes -> b
    int attempted -> c
    int failed -> d
    long refCount -> e
    long logCount -> f
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.file.FileReftableStack$Segment -> org.eclipse.jgit.internal.b.b.B:
    int log -> a
    long bytes -> b
    int start -> c
    int end -> d
    void <init>(byte) -> <init>
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.eclipse.jgit.internal.storage.file.FileReftableStack$StackEntry -> org.eclipse.jgit.internal.b.b.C:
    java.lang.String name -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableReader reftableReader -> b
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.file.FileReftableStack$Writer -> org.eclipse.jgit.internal.b.b.D:
    void call(org.eclipse.jgit.internal.storage.reftable.ReftableWriter) -> call
org.eclipse.jgit.internal.storage.file.FileRepository -> org.eclipse.jgit.internal.b.b.E:
    org.slf4j.Logger LOG -> a
    org.eclipse.jgit.storage.file.FileBasedConfig repoConfig -> b
    org.eclipse.jgit.lib.RefDatabase refs -> c
    org.eclipse.jgit.internal.storage.file.ObjectDirectory objectDatabase -> d
    java.lang.Object snapshotLock -> e
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> f
    void <clinit>() -> <clinit>
    void <init>(java.io.File) -> <init>
    void <init>(org.eclipse.jgit.lib.BaseRepositoryBuilder) -> <init>
    void loadRepoConfig() -> d
    void create(boolean) -> create
    java.io.File getObjectsDirectory() -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectory getObjectDatabase() -> b
    org.eclipse.jgit.lib.RefDatabase getRefDatabase() -> getRefDatabase
    java.lang.String getIdentifier() -> getIdentifier
    org.eclipse.jgit.storage.file.FileBasedConfig getConfig() -> c
    java.lang.String getGitwebDescription() -> getGitwebDescription
    void setGitwebDescription(java.lang.String) -> setGitwebDescription
    java.io.File descriptionFile() -> e
    java.util.Set getAdditionalHaves() -> getAdditionalHaves
    java.util.HashSet getAdditionalHaves$40b97519(java.util.Set) -> a
    void scanForRepoChanges() -> scanForRepoChanges
    void notifyIndexChanged(boolean) -> notifyIndexChanged
    org.eclipse.jgit.lib.ReflogReader getReflogReader(java.lang.String) -> getReflogReader
    org.eclipse.jgit.lib.ReflogReader getReflogReader(org.eclipse.jgit.lib.Ref) -> getReflogReader
    org.eclipse.jgit.attributes.AttributesNodeProvider createAttributesNodeProvider() -> createAttributesNodeProvider
    void autoGC(org.eclipse.jgit.lib.ProgressMonitor) -> autoGC
    org.eclipse.jgit.lib.StoredConfig getConfig() -> getConfig
    org.eclipse.jgit.lib.ObjectDatabase getObjectDatabase() -> getObjectDatabase
org.eclipse.jgit.internal.storage.file.FileRepository$AttributesNodeProviderImpl -> org.eclipse.jgit.internal.b.b.F:
    org.eclipse.jgit.hooks.Hooks infoAttributesNode$7da53a12 -> a
    org.eclipse.jgit.hooks.Hooks globalAttributesNode$7da53a12 -> b
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    org.eclipse.jgit.hooks.Hooks getInfoAttributesNode$3c128193() -> a
    org.eclipse.jgit.hooks.Hooks getGlobalAttributesNode$3c128193() -> b
    void loadRulesFromFile$7174d1c2(org.eclipse.jgit.hooks.Hooks,java.io.File) -> a
org.eclipse.jgit.internal.storage.file.FileSnapshot -> org.eclipse.jgit.internal.b.b.G:
    org.slf4j.Logger LOG -> c
    java.time.Instant UNKNOWN_TIME -> d
    java.lang.Object MISSING_FILEKEY -> e
    java.time.format.DateTimeFormatter dateFmt -> f
    org.eclipse.jgit.internal.storage.file.FileSnapshot DIRTY -> a
    org.eclipse.jgit.internal.storage.file.FileSnapshot$1 MISSING_FILE$68974d86 -> b
    java.time.Instant lastModified -> g
    java.time.Instant lastRead -> h
    boolean cannotBeRacilyClean -> i
    long size -> j
    org.eclipse.jgit.util.FS$FileStoreAttributes fileStoreAttributeCache -> k
    boolean useConfig -> l
    java.lang.Object fileKey -> m
    java.io.File file -> n
    boolean sizeChanged -> o
    boolean fileKeyChanged -> p
    boolean lastModifiedChanged -> q
    boolean wasRacyClean -> r
    long delta -> s
    long racyThreshold -> t
    void <clinit>() -> <clinit>
    org.eclipse.jgit.internal.storage.file.FileSnapshot save(java.io.File) -> a
    org.eclipse.jgit.internal.storage.file.FileSnapshot saveNoConfig(java.io.File) -> b
    java.lang.Object getFileKey(java.nio.file.attribute.BasicFileAttributes) -> a
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,boolean) -> <init>
    void <init>(java.time.Instant,java.time.Instant,long,java.time.Duration,java.lang.Object) -> <init>
    java.time.Instant lastModifiedInstant() -> a
    long size() -> b
    boolean isModified(java.io.File) -> c
    void setClean(org.eclipse.jgit.internal.storage.file.FileSnapshot) -> a
    void waitUntilNotRacy() -> c
    boolean equals(org.eclipse.jgit.internal.storage.file.FileSnapshot) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean wasSizeChanged() -> d
    boolean wasFileKeyChanged() -> e
    boolean wasLastModifiedRacilyClean() -> f
    long lastDelta() -> g
    long lastRacyThreshold() -> h
    java.lang.String toString() -> toString
    boolean isRacyClean(java.time.Instant) -> a
    long getEffectiveRacyThreshold() -> i
    org.eclipse.jgit.util.FS$FileStoreAttributes fileStoreAttributeCache() -> j
org.eclipse.jgit.internal.storage.file.FileSnapshot$1 -> org.eclipse.jgit.internal.b.b.H:
    void <init>(java.time.Instant,java.time.Instant,java.time.Duration,java.lang.Object) -> <init>
    boolean isModified(java.io.File) -> c
org.eclipse.jgit.internal.storage.file.GC -> org.eclipse.jgit.internal.b.b.I:
    org.slf4j.Logger LOG -> a
    java.util.regex.Pattern PATTERN_LOOSE_OBJECT -> b
    java.util.Set PARENT_EXTS -> c
    java.util.Set CHILD_EXTS -> d
    org.eclipse.jgit.internal.storage.file.FileRepository repo -> e
    org.eclipse.jgit.lib.ProgressMonitor pm -> f
    long expireAgeMillis -> g
    java.util.Date expire -> h
    long packExpireAgeMillis -> i
    java.util.Date packExpire -> j
    org.eclipse.jgit.storage.pack.PackConfig pconfig -> k
    java.util.List lastPackedRefs$5036ee31 -> l
    long lastRepackTime -> m
    boolean automatic -> n
    boolean background -> o
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    java.util.concurrent.CompletableFuture gc() -> a
    java.util.List doGc$6d99338e() -> c
    void removeOldPack(org.eclipse.jgit.internal.storage.file.PackFile,int) -> a
    void prunePack(org.eclipse.jgit.internal.storage.file.PackFile) -> a
    long getExpireDate() -> d
    java.lang.String getPruneExpireStr() -> e
    void removeReferenced$6d7d7752(java.util.HashMap,org.eclipse.jgit.revwalk.ObjectWalk) -> a
    java.util.ArrayList repack$6d99338e() -> f
    boolean canBeSafelyDeleted(java.nio.file.Path,java.time.Instant) -> a
    void deleteDir(java.nio.file.Path) -> a
    boolean isDirectory(java.nio.file.Path) -> b
    void delete(java.nio.file.Path) -> c
    java.util.Optional toPackFileWithValidExt(java.nio.file.Path) -> d
    java.util.Set listRefLogObjects(org.eclipse.jgit.lib.Ref,long) -> a
    java.util.List getAllRefs$6d99338e() -> g
    java.util.Set listNonHEADIndexObjects() -> h
    org.eclipse.jgit.internal.storage.file.Pack writePack$7089f170(java.util.HashSet,java.util.Set,java.util.Set,java.util.Set,java.util.HashSet,java.util.ArrayList,boolean) -> a
    void checkCancelled() -> i
    org.eclipse.jgit.internal.storage.file.GC setProgressMonitor(org.eclipse.jgit.lib.ProgressMonitor) -> a
    void setAuto$1385ff() -> b
    void setBackground(boolean) -> a
    boolean tooManyLooseObjects() -> j
    java.util.Collection lambda$0(org.eclipse.jgit.internal.storage.file.GcLog) -> a
    void lambda$3(java.time.Instant,java.nio.file.Path) -> a
    boolean lambda$16(java.nio.file.Path) -> e
    boolean lambda$5(java.time.Instant,java.nio.file.Path) -> b
    boolean lambda$12(java.util.Set,org.eclipse.jgit.internal.storage.file.PackFile) -> a
    void lambda$13(java.time.Instant,java.nio.file.Path) -> c
    int lambda$14(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt) -> a
    boolean lambda$15(java.nio.file.Path) -> f
org.eclipse.jgit.internal.storage.file.GC$PidLock -> org.eclipse.jgit.internal.b.b.J:
    java.nio.file.Path pidFile -> a
    org.eclipse.jgit.util.FS$LockToken token -> b
    java.nio.channels.FileLock lock -> c
    java.io.RandomAccessFile f -> d
    java.nio.channels.FileChannel channel -> e
    org.eclipse.jgit.internal.util.ShutdownHook$Listener shutdownListener -> f
    void <init>(org.eclipse.jgit.internal.storage.file.GC) -> <init>
    boolean lock() -> a
    void gcAlreadyRunning() -> b
    java.lang.String getHostName() -> c
    void close() -> close
org.eclipse.jgit.internal.storage.file.GcLog -> org.eclipse.jgit.internal.b.b.K:
    org.eclipse.jgit.internal.storage.file.FileRepository repo -> a
    java.io.File logFile -> b
    org.eclipse.jgit.internal.storage.file.LockFile lock -> c
    java.time.Instant gcLogExpire -> d
    boolean nonEmpty -> e
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    boolean autoGcBlockedByOldLockFile() -> d
    boolean lock() -> a
    void unlock() -> b
    boolean commit() -> c
    void write(java.lang.String) -> a
org.eclipse.jgit.internal.storage.file.GlobalAttributesNode -> org.eclipse.jgit.internal.b.b.L:
    org.eclipse.jgit.internal.storage.file.FileRepository repository$4caa7901 -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
org.eclipse.jgit.internal.storage.file.InflatingBitSet -> org.eclipse.jgit.internal.b.b.M:
    long[] EMPTY -> a
    com.googlecode.javaewah.EWAHCompressedBitmap bitmap -> b
    com.googlecode.javaewah.IntIteratorImpl iterator$56e17e03$33121e2c -> c
    long[] inflated -> d
    int nextPosition -> e
    int sizeInBits -> f
    void <clinit>() -> <clinit>
    void <init>(com.googlecode.javaewah.EWAHCompressedBitmap) -> <init>
    void <init>(com.googlecode.javaewah.EWAHCompressedBitmap,long[]) -> <init>
    boolean contains(int) -> a
    org.eclipse.jgit.internal.storage.file.InflatingBitSet or(com.googlecode.javaewah.EWAHCompressedBitmap) -> a
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap() -> a
org.eclipse.jgit.internal.storage.file.InfoAttributesNode -> org.eclipse.jgit.internal.b.b.N:
    org.eclipse.jgit.internal.storage.file.FileRepository repository$4caa7901 -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
org.eclipse.jgit.internal.storage.file.LargePackedWholeObject -> org.eclipse.jgit.internal.b.b.O:
    int type -> a
    long size -> b
    long objectOffset -> c
    int headerLength -> d
    org.eclipse.jgit.internal.storage.file.Pack pack -> e
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase db -> f
    void <init>(int,long,long,int,org.eclipse.jgit.internal.storage.file.Pack,org.eclipse.jgit.internal.storage.file.FileObjectDatabase) -> <init>
    int getType() -> a
    long getSize() -> b
    boolean isLarge() -> c
    byte[] getCachedBytes() -> d
    org.eclipse.jgit.lib.ObjectStream openStream() -> e
    org.eclipse.jgit.lib.ObjectId getObjectId() -> f
org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation -> org.eclipse.jgit.internal.b.b.P:
    org.eclipse.jgit.internal.storage.file.Pack pack -> a
    long offset -> b
    long length -> c
    long baseOffset -> d
    org.eclipse.jgit.lib.ObjectId baseId -> e
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation$Delta newDelta$714218a8(org.eclipse.jgit.internal.storage.file.Pack,long,long,org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation$Delta newDelta$4f6e4afd(org.eclipse.jgit.internal.storage.file.Pack,long,long,long) -> a
    int getWeight() -> a
    org.eclipse.jgit.lib.ObjectId getDeltaBase() -> b
org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation$1 -> org.eclipse.jgit.internal.b.b.Q:
    void <init>() -> <init>
    int getFormat() -> c
org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation$Delta -> org.eclipse.jgit.internal.b.b.R:
    void <init>() -> <init>
    int getFormat() -> c
org.eclipse.jgit.internal.storage.file.LocalObjectToPack -> org.eclipse.jgit.internal.b.b.S:
    org.eclipse.jgit.internal.storage.file.Pack pack -> a
    long offset -> b
    long length -> c
    void <init>(org.eclipse.jgit.revwalk.RevObject,int) -> <init>
    void clearReuseAsIs() -> a
    void select$5b1de267$26f4b05a(org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation) -> a
org.eclipse.jgit.internal.storage.file.LockFile -> org.eclipse.jgit.internal.b.b.T:
    org.slf4j.Logger LOG -> b
    java.io.FilenameFilter FILTER -> a
    java.io.File ref -> c
    java.io.File lck -> d
    boolean haveLck -> e
    java.io.FileOutputStream os -> f
    boolean needSnapshot -> g
    boolean fsync -> h
    boolean isAppend -> i
    boolean written -> j
    boolean snapshotNoConfig -> k
    org.eclipse.jgit.internal.storage.file.FileSnapshot commitSnapshot -> l
    org.eclipse.jgit.util.FS$LockToken token -> m
    org.eclipse.jgit.internal.util.ShutdownHook$Listener shutdownListener -> n
    void <clinit>() -> <clinit>
    void <init>(java.io.File) -> <init>
    boolean lock() -> a
    org.eclipse.jgit.util.FS$LockToken createLockFileWithRetry() -> m
    org.eclipse.jgit.util.FS$LockToken createLockFile() -> n
    boolean lockForAppend() -> b
    java.io.FileOutputStream getStream() -> o
    void write(org.eclipse.jgit.lib.ObjectId) -> a
    void write(byte[]) -> a
    org.eclipse.jgit.internal.storage.file.LockFile$1 getOutputStream$75f818f3() -> c
    void requireLock() -> d
    void setNeedStatInformation$1385ff() -> e
    void setNeedSnapshot$1385ff() -> f
    void setNeedSnapshotNoConfig$1385ff() -> g
    void setFSync(boolean) -> a
    void waitForStatChange() -> h
    boolean commit() -> i
    void closeToken() -> p
    void saveStatInformation() -> q
    org.eclipse.jgit.internal.storage.file.FileSnapshot getCommitSnapshot() -> j
    void createCommitSnapshot() -> k
    void unlock() -> l
    java.lang.String toString() -> toString
    boolean lambda$0(java.io.File,java.lang.String) -> a
org.eclipse.jgit.internal.storage.file.LockFile$1 -> org.eclipse.jgit.internal.b.b.U:
    java.io.OutputStream out -> a
    boolean closed -> b
    org.eclipse.jgit.internal.storage.file.LockFile this$0 -> c
    void <init>(org.eclipse.jgit.internal.storage.file.LockFile) -> <init>
    java.io.OutputStream get() -> a
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void write(int) -> write
    void close() -> close
org.eclipse.jgit.internal.storage.file.LooseObjects -> org.eclipse.jgit.internal.b.b.V:
    org.slf4j.Logger LOG -> a
    java.io.File directory -> b
    org.eclipse.jgit.internal.storage.file.UnpackedObjectCache unpackedObjectCache -> c
    boolean trustFolderStat -> d
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config,java.io.File) -> <init>
    java.io.File getDirectory() -> a
    void create() -> b
    void close() -> c
    java.lang.String toString() -> toString
    boolean hasCached(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean has(org.eclipse.jgit.lib.AnyObjectId) -> b
    boolean hasWithoutRefresh(org.eclipse.jgit.lib.AnyObjectId) -> d
    boolean resolve$45cfe57d(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader getObjectLoader(org.eclipse.jgit.internal.storage.file.WindowCursor,java.io.File,org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader getObjectLoaderWithoutRefresh(org.eclipse.jgit.internal.storage.file.WindowCursor,java.io.File,org.eclipse.jgit.lib.AnyObjectId) -> b
    long getSize(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> b
    long getSizeWithoutRefresh(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> c
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult insert(java.io.File,org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult tryMove(java.io.File,java.io.File,org.eclipse.jgit.lib.ObjectId) -> a
    java.io.File fileFor(org.eclipse.jgit.lib.AnyObjectId) -> c
org.eclipse.jgit.internal.storage.file.ObjectDirectory -> org.eclipse.jgit.internal.b.b.W:
    org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle handle -> a
    org.eclipse.jgit.lib.Config config -> b
    java.io.File objects -> c
    java.io.File infoDirectory -> d
    org.eclipse.jgit.internal.storage.file.LooseObjects loose -> e
    org.eclipse.jgit.internal.storage.file.PackDirectory packed -> f
    org.eclipse.jgit.internal.storage.file.PackDirectory preserved -> g
    java.io.File alternatesFile -> h
    org.eclipse.jgit.internal.storage.file.FileCommitGraph fileCommitGraph -> i
    org.eclipse.jgit.util.FS fs -> j
    java.util.concurrent.atomic.AtomicReference alternates -> k
    java.io.File shallowFile -> l
    org.eclipse.jgit.internal.storage.file.FileSnapshot shallowFileSnapshot -> m
    java.util.Set shallowCommitsIds -> n
    void <init>(org.eclipse.jgit.lib.Config,java.io.File,java.io.File[],org.eclipse.jgit.util.FS,java.io.File) -> <init>
    java.io.File getDirectory() -> d
    java.io.File getPackDirectory() -> h
    java.io.File getPreservedDirectory() -> i
    boolean exists() -> j
    void create() -> k
    org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter newInserter() -> b
    void close() -> close
    java.util.Collection getPacks() -> e
    java.util.Optional getCommitGraph() -> f
    org.eclipse.jgit.internal.storage.file.Pack openPack$3d539bc3(org.eclipse.jgit.internal.storage.file.PackFile) -> a
    java.lang.String toString() -> toString
    boolean has(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean hasPackedOrLooseInSelfOrAlternate(org.eclipse.jgit.lib.AnyObjectId) -> b
    boolean hasPackedInSelfOrAlternate(org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> a
    boolean hasLooseInSelfOrAlternate(org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> b
    boolean hasPackedObject(org.eclipse.jgit.lib.AnyObjectId) -> c
    void resolve$24086fc(java.util.HashSet,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    void resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,java.util.Set) -> a
    org.eclipse.jgit.lib.ObjectLoader openObject(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader openObjectWithoutRestoring(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> c
    org.eclipse.jgit.lib.ObjectLoader openPackedFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> a
    org.eclipse.jgit.lib.ObjectLoader openLooseFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> b
    org.eclipse.jgit.lib.ObjectLoader openPackedObject(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> d
    org.eclipse.jgit.lib.ObjectLoader openLooseObject(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> b
    long getObjectSize$73b9fdc0(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.ObjectId) -> a
    long getObjectSizeWithoutRestoring$73b9fdc0(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.ObjectId) -> b
    long getPackedSizeFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> c
    long getLooseSizeFromSelfOrAlternate(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> d
    void selectObjectRepresentation(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    void selectObjectRepresentation(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.file.WindowCursor,java.util.Set) -> a
    boolean restoreFromSelfOrAlternate(org.eclipse.jgit.lib.AnyObjectId,java.util.Set) -> c
    boolean restoreFromSelf(org.eclipse.jgit.lib.AnyObjectId) -> d
    boolean restore(org.eclipse.jgit.internal.storage.file.PackFile) -> c
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase$InsertLooseObjectResult insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean) -> a
    org.eclipse.jgit.lib.Config getConfig() -> c
    java.util.Set getShallowCommits() -> l
    void closeAllPackHandles$4ad1f42c(org.eclipse.jgit.internal.storage.file.PackFile) -> b
    org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle[] myAlternates() -> m
    java.util.Set addMe(java.util.Set) -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle[] loadAlternates() -> o
    java.io.BufferedReader open(java.io.File) -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle openAlternate(java.io.File) -> b
    java.io.File fileFor$18b9084f(org.eclipse.jgit.lib.ObjectId) -> a
    java.io.File getInfoDirectory() -> n
    org.eclipse.jgit.lib.ObjectReader newReader() -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter newInserter$3221133d() -> g
    java.util.HashSet lambda$0(java.io.File) -> c
org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle -> org.eclipse.jgit.internal.b.b.X:
    org.eclipse.jgit.internal.storage.file.ObjectDirectory db -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle$Id id -> b
    void <init>(org.eclipse.jgit.internal.storage.file.ObjectDirectory) -> <init>
    void close() -> a
    org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle$Id getId() -> b
org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateHandle$Id -> org.eclipse.jgit.internal.b.b.Y:
    java.lang.String alternateId -> a
    void <init>(java.io.File) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.eclipse.jgit.internal.storage.file.ObjectDirectory$AlternateRepository -> org.eclipse.jgit.internal.b.b.Z:
    org.eclipse.jgit.internal.storage.file.FileRepository repository -> b
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    void close() -> a
org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter -> org.eclipse.jgit.internal.b.b.aa:
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase db -> a
    org.eclipse.jgit.internal.storage.file.WriteConfig config -> b
    java.util.zip.Deflater deflate -> c
    int[] $SWITCH_TABLE$org$eclipse$jgit$internal$storage$file$FileObjectDatabase$InsertLooseObjectResult -> d
    void <init>(org.eclipse.jgit.internal.storage.file.FileObjectDatabase,org.eclipse.jgit.lib.Config) -> <init>
    org.eclipse.jgit.lib.ObjectId insert$5db8e6f2(int,byte[],int) -> a
    org.eclipse.jgit.lib.ObjectId insert$370afc28(int,byte[],int,boolean) -> a
    org.eclipse.jgit.lib.ObjectId insert(int,long,java.io.InputStream) -> a
    org.eclipse.jgit.lib.ObjectId insert(int,long,java.io.InputStream,boolean) -> a
    org.eclipse.jgit.lib.ObjectId insertOneObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean) -> a
    org.eclipse.jgit.internal.storage.file.WindowCursor newReader$13597046() -> a
    void close() -> close
    java.io.File toTemp(org.eclipse.jgit.util.sha1.SHA1,int,long,java.io.InputStream) -> a
    java.io.File toTemp$76f45f68(int,byte[],int) -> c
    void writeHeader$3fb47a08(java.io.FilterOutputStream,int,long) -> a
    java.io.File newTempFile() -> d
    java.util.zip.DeflaterOutputStream compress(java.io.OutputStream) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$internal$storage$file$FileObjectDatabase$InsertLooseObjectResult() -> e
org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter$SHA1OutputStream -> org.eclipse.jgit.internal.b.b.ab:
    org.eclipse.jgit.util.sha1.SHA1 md -> a
    void <init>(java.util.zip.DeflaterOutputStream,org.eclipse.jgit.util.sha1.SHA1) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
org.eclipse.jgit.internal.storage.file.Pack -> org.eclipse.jgit.internal.b.b.ac:
    org.slf4j.Logger LOG -> d
    java.util.Comparator SORT -> a
    boolean useStrongRefs -> e
    org.eclipse.jgit.internal.storage.file.PackFile packFile -> f
    org.eclipse.jgit.internal.storage.file.PackFile keepFile -> g
    int hash -> b
    java.io.RandomAccessFile fd -> h
    java.lang.Object readLock -> i
    long length -> c
    int activeWindows -> j
    int activeCopyRawData -> k
    java.time.Instant packLastModified -> l
    org.eclipse.jgit.internal.storage.file.PackFileSnapshot fileSnapshot -> m
    boolean invalid -> n
    java.lang.Exception invalidatingCause -> o
    org.eclipse.jgit.internal.storage.file.PackFile bitmapIdxFile -> p
    java.util.concurrent.atomic.AtomicInteger transientErrorCount -> q
    byte[] packChecksum -> r
    org.eclipse.jgit.internal.util.Optionally loadedIdx -> s
    org.eclipse.jgit.internal.util.Optionally reverseIdx -> t
    org.eclipse.jgit.internal.util.Optionally bitmapIdx -> u
    org.eclipse.jgit.util.LongList corruptObjects -> v
    boolean $assertionsDisabled -> w
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config,org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile) -> <init>
    org.eclipse.jgit.internal.storage.file.PackIndex idx() -> m
    org.eclipse.jgit.internal.storage.file.PackFile getPackFile() -> a
    org.eclipse.jgit.internal.storage.file.PackIndex getIndex() -> b
    java.lang.String getPackName() -> c
    boolean hasObject(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean shouldBeKept() -> d
    org.eclipse.jgit.lib.ObjectLoader get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> a
    void resolve$45cfe581(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    void close() -> e
    java.util.Iterator iterator() -> iterator
    org.eclipse.jgit.lib.ObjectId findObjectForOffset(long) -> a
    org.eclipse.jgit.internal.storage.file.PackFileSnapshot getFileSnapshot() -> f
    byte[] decompress(long,int,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    void copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    boolean invalid() -> g
    int incrementTransientErrorCount() -> h
    void resetTransientErrorCount() -> i
    void readFully$6a5dea4(long,byte[],int,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    void beginCopyAsIs() -> n
    void endCopyAsIs() -> o
    boolean beginWindowCache() -> j
    boolean endWindowCache() -> k
    void doOpen() -> p
    void openFail(boolean,java.lang.Exception) -> a
    void doClose() -> q
    org.eclipse.jgit.internal.storage.file.ByteArrayWindow read(long,int) -> a
    void onOpenPack() -> r
    org.eclipse.jgit.lib.ObjectLoader load(org.eclipse.jgit.internal.storage.file.WindowCursor,long) -> a
    long getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> b
    long getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long) -> b
    org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation representation$4770645d(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    org.eclipse.jgit.internal.storage.file.PackBitmapIndex getBitmapIndex() -> l
    void refreshBitmapIndex(org.eclipse.jgit.internal.storage.file.PackFile) -> a
    org.eclipse.jgit.internal.storage.file.PackReverseIndex getReverseIdx() -> s
    boolean isCorrupt(long) -> b
    void setCorrupt(long) -> c
    java.lang.String toString() -> toString
    org.eclipse.jgit.internal.util.Optionally optionally(java.lang.Object) -> a
    int lambda$0(org.eclipse.jgit.internal.storage.file.Pack,org.eclipse.jgit.internal.storage.file.Pack) -> a
    org.eclipse.jgit.internal.storage.file.PackIndex lambda$1() -> t
org.eclipse.jgit.internal.storage.file.Pack$Delta -> org.eclipse.jgit.internal.b.b.ad:
    org.eclipse.jgit.internal.storage.file.Pack$Delta next -> a
    long deltaPos -> b
    int deltaSize -> c
    int hdrLen -> d
    long basePos -> e
    void <init>(org.eclipse.jgit.internal.storage.file.Pack$Delta,long,int,int,long) -> <init>
org.eclipse.jgit.internal.storage.file.PackBitmapIndex -> org.eclipse.jgit.internal.b.b.ae:
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1 open$d2a3958$17c90a4e(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex) -> a
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1 read$189f083a(org.eclipse.jgit.util.io.SilentFileInputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex) -> a
    byte[] getPackChecksum() -> b
    int findPosition(org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.lib.ObjectId getObject(int) -> a
    com.googlecode.javaewah.EWAHCompressedBitmap ofObjectType(com.googlecode.javaewah.EWAHCompressedBitmap,int) -> a
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap(org.eclipse.jgit.lib.AnyObjectId) -> a
    int getObjectCount() -> c
org.eclipse.jgit.internal.storage.file.PackBitmapIndex$SupplierWithIOException -> org.eclipse.jgit.internal.b.b.af:
    java.lang.Object get() -> get
org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder -> org.eclipse.jgit.internal.b.b.ag:
    com.googlecode.javaewah.EWAHCompressedBitmap commits -> a
    com.googlecode.javaewah.EWAHCompressedBitmap trees -> b
    com.googlecode.javaewah.EWAHCompressedBitmap blobs -> c
    com.googlecode.javaewah.EWAHCompressedBitmap tags -> d
    org.eclipse.jgit.util.BlockList byOffset -> e
    java.util.ArrayDeque bitmapsToWriteXorBuffer -> f
    java.util.ArrayList bitmapsToWrite$7865b31 -> g
    org.eclipse.jgit.lib.ObjectIdOwnerMap positionEntries -> h
    void <init>(org.eclipse.jgit.util.BlockList) -> <init>
    void addBitmap$1aaad954(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.BitmapIndex$Bitmap,int) -> a
    void processBitmapForWrite$67b05a8e(org.eclipse.jgit.internal.storage.pack.BitmapCommit,org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap,int) -> a
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$StoredEntry generateStoredEntry(org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap) -> a
    com.googlecode.javaewah.EWAHCompressedBitmap ofObjectType(com.googlecode.javaewah.EWAHCompressedBitmap,int) -> a
    int findPosition(org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.lib.ObjectId getObject(int) -> a
    com.googlecode.javaewah.EWAHCompressedBitmap getCommits() -> d
    com.googlecode.javaewah.EWAHCompressedBitmap getTrees() -> e
    com.googlecode.javaewah.EWAHCompressedBitmap getBlobs() -> f
    com.googlecode.javaewah.EWAHCompressedBitmap getTags() -> g
    int getBitmapCount() -> h
    void resetBitmaps(int) -> b
    int getObjectCount() -> c
    java.util.ArrayList getCompressedBitmaps$5679c1ce() -> i
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap(org.eclipse.jgit.lib.AnyObjectId) -> a
    int lambda$0(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$PositionEntry -> org.eclipse.jgit.internal.b.b.ah:
    int idxPosition -> a
    int ridxPosition -> b
    void <init>(org.eclipse.jgit.lib.AnyObjectId,int) -> <init>
org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$StoredEntry -> org.eclipse.jgit.internal.b.b.ai:
    long idxPosition -> a
    com.googlecode.javaewah.EWAHCompressedBitmap bitmap -> b
    int xorOffset -> c
    int flags -> d
    void <init>(long,com.googlecode.javaewah.EWAHCompressedBitmap,int,int) -> <init>
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap() -> a
    int getXorOffset() -> b
    int getFlags() -> c
    long getIdxPosition() -> d
org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper -> org.eclipse.jgit.internal.b.b.aj:
    org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex oldPackIndex -> b
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder newPackIndex$180aafe6 -> a
    org.eclipse.jgit.internal.storage.file.PackReverseIndexFactory inflated$3553e3b1 -> c
    int[] prevToNewMapping -> d
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper newPackBitmapIndex$1318e87d$5f9bd898(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl,org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder) -> a
    void <init>(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder) -> <init>
    void <init>(org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex,org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder) -> <init>
    int findPosition(org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.lib.ObjectId getObject(int) -> a
    int getObjectCount() -> c
    com.googlecode.javaewah.EWAHCompressedBitmap ofObjectType(com.googlecode.javaewah.EWAHCompressedBitmap,int) -> a
    java.util.Iterator iterator() -> iterator
    com.googlecode.javaewah.EWAHCompressedBitmap getBitmap(org.eclipse.jgit.lib.AnyObjectId) -> a
org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1 -> org.eclipse.jgit.internal.b.b.ak:
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$Entry entry -> a
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper this$0 -> b
    java.util.Iterator val$it -> c
    void <init>(org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper,java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$Entry -> org.eclipse.jgit.internal.b.b.al:
    int flags -> a
    void <init>(org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap,int) -> <init>
    int getFlags() -> a
org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1 -> org.eclipse.jgit.internal.b.b.am:
    byte[] MAGIC -> a
    byte[] packChecksum -> b
    org.eclipse.jgit.internal.storage.file.PackIndex packIndex -> c
    org.eclipse.jgit.internal.storage.file.PackReverseIndex reverseIndex -> d
    com.googlecode.javaewah.EWAHCompressedBitmap commits -> e
    com.googlecode.javaewah.EWAHCompressedBitmap trees -> f
    com.googlecode.javaewah.EWAHCompressedBitmap blobs -> g
    com.googlecode.javaewah.EWAHCompressedBitmap tags -> h
    org.eclipse.jgit.lib.ObjectIdOwnerMap bitmaps -> i
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.util.io.SilentFileInputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex) -> <init>
    void <init>(org.eclipse.jgit.util.io.SilentFileInputStream,org.eclipse.jgit.internal.storage.file.PackBitmapIndex$SupplierWithIOException,org.eclipse.jgit.internal.storage.file.PackBitmapIndex$SupplierWithIOException) -> <init>
    int findPosition(org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.lib.ObjectId getObject(int) -> a
    int getObjectCount() -> c
    com.googlecode.javaewah.EWAHCompressedBitmap ofObjectType(com.googlecode.javaewah.EWAHCompressedBitmap,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    byte[] getPackChecksum() -> b
    com.googlecode.javaewah.EWAHCompressedBitmap readBitmap$645caa5b(org.eclipse.jgit.internal.storage.file.SimpleDataInput) -> a
    org.eclipse.jgit.internal.storage.file.PackIndex lambda$0(org.eclipse.jgit.internal.storage.file.PackIndex) -> a
    org.eclipse.jgit.internal.storage.file.PackReverseIndex lambda$1(org.eclipse.jgit.internal.storage.file.PackReverseIndex) -> a
org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1$1 -> org.eclipse.jgit.internal.b.b.an:
    java.util.concurrent.ThreadFactory baseFactory -> a
    java.util.concurrent.atomic.AtomicInteger threadNumber -> b
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1$IdxPositionBitmap -> org.eclipse.jgit.internal.b.b.ao:
    int nthObjectId -> a
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1$IdxPositionBitmap xorIdxPositionBitmap -> b
    com.googlecode.javaewah.EWAHCompressedBitmap bitmap -> c
    int flags -> d
    org.eclipse.jgit.internal.storage.file.BasePackBitmapIndex$StoredBitmap sb -> e
    void <init>(int,org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1$IdxPositionBitmap,com.googlecode.javaewah.EWAHCompressedBitmap,int) -> <init>
org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1 -> org.eclipse.jgit.internal.b.b.ap:
    java.security.DigestOutputStream out -> a
    org.eclipse.jgit.internal.storage.file.SimpleDataOutput dataOutput$30b02778 -> b
    void <init>(java.io.OutputStream) -> <init>
    void write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[]) -> a
    void writeBitmap(com.googlecode.javaewah.EWAHCompressedBitmap) -> a
org.eclipse.jgit.internal.storage.file.PackDirectory -> org.eclipse.jgit.internal.b.b.aq:
    org.slf4j.Logger LOG -> a
    org.eclipse.jgit.internal.storage.file.PackDirectory$PackList NO_PACKS -> b
    org.eclipse.jgit.lib.Config config -> c
    java.io.File directory -> d
    java.util.concurrent.atomic.AtomicReference packList -> e
    boolean trustFolderStat -> f
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config,java.io.File) -> <init>
    java.io.File getDirectory() -> a
    void create() -> b
    void close() -> c
    java.util.Collection getPacks() -> d
    java.lang.String toString() -> toString
    boolean has(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.file.Pack getPack(org.eclipse.jgit.lib.AnyObjectId) -> b
    boolean resolve$45cfe57d(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> a
    long getSize(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId) -> b
    void selectRepresentation(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    int checkRescanPackThreshold(int,org.eclipse.jgit.errors.PackMismatchException) -> a
    void handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.Pack) -> a
    boolean doLogExponentialBackoff(int) -> a
    boolean searchPacksAgain(org.eclipse.jgit.internal.storage.file.PackDirectory$PackList) -> a
    void insert(org.eclipse.jgit.internal.storage.file.Pack) -> a
    void remove(org.eclipse.jgit.internal.storage.file.Pack) -> b
    int indexOf(org.eclipse.jgit.internal.storage.file.Pack[],org.eclipse.jgit.internal.storage.file.Pack) -> a
    org.eclipse.jgit.internal.storage.file.PackDirectory$PackList scanPacks(org.eclipse.jgit.internal.storage.file.PackDirectory$PackList) -> b
    org.eclipse.jgit.internal.storage.file.PackDirectory$PackList scanPacksImpl(org.eclipse.jgit.internal.storage.file.PackDirectory$PackList) -> c
    java.util.Map getPackFilesByExtById() -> e
org.eclipse.jgit.internal.storage.file.PackDirectory$PackList -> org.eclipse.jgit.internal.b.b.ar:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> a
    org.eclipse.jgit.internal.storage.file.Pack[] packs -> b
    void <init>(org.eclipse.jgit.internal.storage.file.FileSnapshot,org.eclipse.jgit.internal.storage.file.Pack[]) -> <init>
org.eclipse.jgit.internal.storage.file.PackFile -> org.eclipse.jgit.internal.b.b.as:
    java.lang.String base -> a
    java.lang.String id -> b
    boolean hasOldPrefix -> c
    org.eclipse.jgit.internal.storage.pack.PackExt packExt -> d
    void <init>(java.io.File) -> <init>
    void <init>(java.io.File,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.internal.storage.pack.PackExt) -> <init>
    void <init>(java.io.File,java.lang.String,org.eclipse.jgit.internal.storage.pack.PackExt) -> <init>
    void <init>(java.io.File,java.lang.String) -> <init>
    java.lang.String getId() -> a
    org.eclipse.jgit.internal.storage.pack.PackExt getPackExt() -> b
    boolean isTmpGCFile() -> c
    org.eclipse.jgit.internal.storage.file.PackFile create(org.eclipse.jgit.internal.storage.pack.PackExt) -> a
    org.eclipse.jgit.internal.storage.file.PackFile createForDirectory(java.io.File) -> a
    org.eclipse.jgit.internal.storage.file.PackFile createPreservedForDirectory(java.io.File) -> b
    java.lang.String getName(boolean) -> a
    java.lang.String getExtension() -> d
    java.lang.String getExtPrefix(boolean) -> b
org.eclipse.jgit.internal.storage.file.PackFileSnapshot -> org.eclipse.jgit.internal.b.b.at:
    org.eclipse.jgit.lib.ObjectId MISSING_CHECKSUM -> c
    org.eclipse.jgit.lib.ObjectId checksum$4cae90d9 -> d
    void <clinit>() -> <clinit>
    org.eclipse.jgit.internal.storage.file.PackFileSnapshot save$5a9c7bd(org.eclipse.jgit.internal.storage.file.PackFile) -> a
    void <init>(org.eclipse.jgit.internal.storage.file.PackFile) -> <init>
    void setChecksum$36eb52dc(org.eclipse.jgit.lib.ObjectId) -> a
    boolean isModified(java.io.File) -> c
    org.eclipse.jgit.lib.ObjectId readChecksum$657ce11(java.io.File) -> d
    java.lang.String toString() -> toString
org.eclipse.jgit.internal.storage.file.PackIndex -> org.eclipse.jgit.internal.b.b.au:
    org.eclipse.jgit.internal.storage.file.PackIndex open$8973741(org.eclipse.jgit.internal.storage.file.PackFile) -> a
    org.eclipse.jgit.internal.storage.file.PackIndex read$22653f6f(org.eclipse.jgit.util.io.SilentFileInputStream) -> a
    boolean contains$36eb52e0$21a6ca88(org.eclipse.jgit.revwalk.RevObject) -> a
    java.util.Iterator iterator() -> iterator
    long getObjectCount() -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(long) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(int) -> a
    long getOffset(long) -> b
    long findOffset(org.eclipse.jgit.lib.AnyObjectId) -> a
    long findCRC32$36eb52d0(org.eclipse.jgit.internal.storage.file.LocalObjectToPack) -> a
    boolean hasCRC32Support() -> b
    void resolve$45cfe581(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    byte[] getChecksum() -> c
org.eclipse.jgit.internal.storage.file.PackIndex$EntriesIterator -> org.eclipse.jgit.internal.b.b.av:
    long objectCount -> a
    org.eclipse.jgit.internal.storage.file.PackIndex$MutableEntry entry -> b
    long returnedNumber -> c
    void <init>(long) -> <init>
    boolean hasNext() -> hasNext
    void readNext() -> a
    void setIdBuffer(int[],int) -> a
    void setIdBuffer(byte[],int) -> a
    void setOffset(long) -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.internal.storage.file.PackIndex$MutableEntry -> org.eclipse.jgit.internal.b.b.aw:
    org.eclipse.jgit.lib.MutableObjectId idBuffer -> a
    long offset -> b
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.file.PackIndexV1 -> org.eclipse.jgit.internal.b.b.ax:
    long[] idxHeader -> b
    byte[] packChecksum -> c
    byte[][] idxdata -> a
    long objectCnt -> d
    void <init>(org.eclipse.jgit.util.io.SilentFileInputStream,byte[]) -> <init>
    long getObjectCount() -> a
    int findLevelOne(long) -> c
    int getLevelTwo(long,int) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(long) -> a
    long getOffset(long) -> b
    long findOffset(org.eclipse.jgit.lib.AnyObjectId) -> a
    long findCRC32$36eb52d0(org.eclipse.jgit.internal.storage.file.LocalObjectToPack) -> a
    boolean hasCRC32Support() -> b
    java.util.Iterator iterator() -> iterator
    void resolve$45cfe581(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    byte[] getChecksum() -> c
org.eclipse.jgit.internal.storage.file.PackIndexV1$EntriesIteratorV1 -> org.eclipse.jgit.internal.b.b.ay:
    int levelOne -> a
    int levelTwo -> b
    org.eclipse.jgit.internal.storage.file.PackIndexV1 packIndex -> c
    void <init>(org.eclipse.jgit.internal.storage.file.PackIndexV1) -> <init>
    void readNext() -> a
org.eclipse.jgit.internal.storage.file.PackIndexV2 -> org.eclipse.jgit.internal.b.b.az:
    int[] NO_INTS -> d
    byte[] NO_BYTES -> e
    byte[] packChecksum -> f
    long objectCnt -> g
    long[] fanoutTable -> h
    int[][] names -> a
    byte[][] offset32 -> b
    byte[][] crc32 -> i
    byte[] offset64 -> c
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.util.io.SilentFileInputStream) -> <init>
    long getObjectCount() -> a
    int findLevelOne(long) -> c
    int getLevelTwo(long,int) -> a
    org.eclipse.jgit.lib.ObjectId getObjectId(long) -> a
    long getOffset(long) -> b
    long findOffset(org.eclipse.jgit.lib.AnyObjectId) -> a
    long getOffset(int,int) -> a
    long findCRC32$36eb52d0(org.eclipse.jgit.internal.storage.file.LocalObjectToPack) -> a
    boolean hasCRC32Support() -> b
    java.util.Iterator iterator() -> iterator
    void resolve$45cfe581(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    int binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int) -> a
    byte[] getChecksum() -> c
org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2 -> org.eclipse.jgit.internal.b.b.aA:
    int levelOne -> a
    int levelTwo -> b
    org.eclipse.jgit.internal.storage.file.PackIndexV2 packIndex -> c
    void <init>(org.eclipse.jgit.internal.storage.file.PackIndexV2) -> <init>
    void readNext() -> a
org.eclipse.jgit.internal.storage.file.PackIndexWriterV1 -> org.eclipse.jgit.internal.b.b.aB:
    boolean canStore(org.eclipse.jgit.transport.PackedObjectInfo) -> a
    void <init>(java.io.OutputStream) -> <init>
    void writeImpl() -> n
org.eclipse.jgit.internal.storage.file.PackIndexWriterV2 -> org.eclipse.jgit.internal.b.b.aC:
    void <init>(java.io.OutputStream) -> <init>
    void writeImpl() -> n
org.eclipse.jgit.internal.storage.file.PackInputStream -> org.eclipse.jgit.internal.b.b.aD:
    org.eclipse.jgit.internal.storage.file.WindowCursor wc -> a
    org.eclipse.jgit.internal.storage.file.Pack pack -> b
    long pos -> c
    void <init>(org.eclipse.jgit.internal.storage.file.Pack,long,org.eclipse.jgit.internal.storage.file.WindowCursor) -> <init>
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
org.eclipse.jgit.internal.storage.file.PackReverseIndex -> org.eclipse.jgit.internal.b.b.aE:
    byte[] MAGIC -> a
    void <clinit>() -> <clinit>
    void verifyPackChecksum(java.lang.String) -> a
    org.eclipse.jgit.lib.ObjectId findObject(long) -> a
    long findNextOffset(long,long) -> a
    int findPosition(long) -> b
    org.eclipse.jgit.lib.ObjectId findObjectByPosition(int) -> a
org.eclipse.jgit.internal.storage.file.PackReverseIndexComputed -> org.eclipse.jgit.internal.b.b.aF:
    org.eclipse.jgit.internal.storage.file.PackIndex index -> b
    long bucketSize -> c
    int[] nextBucketStart -> d
    int[] indexPosInOffsetOrder -> e
    void <init>(org.eclipse.jgit.internal.storage.file.PackIndex) -> <init>
    void verifyPackChecksum(java.lang.String) -> a
    org.eclipse.jgit.lib.ObjectId findObject(long) -> a
    long findNextOffset(long,long) -> a
    int findPosition(long) -> b
    int binarySearch(long) -> c
    org.eclipse.jgit.lib.ObjectId findObjectByPosition(int) -> a
org.eclipse.jgit.internal.storage.file.PackReverseIndexFactory -> org.eclipse.jgit.internal.b.b.aG:
    long[] words -> a
    org.eclipse.jgit.internal.storage.file.PackReverseIndex openOrCompute$5fc6890e(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.file.PackBitmapIndex$SupplierWithIOException) -> a
    void <init>(int) -> <init>
    void clear() -> a
    void set(int) -> a
    boolean get(int) -> b
    com.googlecode.javaewah.EWAHCompressedBitmap toEWAHCompressedBitmap() -> b
org.eclipse.jgit.internal.storage.file.PackReverseIndexV1 -> org.eclipse.jgit.internal.b.b.aH:
    java.security.DigestInputStream inputStream -> b
    org.eclipse.jgit.internal.storage.file.SimpleDataInput dataIn$4e440d3d -> c
    org.eclipse.jgit.internal.storage.file.PackBitmapIndex$SupplierWithIOException packIndexSupplier -> d
    int objectCount -> e
    byte[] packChecksum -> f
    int[] indexPositionsSortedByOffset -> g
    org.eclipse.jgit.internal.storage.file.PackIndex packIndex -> h
    boolean $assertionsDisabled -> i
    void <clinit>() -> <clinit>
    void <init>(java.security.DigestInputStream,long,org.eclipse.jgit.internal.storage.file.PackBitmapIndex$SupplierWithIOException) -> <init>
    void verifyPackChecksum(java.lang.String) -> a
    org.eclipse.jgit.lib.ObjectId findObject(long) -> a
    long findNextOffset(long,long) -> a
    int findPosition(long) -> b
    org.eclipse.jgit.lib.ObjectId findObjectByPosition(int) -> a
    long findOffsetByReversePosition(int) -> b
    int findForwardPositionByReversePosition(int) -> c
    int binarySearchByOffset(long) -> c
    org.eclipse.jgit.internal.storage.file.PackIndex getPackIndex() -> a
org.eclipse.jgit.internal.storage.file.PackReverseIndexWriter -> org.eclipse.jgit.internal.b.b.aI:
    java.security.DigestOutputStream out -> a
    org.eclipse.jgit.internal.storage.file.SimpleDataOutput dataOutput$30b02778 -> b
    void <init>(java.io.OutputStream) -> <init>
    org.eclipse.jgit.internal.storage.file.PackReverseIndexWriterV1 createWriter$2462d89b(java.io.OutputStream) -> a
    void write$2e5bee53(org.eclipse.jgit.util.BlockList,byte[]) -> a
    void writeHeader() -> a
    void writeBody$61fb9e66(org.eclipse.jgit.util.BlockList) -> a
org.eclipse.jgit.internal.storage.file.PackReverseIndexWriterV1 -> org.eclipse.jgit.internal.b.b.aJ:
    void <init>(java.io.OutputStream) -> <init>
    void writeHeader() -> a
    void writeBody$61fb9e66(org.eclipse.jgit.util.BlockList) -> a
org.eclipse.jgit.internal.storage.file.PackReverseIndexWriterV1$IndexPositionsByOffsetComparator -> org.eclipse.jgit.internal.b.b.aK:
    java.util.List objectsByIndexPos -> a
    void <init>(org.eclipse.jgit.util.BlockList) -> <init>
    int compare(int,int) -> a
    long getOffset(int) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory -> org.eclipse.jgit.internal.b.b.aL:
    org.slf4j.Logger LOG -> f
    java.util.List RETRY_SLEEP_MS -> g
    org.eclipse.jgit.internal.storage.file.FileRepository parent -> h
    java.io.File gitDir -> i
    java.io.File gitCommonDir -> j
    java.io.File refsDir -> a
    java.io.File packedRefsFile -> k
    java.io.File logsDir -> b
    java.io.File logsRefsDir -> c
    java.util.concurrent.atomic.AtomicReference looseRefs -> l
    java.util.concurrent.atomic.AtomicReference packedRefs -> d
    java.util.concurrent.locks.ReentrantLock inProcessPackedRefsLock -> m
    java.util.concurrent.atomic.AtomicInteger modCnt -> n
    java.util.concurrent.atomic.AtomicInteger lastNotifiedModCnt -> o
    java.util.List retrySleepMs -> p
    boolean trustFolderStat -> q
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat trustPackedRefsStat -> r
    org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat trustLooseRefStat -> s
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList NO_PACKED_REFS -> t
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$TrustPackedRefsStat -> u
    boolean $assertionsDisabled -> v
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    org.eclipse.jgit.internal.storage.file.FileRepository getRepository$70b619e2() -> e
    org.eclipse.jgit.internal.storage.file.ReflogWriter newLogWriter$1ea33115() -> g
    java.io.File logFor(java.lang.String) -> a
    void create() -> d
    void close() -> c
    void packRefs(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.api.PackRefsCommand) -> a
    boolean isNameConflicting(java.lang.String) -> d
    org.eclipse.jgit.lib.Ref readAndResolve$212863a6(java.lang.String,org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList) -> a
    org.eclipse.jgit.lib.Ref exactRef(java.lang.String) -> b
    org.eclipse.jgit.lib.Ref firstExactRef(java.lang.String[]) -> a
    org.eclipse.jgit.util.RefMap getRefs$694ad9f4(java.lang.String) -> c
    java.util.List getRefsByPrefix(java.lang.String[]) -> b
    java.util.List getAdditionalRefs() -> b
    org.eclipse.jgit.lib.Ref peel(org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.lib.ObjectIdRef doPeel(org.eclipse.jgit.lib.Ref) -> b
    org.eclipse.jgit.lib.Ref recreate(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.ObjectIdRef) -> a
    void storedSymbolicRef(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate,org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String) -> a
    org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate newUpdate(java.lang.String,boolean) -> b
    org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate createRefDirectoryUpdate(org.eclipse.jgit.lib.Ref) -> c
    void stored(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate,org.eclipse.jgit.internal.storage.file.FileSnapshot) -> a
    void putLooseRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef) -> a
    void delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate) -> a
    org.eclipse.jgit.internal.storage.file.LockFile lockPackedRefs() -> h
    org.eclipse.jgit.internal.storage.file.LockFile lockPackedRefsOrThrow() -> i
    void log$49f8fb66$3ce9ab94(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate,java.lang.String,boolean) -> a
    org.eclipse.jgit.lib.Ref resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList) -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList getPackedRefs() -> j
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList refreshPackedRefs() -> k
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList refreshPackedRefs(org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList) -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList readPackedRefs() -> l
    org.eclipse.jgit.util.RefList parsePackedRefs(java.io.BufferedReader) -> a
    void commitPackedRefs(org.eclipse.jgit.internal.storage.file.LockFile,org.eclipse.jgit.util.RefList,org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList,boolean) -> a
    org.eclipse.jgit.lib.Ref readRef(java.lang.String,org.eclipse.jgit.util.RefList) -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String) -> a
    void fireRefsChanged() -> m
    org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate newTemporaryUpdate() -> f
    java.io.File fileFor(java.lang.String) -> e
    int levelsIn(java.lang.String) -> f
    void delete(java.io.File,int) -> a
    void delete(java.io.File) -> a
    void deleteEmptyParentDirs(java.io.File,int) -> b
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseSymbolicRef newSymbolicRef(org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String,java.lang.String) -> a
    org.eclipse.jgit.lib.RefUpdate newUpdate(java.lang.String,boolean) -> a
    org.eclipse.jgit.lib.RefRename newRename(java.lang.String,java.lang.String) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$TrustPackedRefsStat() -> n
    boolean lambda$0(java.lang.String[],org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList lambda$2(java.io.File) -> b
    org.eclipse.jgit.internal.storage.file.RefDirectory$1LooseItems lambda$3(java.io.File) -> c
org.eclipse.jgit.internal.storage.file.RefDirectory$1 -> org.eclipse.jgit.internal.b.b.aM:
    org.eclipse.jgit.internal.storage.file.RefDirectory this$0 -> a
    org.eclipse.jgit.internal.storage.file.LockFile val$lck -> b
    org.eclipse.jgit.util.RefList val$refs -> c
    org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList val$oldPackedList -> d
    boolean val$changed -> e
    void <init>(org.eclipse.jgit.internal.storage.file.RefDirectory,org.eclipse.jgit.util.RefList,org.eclipse.jgit.internal.storage.file.LockFile,org.eclipse.jgit.util.RefList,org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList,boolean) -> <init>
    void writeFile(java.lang.String,byte[]) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory$1LooseItems -> org.eclipse.jgit.internal.b.b.aN:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> a
    byte[] buf -> b
    void <init>(org.eclipse.jgit.internal.storage.file.FileSnapshot,byte[]) -> <init>
org.eclipse.jgit.internal.storage.file.RefDirectory$LooseNonTag -> org.eclipse.jgit.internal.b.b.aO:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapShot -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String,org.eclipse.jgit.lib.ObjectId) -> <init>
    org.eclipse.jgit.internal.storage.file.FileSnapshot getSnapShot() -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef peel(org.eclipse.jgit.lib.ObjectIdRef) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory$LoosePeeledTag -> org.eclipse.jgit.internal.b.b.aP:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapShot -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId) -> <init>
    org.eclipse.jgit.internal.storage.file.FileSnapshot getSnapShot() -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef peel(org.eclipse.jgit.lib.ObjectIdRef) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef -> org.eclipse.jgit.internal.b.b.aQ:
    org.eclipse.jgit.internal.storage.file.FileSnapshot getSnapShot() -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef peel(org.eclipse.jgit.lib.ObjectIdRef) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner -> org.eclipse.jgit.internal.b.b.aR:
    org.eclipse.jgit.util.RefList curLoose -> c
    int curIdx -> d
    org.eclipse.jgit.util.RefList$Builder symbolic -> a
    org.eclipse.jgit.util.RefList$Builder newLoose -> b
    org.eclipse.jgit.internal.storage.file.RefDirectory this$0 -> e
    void <init>(org.eclipse.jgit.internal.storage.file.RefDirectory,org.eclipse.jgit.util.RefList) -> <init>
    void scan(java.lang.String) -> a
    boolean scanTree(java.lang.String,java.io.File) -> a
    void scanOne(java.lang.String) -> b
org.eclipse.jgit.internal.storage.file.RefDirectory$LooseSymbolicRef -> org.eclipse.jgit.internal.b.b.aS:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapShot -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String,org.eclipse.jgit.lib.ObjectIdRef$Unpeeled) -> <init>
    org.eclipse.jgit.internal.storage.file.FileSnapshot getSnapShot() -> a
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef peel(org.eclipse.jgit.lib.ObjectIdRef) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory$LooseUnpeeled -> org.eclipse.jgit.internal.b.b.aT:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapShot -> a
    boolean $assertionsDisabled -> b
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.file.FileSnapshot,java.lang.String,org.eclipse.jgit.lib.ObjectId) -> <init>
    org.eclipse.jgit.internal.storage.file.FileSnapshot getSnapShot() -> a
    org.eclipse.jgit.lib.ObjectId getObjectId() -> b
    org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef peel(org.eclipse.jgit.lib.ObjectIdRef) -> a
org.eclipse.jgit.internal.storage.file.RefDirectory$PackedRefList -> org.eclipse.jgit.internal.b.b.aU:
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> c
    org.eclipse.jgit.lib.ObjectId id -> d
    void <init>(org.eclipse.jgit.util.RefList,org.eclipse.jgit.internal.storage.file.FileSnapshot,org.eclipse.jgit.lib.ObjectId) -> <init>
org.eclipse.jgit.internal.storage.file.RefDirectoryRename -> org.eclipse.jgit.internal.b.b.aV:
    org.slf4j.Logger LOG -> c
    org.eclipse.jgit.internal.storage.file.RefDirectory refdb -> d
    org.eclipse.jgit.lib.ObjectId objId -> e
    org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate tmp -> f
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result -> g
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate,org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate) -> <init>
    org.eclipse.jgit.lib.RefUpdate$Result doRename() -> a
    boolean renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate) -> a
    boolean rename(java.io.File,java.io.File) -> a
    boolean linkHEAD(org.eclipse.jgit.lib.RefUpdate) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$RefUpdate$Result() -> d
org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate -> org.eclipse.jgit.internal.b.b.aW:
    org.eclipse.jgit.internal.storage.file.RefDirectory database -> a
    boolean shouldDeref -> b
    org.eclipse.jgit.internal.storage.file.LockFile lock -> c
    void <init>(org.eclipse.jgit.internal.storage.file.RefDirectory,org.eclipse.jgit.lib.Ref) -> <init>
    org.eclipse.jgit.internal.storage.file.RefDirectory getRefDatabase() -> e
    org.eclipse.jgit.internal.storage.file.FileRepository getRepository$70b619e2() -> b
    boolean tryLock(boolean) -> a
    void unlock() -> c
    org.eclipse.jgit.lib.RefUpdate$Result doUpdate(org.eclipse.jgit.lib.RefUpdate$Result) -> a
    org.eclipse.jgit.lib.RefUpdate$Result doDelete(org.eclipse.jgit.lib.RefUpdate$Result) -> b
    org.eclipse.jgit.lib.RefUpdate$Result doLink(java.lang.String) -> a
    org.eclipse.jgit.lib.RefDatabase getRefDatabase() -> a
org.eclipse.jgit.internal.storage.file.ReflogEntryImpl -> org.eclipse.jgit.internal.b.b.aX:
    org.eclipse.jgit.lib.ObjectId oldId -> a
    org.eclipse.jgit.lib.ObjectId newId -> b
    org.eclipse.jgit.lib.PersonIdent who -> c
    java.lang.String comment -> d
    void <init>(byte[],int) -> <init>
    org.eclipse.jgit.lib.ObjectId getOldId() -> g
    org.eclipse.jgit.lib.ObjectId getNewId() -> h
    org.eclipse.jgit.lib.PersonIdent getWho() -> i
    java.lang.String getComment() -> j
    java.lang.String toString() -> toString
    org.eclipse.jgit.internal.storage.file.UnpackedObject parseCheckout$1cb8481e$71041aa5() -> k
org.eclipse.jgit.internal.storage.file.ReflogReaderImpl -> org.eclipse.jgit.internal.b.b.aY:
    java.io.File logName -> a
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository,java.lang.String) -> <init>
    java.util.List getReverseEntries() -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReverseEntry$38ebbaac$66144207(int) -> a
    java.util.List getReverseEntries(int) -> b
org.eclipse.jgit.internal.storage.file.ReflogWriter -> org.eclipse.jgit.internal.b.b.aZ:
    org.eclipse.jgit.internal.storage.file.RefDirectory refdb -> a
    boolean forceWrite -> b
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$LogRefUpdates -> c
    void <init>(org.eclipse.jgit.internal.storage.file.RefDirectory) -> <init>
    org.eclipse.jgit.internal.storage.file.ReflogWriter create() -> a
    org.eclipse.jgit.internal.storage.file.ReflogWriter log$6c3a3830(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate,java.lang.String,boolean) -> a
    java.io.FileOutputStream getFileOutputStream(java.io.File) -> a
    org.eclipse.jgit.internal.storage.file.ReflogWriter log(java.lang.String,byte[]) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$LogRefUpdates() -> b
org.eclipse.jgit.internal.storage.file.SimpleDataInput -> org.eclipse.jgit.internal.b.b.ba:
    java.io.InputStream fd -> a
    byte[] buf -> b
    void <init>(java.io.InputStream) -> <init>
    int readInt() -> readInt
    long readLong() -> readLong
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
org.eclipse.jgit.internal.storage.file.SimpleDataOutput -> org.eclipse.jgit.internal.b.b.bb:
    java.security.DigestOutputStream fd$33c83ab2 -> a
    byte[] buf -> b
    void <init>(java.security.DigestOutputStream) -> <init>
    void writeShort(int) -> writeShort
    void writeInt(int) -> writeInt
    void writeLong(long) -> writeLong
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void writeBoolean(boolean) -> writeBoolean
    void writeByte(int) -> writeByte
    void writeChar(int) -> writeChar
    void writeFloat(float) -> writeFloat
    void writeDouble(double) -> writeDouble
    void writeBytes(java.lang.String) -> writeBytes
    void writeChars(java.lang.String) -> writeChars
    void writeUTF(java.lang.String) -> writeUTF
org.eclipse.jgit.internal.storage.file.UnpackedObject -> org.eclipse.jgit.internal.b.b.bc:
    java.lang.String from -> a
    org.eclipse.jgit.lib.ObjectLoader open$1fb78121(java.io.FileInputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    long getSize$57a3eb97(java.io.FileInputStream,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor) -> a
    void checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[]) -> a
    boolean isStandardFormat(byte[]) -> a
    org.eclipse.jgit.internal.storage.file.UnpackedObject$1 inflate$20e16e06(java.io.BufferedInputStream,long,org.eclipse.jgit.lib.ObjectId) -> a
    java.util.zip.InflaterInputStream inflate$560a2cf4(java.io.BufferedInputStream,java.util.zip.Inflater) -> a
    java.io.BufferedInputStream buffer(java.io.InputStream) -> a
    int readSome$5c29ca98(java.io.FilterInputStream,byte[],int,int) -> a
    void <init>(org.eclipse.jgit.internal.storage.file.ReflogEntryImpl) -> <init>
    java.lang.String getFromBranch() -> f
org.eclipse.jgit.internal.storage.file.UnpackedObject$1 -> org.eclipse.jgit.internal.b.b.bd:
    long remaining -> a
    org.eclipse.jgit.lib.ObjectId val$id -> b
    void <init>(java.io.BufferedInputStream,java.util.zip.Inflater,long,org.eclipse.jgit.lib.ObjectId) -> <init>
    int read(byte[],int,int) -> read
    void close() -> close
org.eclipse.jgit.internal.storage.file.UnpackedObject$LargeObject -> org.eclipse.jgit.internal.b.b.be:
    int type -> a
    long size -> b
    java.io.File path -> c
    org.eclipse.jgit.lib.ObjectId id -> d
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase source -> e
    void <init>(int,long,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.FileObjectDatabase) -> <init>
    int getType() -> a
    long getSize() -> b
    boolean isLarge() -> c
    byte[] getCachedBytes() -> d
    org.eclipse.jgit.lib.ObjectStream openStream() -> e
org.eclipse.jgit.internal.storage.file.UnpackedObjectCache -> org.eclipse.jgit.internal.b.b.bf:
    org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table table -> a
    void <init>() -> <init>
    boolean isUnpacked(org.eclipse.jgit.lib.AnyObjectId) -> a
    void add(org.eclipse.jgit.lib.AnyObjectId) -> b
    void remove(org.eclipse.jgit.lib.AnyObjectId) -> c
    void clear() -> a
org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table -> org.eclipse.jgit.internal.b.b.bg:
    java.util.concurrent.atomic.AtomicReferenceArray ids -> b
    int shift -> c
    int bits -> a
    void <init>(int) -> <init>
    boolean contains(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean add(org.eclipse.jgit.lib.AnyObjectId) -> b
    int index(org.eclipse.jgit.lib.AnyObjectId) -> c
org.eclipse.jgit.internal.storage.file.WindowCache -> org.eclipse.jgit.internal.b.b.bh:
    java.util.Random rng -> a
    org.eclipse.jgit.internal.storage.file.WindowCache cache -> b
    int streamFileThreshold -> c
    org.eclipse.jgit.internal.storage.file.WindowCache$SoftCleanupQueue queue$e71e99 -> d
    int tableSize -> e
    java.util.concurrent.atomic.AtomicLong clock -> f
    java.util.concurrent.atomic.AtomicReferenceArray table -> g
    org.eclipse.jgit.internal.storage.file.WindowCache$Lock[] locks -> h
    java.util.concurrent.locks.ReentrantLock evictLock -> i
    int evictBatch -> j
    int maxFiles -> k
    long maxBytes -> l
    int windowSizeShift -> m
    int windowSize -> n
    org.eclipse.jgit.internal.storage.file.WindowCache$StatsRecorderImpl statsRecorder$1c347825 -> o
    org.eclipse.jgit.internal.storage.file.WindowCache$StatsRecorderImpl mbean -> p
    java.util.concurrent.atomic.AtomicBoolean publishMBean -> q
    boolean useStrongIndexRefs -> r
    void <clinit>() -> <clinit>
    int getStreamFileThreshold() -> a
    org.eclipse.jgit.internal.storage.file.WindowCache getInstance() -> b
    org.eclipse.jgit.internal.storage.file.ByteWindow get(org.eclipse.jgit.internal.storage.file.Pack,long) -> a
    void purge(org.eclipse.jgit.internal.storage.file.Pack) -> a
    void <init>(org.eclipse.jgit.storage.file.WindowCacheConfig) -> <init>
    org.eclipse.jgit.internal.storage.file.WindowCache publishMBeanIfNeeded() -> d
    int hash(int,long) -> a
    org.eclipse.jgit.internal.storage.file.ByteArrayWindow load$69458b6a(org.eclipse.jgit.internal.storage.file.Pack,long) -> b
    void clear$6a6bf533(org.eclipse.jgit.internal.storage.file.WindowCache$SoftRef) -> a
    void close(org.eclipse.jgit.internal.storage.file.Pack) -> b
    org.eclipse.jgit.internal.storage.file.ByteWindow getOrLoad(org.eclipse.jgit.internal.storage.file.Pack,long) -> c
    org.eclipse.jgit.internal.storage.file.ByteWindow scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.Pack,long) -> a
    void hit(org.eclipse.jgit.internal.storage.file.WindowCache$PageRef) -> a
    void removeAll() -> e
    void gc() -> f
    int slot(org.eclipse.jgit.internal.storage.file.Pack,long) -> d
    org.eclipse.jgit.internal.storage.file.WindowCache$Entry clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry) -> a
    boolean isPackedIndexGitUseStrongRefs() -> c
org.eclipse.jgit.internal.storage.file.WindowCache$CleanupQueue -> org.eclipse.jgit.internal.b.b.bi:
    void gc() -> a
org.eclipse.jgit.internal.storage.file.WindowCache$Entry -> org.eclipse.jgit.internal.b.b.bj:
    org.eclipse.jgit.internal.storage.file.WindowCache$Entry next -> a
    org.eclipse.jgit.internal.storage.file.WindowCache$PageRef ref -> b
    boolean dead -> c
    void <init>(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.WindowCache$PageRef) -> <init>
    void kill() -> a
org.eclipse.jgit.internal.storage.file.WindowCache$Lock -> org.eclipse.jgit.internal.b.b.bk:
    void <init>() -> <init>
org.eclipse.jgit.internal.storage.file.WindowCache$PageRef -> org.eclipse.jgit.internal.b.b.bl:
    java.lang.Object get() -> get
    boolean kill() -> a
    org.eclipse.jgit.internal.storage.file.Pack getPack() -> b
    long getPosition() -> c
    int getSize() -> d
    long getLastAccess() -> e
    void setLastAccess(long) -> a
org.eclipse.jgit.internal.storage.file.WindowCache$SoftCleanupQueue -> org.eclipse.jgit.internal.b.b.bm:
    org.eclipse.jgit.internal.storage.file.WindowCache wc -> a
    void <init>(org.eclipse.jgit.internal.storage.file.WindowCache) -> <init>
    void gc() -> a
org.eclipse.jgit.internal.storage.file.WindowCache$SoftRef -> org.eclipse.jgit.internal.b.b.bn:
    org.eclipse.jgit.internal.storage.file.Pack pack -> a
    long position -> b
    int size -> c
    long lastAccess -> d
    void <init>(org.eclipse.jgit.internal.storage.file.Pack,long,org.eclipse.jgit.internal.storage.file.ByteArrayWindow,org.eclipse.jgit.internal.storage.file.WindowCache$SoftCleanupQueue) -> <init>
    org.eclipse.jgit.internal.storage.file.Pack getPack() -> b
    long getPosition() -> c
    int getSize() -> d
    long getLastAccess() -> e
    void setLastAccess(long) -> a
    boolean kill() -> a
org.eclipse.jgit.internal.storage.file.WindowCache$StatsRecorder -> org.eclipse.jgit.internal.b.b.bo:
    void recordHits$13462e() -> a
    void recordMisses$13462e() -> b
    void recordLoadSuccess(long) -> a
    void recordLoadFailure(long) -> b
    void recordEvictions$13462e() -> c
    void recordOpenFiles(int) -> a
    void recordOpenBytes(org.eclipse.jgit.internal.storage.file.Pack,int) -> a
org.eclipse.jgit.internal.storage.file.WindowCache$StatsRecorderImpl -> org.eclipse.jgit.internal.b.b.bp:
    java.util.concurrent.atomic.LongAdder hitCount -> a
    java.util.concurrent.atomic.LongAdder missCount -> b
    java.util.concurrent.atomic.LongAdder loadSuccessCount -> c
    java.util.concurrent.atomic.LongAdder loadFailureCount -> d
    java.util.concurrent.atomic.LongAdder totalLoadTime -> e
    java.util.concurrent.atomic.LongAdder evictionCount -> f
    java.util.concurrent.atomic.LongAdder openFileCount -> g
    java.util.concurrent.atomic.LongAdder openByteCount -> h
    java.util.concurrent.ConcurrentHashMap openByteCountPerRepository$5a983bf5 -> i
    void <init>() -> <init>
    void recordHits$13462e() -> a
    void recordMisses$13462e() -> b
    void recordLoadSuccess(long) -> a
    void recordLoadFailure(long) -> b
    void recordEvictions$13462e() -> c
    void recordOpenFiles(int) -> a
    void recordOpenBytes(org.eclipse.jgit.internal.storage.file.Pack,int) -> a
    long getOpenFileCount() -> d
    long getOpenByteCount() -> e
    java.util.concurrent.atomic.LongAdder lambda$0(java.lang.String) -> a
    java.util.concurrent.atomic.LongAdder lambda$1(java.lang.String,java.util.concurrent.atomic.LongAdder) -> a
org.eclipse.jgit.internal.storage.file.WindowCursor -> org.eclipse.jgit.internal.b.b.bq:
    byte[] tempId -> a
    java.util.zip.Inflater inf -> d
    org.eclipse.jgit.internal.storage.file.ByteWindow window -> e
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache baseCache -> f
    org.eclipse.jgit.internal.storage.file.FileObjectDatabase db -> b
    void <init>(org.eclipse.jgit.internal.storage.file.FileObjectDatabase) -> <init>
    void <init>(org.eclipse.jgit.internal.storage.file.FileObjectDatabase,byte) -> <init>
    org.eclipse.jgit.internal.storage.file.DeltaBaseCache getDeltaBaseCache() -> a
    org.eclipse.jgit.internal.storage.file.WindowCursor newReader$13597046() -> b
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl getBitmapIndex$49f66a95() -> c
    java.util.Optional getCommitGraph() -> d
    java.util.Set resolve$164c5018(org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    boolean has(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId,int) -> a
    java.util.Set getShallowCommits() -> e
    long getObjectSize$59808465(org.eclipse.jgit.lib.ObjectId,int) -> a
    void selectObjectRepresentation$24cf45e5(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection) -> a
    void copyObjectAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack,boolean) -> a
    void writeObjects$3054e7c1(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.util.BlockList) -> a
    int copy(org.eclipse.jgit.internal.storage.file.Pack,long,byte[],int,int) -> a
    int inflate(org.eclipse.jgit.internal.storage.file.Pack,long,byte[],boolean) -> a
    org.eclipse.jgit.internal.storage.file.ByteArrayWindow quickCopy(org.eclipse.jgit.internal.storage.file.Pack,long,long) -> a
    java.util.zip.Inflater inflater() -> f
    void prepareInflater() -> h
    void pin(org.eclipse.jgit.internal.storage.file.Pack,long) -> a
    void close() -> close
    org.eclipse.jgit.internal.storage.file.LocalObjectToPack newObjectToPack$5906e6a1$22a8e1a1$5d7629c7(org.eclipse.jgit.revwalk.RevObject,int) -> a
org.eclipse.jgit.internal.storage.file.WriteConfig -> org.eclipse.jgit.internal.b.b.br:
    org.eclipse.jgit.lib.Config$SectionParser KEY -> a
    int compression -> b
    boolean fsyncObjectFiles -> c
    boolean fsyncRefFiles -> d
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    int getCompression() -> a
    boolean getFSyncObjectFiles() -> b
    boolean getFSyncRefFiles() -> c
org.eclipse.jgit.internal.storage.io.BlockSource -> org.eclipse.jgit.internal.b.c.a:
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.io.BlockSource$2 from$2b7e6f28(java.nio.channels.FileChannel) -> a
    java.nio.ByteBuffer read(long,int) -> a
    long size() -> a
    void close() -> close
org.eclipse.jgit.internal.storage.io.BlockSource$2 -> org.eclipse.jgit.internal.b.c.b:
    java.nio.channels.FileChannel val$ch -> a
    void <init>(java.nio.channels.FileChannel) -> <init>
    java.nio.ByteBuffer read(long,int) -> a
    long size() -> a
    void close() -> close
org.eclipse.jgit.internal.storage.io.CancellableDigestOutputStream -> org.eclipse.jgit.internal.b.c.c:
    org.eclipse.jgit.lib.ProgressMonitor writeMonitor -> a
    java.io.OutputStream out -> b
    java.security.MessageDigest md -> c
    long count -> d
    long checkCancelAt -> e
    void <init>(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream) -> <init>
    org.eclipse.jgit.lib.ProgressMonitor getWriteMonitor() -> a
    byte[] getDigest() -> b
    long length() -> c
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
org.eclipse.jgit.internal.storage.io.NullMessageDigest -> org.eclipse.jgit.internal.b.c.d:
    byte[] digest -> a
    org.eclipse.jgit.internal.storage.io.NullMessageDigest INSTANCE -> b
    void <clinit>() -> <clinit>
    org.eclipse.jgit.internal.storage.io.NullMessageDigest getInstance$5bd5e843() -> a
    void <init>() -> <init>
    void engineUpdate(byte) -> engineUpdate
    void engineUpdate(byte[],int,int) -> engineUpdate
    byte[] engineDigest() -> engineDigest
    void engineReset() -> engineReset
org.eclipse.jgit.internal.storage.pack.BinaryDelta -> org.eclipse.jgit.internal.b.d.a:
    java.io.OutputStream out -> a
    byte[] buf -> b
    int limit -> c
    int size -> d
    long getResultSize(byte[]) -> a
    void <init>(java.io.OutputStream,long,long,int) -> <init>
    void writeVarint(long) -> a
    boolean insert(byte[]) -> b
    boolean insert(byte[],int,int) -> a
    boolean copy(long,int) -> a
    int encodeCopy(int,long,int) -> a
org.eclipse.jgit.internal.storage.pack.BitmapCommit -> org.eclipse.jgit.internal.b.d.b:
    boolean reuseWalker -> a
    int flags -> b
    boolean addToIndex -> c
    void <init>(org.eclipse.jgit.lib.AnyObjectId,int) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectId,boolean,int,boolean) -> <init>
    boolean isReuseWalker() -> a
    int getFlags() -> b
    boolean isAddToIndex() -> c
    org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder newBuilder$491963cc(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder copyFrom(org.eclipse.jgit.internal.storage.pack.BitmapCommit) -> a
org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder -> org.eclipse.jgit.internal.b.d.c:
    org.eclipse.jgit.lib.ObjectId objectId$4cae90d9 -> a
    boolean reuseWalker -> b
    int flags -> c
    boolean addToIndex -> d
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder setId$491963cc(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder setReuseWalker(boolean) -> a
    org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder setFlags(int) -> a
    org.eclipse.jgit.internal.storage.pack.BitmapCommit$Builder setAddToIndex(boolean) -> b
    org.eclipse.jgit.internal.storage.pack.BitmapCommit build() -> a
org.eclipse.jgit.internal.storage.pack.CachedPack -> org.eclipse.jgit.internal.b.d.d:
    void <init>() -> <init>
    long getObjectCount() -> a
org.eclipse.jgit.internal.storage.pack.DeltaCache -> org.eclipse.jgit.internal.b.d.e:
    long size -> a
    int entryLimit -> b
    java.lang.ref.ReferenceQueue queue -> c
    long used -> d
    void <init>(org.eclipse.jgit.storage.pack.PackConfig) -> <init>
    boolean canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    void credit(int) -> a
    org.eclipse.jgit.internal.storage.pack.DeltaCache$Ref cache(byte[],int,int) -> a
    byte[] resize(byte[],int) -> a
org.eclipse.jgit.internal.storage.pack.DeltaCache$Ref -> org.eclipse.jgit.internal.b.d.f:
    int cost -> a
    void <init>(byte[],java.lang.ref.ReferenceQueue) -> <init>
org.eclipse.jgit.internal.storage.pack.DeltaIndex -> org.eclipse.jgit.internal.b.d.g:
    byte[] src -> a
    int[] table -> b
    long[] entries -> c
    int tableMask -> d
    int[] T -> e
    int[] U -> f
    void <clinit>() -> <clinit>
    long estimateIndexSize(int) -> a
    void <init>(byte[]) -> <init>
    long getSourceSize() -> a
    long getIndexSize() -> b
    void encode$3fbc8aae(org.eclipse.jgit.util.TemporaryBuffer$Heap,byte[]) -> a
    boolean encode(java.io.OutputStream,byte[],int) -> a
    org.eclipse.jgit.internal.storage.pack.BinaryDelta newEncoder$7ac0d34f(java.io.OutputStream,long,int) -> a
    int fwdmatch(byte[],int,byte[],int) -> a
    int negmatch(byte[],int,byte[],int,int) -> a
    java.lang.String toString() -> toString
    int hashBlock(byte[],int) -> a
    int step(int,byte,byte) -> a
org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner -> org.eclipse.jgit.internal.b.d.h:
    int[] table -> a
    long[] entries -> b
    int[] next -> c
    int tableMask -> d
    int entryCnt -> e
    void <init>(byte[],int) -> <init>
org.eclipse.jgit.internal.storage.pack.DeltaTask -> org.eclipse.jgit.internal.b.d.i:
    org.eclipse.jgit.internal.storage.pack.DeltaTask$Block block -> b
    java.util.ArrayDeque slices -> a
    org.eclipse.jgit.internal.storage.file.WindowCursor or$63005ce7 -> c
    org.eclipse.jgit.internal.storage.pack.DeltaWindow dw -> d
    int getAdjustedWeight(org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    void <init>(org.eclipse.jgit.internal.storage.pack.DeltaTask$Block) -> <init>
    void add(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice) -> a
    java.lang.Object call() -> call
    org.eclipse.jgit.internal.storage.pack.DeltaWindow initWindow(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice) -> b
    void runWindow(org.eclipse.jgit.internal.storage.pack.DeltaWindow) -> a
    org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice remaining() -> a
    boolean tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice) -> c
org.eclipse.jgit.internal.storage.pack.DeltaTask$Block -> org.eclipse.jgit.internal.b.d.j:
    java.util.ArrayList tasks$7865b31 -> a
    int threads -> h
    org.eclipse.jgit.storage.pack.PackConfig config -> b
    org.eclipse.jgit.lib.ObjectReader templateReader -> c
    org.eclipse.jgit.internal.storage.pack.ThreadSafeDeltaCache dc$791cab59 -> d
    org.eclipse.jgit.lib.ThreadSafeProgressMonitor pm -> e
    org.eclipse.jgit.internal.storage.pack.ObjectToPack[] list -> f
    int endIndex -> i
    long totalWeight -> j
    long bytesPerUnit -> g
    void <init>(int,org.eclipse.jgit.storage.pack.PackConfig,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.internal.storage.pack.ThreadSafeDeltaCache,org.eclipse.jgit.lib.ThreadSafeProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int) -> <init>
    int cost() -> a
    org.eclipse.jgit.internal.storage.pack.DeltaWindow stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask) -> a
    void partitionTasks() -> b
    int lambda$0(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath) -> a
org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice -> org.eclipse.jgit.internal.b.d.k:
    int beginIndex -> a
    int endIndex -> b
    void <init>(int,int) -> <init>
    int size() -> a
org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath -> org.eclipse.jgit.internal.b.d.l:
    long weight -> a
    org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice slice -> b
    void <init>(long,org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice) -> <init>
    int compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath) -> a
    int compareTo(java.lang.Object) -> compareTo
org.eclipse.jgit.internal.storage.pack.DeltaWindow -> org.eclipse.jgit.internal.b.d.m:
    org.eclipse.jgit.storage.pack.PackConfig config -> a
    org.eclipse.jgit.internal.storage.pack.DeltaCache deltaCache -> b
    org.eclipse.jgit.lib.ObjectReader reader -> c
    org.eclipse.jgit.lib.ProgressMonitor monitor -> d
    long bytesPerUnit -> e
    long bytesProcessed -> f
    long maxMemory -> g
    int maxDepth -> h
    org.eclipse.jgit.internal.storage.pack.ObjectToPack[] toSearch -> i
    int cur -> j
    int end -> k
    long loaded -> l
    org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry res -> m
    org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry bestBase -> n
    int deltaLen -> o
    java.lang.Object deltaBuf -> p
    java.util.zip.Deflater deflater -> q
    void <init>(org.eclipse.jgit.storage.pack.PackConfig,org.eclipse.jgit.internal.storage.pack.DeltaCache,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ProgressMonitor,long,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int) -> <init>
    org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice remaining() -> a
    boolean tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice) -> a
    void search() -> b
    void clear(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry) -> a
    boolean delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry) -> b
    void keepInWindow() -> c
    org.eclipse.jgit.internal.storage.pack.DeltaIndex index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry) -> c
    byte[] buffer(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry) -> d
    void checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long) -> a
org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream -> org.eclipse.jgit.internal.b.d.n:
    byte[] buf -> a
    int cnt -> b
    void <init>(int) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream -> org.eclipse.jgit.internal.b.d.o:
    java.util.zip.Deflater deflater -> a
    byte[] zbuf -> b
    int outPtr -> c
    void <init>(java.util.zip.Deflater,byte[]) -> <init>
    int finish() -> a
    void write(byte[],int,int) -> write
    void write(int) -> write
org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry -> org.eclipse.jgit.internal.b.d.p:
    org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry prev -> a
    org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry next -> b
    org.eclipse.jgit.internal.storage.pack.ObjectToPack object -> c
    byte[] buffer -> d
    org.eclipse.jgit.internal.storage.pack.DeltaIndex index -> e
    void <init>() -> <init>
    void set(org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    boolean empty() -> a
org.eclipse.jgit.internal.storage.pack.ObjectReuseAsIs -> org.eclipse.jgit.internal.b.d.q:
    org.eclipse.jgit.internal.storage.file.LocalObjectToPack newObjectToPack$5906e6a1$22a8e1a1$5d7629c7(org.eclipse.jgit.revwalk.RevObject,int) -> a
    void selectObjectRepresentation$24cf45e5(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection) -> a
    void writeObjects$3054e7c1(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.util.BlockList) -> a
    void copyObjectAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack,boolean) -> a
org.eclipse.jgit.internal.storage.pack.ObjectToPack -> org.eclipse.jgit.internal.b.d.r:
    org.eclipse.jgit.lib.ObjectId deltaBase -> a
    int flags -> b
    int pathHash -> c
    org.eclipse.jgit.internal.storage.pack.DeltaCache$Ref cachedDelta -> j
    void <init>(org.eclipse.jgit.lib.ObjectId,int) -> <init>
    org.eclipse.jgit.lib.ObjectId getDeltaBaseId() -> b
    org.eclipse.jgit.internal.storage.pack.ObjectToPack getDeltaBase() -> c
    void setDeltaBase(org.eclipse.jgit.lib.ObjectId) -> a
    void setCachedDelta(org.eclipse.jgit.internal.storage.pack.DeltaCache$Ref) -> a
    org.eclipse.jgit.internal.storage.pack.DeltaCache$Ref popCachedDelta() -> d
    void clearDeltaBase() -> e
    boolean isDeltaRepresentation() -> f
    boolean isWritten() -> g
    int getType() -> h
    int getDeltaDepth() -> i
    void setDeltaDepth(int) -> a
    int getChainLength() -> j
    void setChainLength(int) -> b
    void clearChainLength() -> k
    boolean wantWrite() -> l
    boolean isReuseAsIs() -> m
    void setReuseAsIs() -> n
    void clearReuseAsIs() -> a
    boolean isDoNotDelta() -> o
    void setDoNotDelta() -> p
    boolean isEdge() -> q
    boolean doNotAttemptDelta() -> r
    void setDeltaAttempted(boolean) -> a
    int getPathHash() -> s
    void setPathHash(int) -> c
    int getCachedSize() -> t
    void setCachedSize(int) -> d
    void select$5b1de267$26f4b05a(org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.internal.storage.pack.PackExt -> org.eclipse.jgit.internal.b.d.s:
    org.eclipse.jgit.internal.storage.pack.PackExt PACK -> a
    org.eclipse.jgit.internal.storage.pack.PackExt INDEX -> b
    org.eclipse.jgit.internal.storage.pack.PackExt KEEP -> c
    org.eclipse.jgit.internal.storage.pack.PackExt BITMAP_INDEX -> d
    org.eclipse.jgit.internal.storage.pack.PackExt REFTABLE -> g
    org.eclipse.jgit.internal.storage.pack.PackExt REVERSE_INDEX -> e
    org.eclipse.jgit.internal.storage.pack.PackExt COMMIT_GRAPH -> f
    org.eclipse.jgit.internal.storage.pack.PackExt OBJECT_SIZE_INDEX -> h
    java.lang.String ext -> i
    org.eclipse.jgit.internal.storage.pack.PackExt[] ENUM$VALUES -> j
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String getExtension() -> a
    java.lang.String getTmpExtension() -> b
    java.lang.String toString() -> toString
    org.eclipse.jgit.internal.storage.pack.PackExt[] values() -> c
org.eclipse.jgit.internal.storage.pack.PackOutputStream -> org.eclipse.jgit.internal.b.d.t:
    org.eclipse.jgit.internal.storage.pack.PackWriter packWriter -> a
    byte[] headerBuffer -> b
    byte[] copyBuffer -> c
    boolean ofsDelta -> d
    void <init>(org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream,org.eclipse.jgit.internal.storage.pack.PackWriter) -> <init>
    void writeFileHeader$255f656(long) -> a
    void writeObject(org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    void writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long) -> a
    int objectHeader(long,int,byte[]) -> a
    byte[] getCopyBuffer() -> d
    void endObject() -> e
org.eclipse.jgit.internal.storage.pack.PackWriter -> org.eclipse.jgit.internal.b.d.u:
    java.util.Set NONE -> a
    java.util.concurrent.ConcurrentHashMap instances$5a983bf5 -> c
    org.eclipse.jgit.util.BlockList[] objectsLists -> d
    org.eclipse.jgit.lib.ObjectIdOwnerMap objectsMap -> e
    org.eclipse.jgit.util.BlockList edgeObjects$7865b31 -> f
    java.util.ArrayList cachedPacks$7865b31 -> g
    java.util.Set tagTargets -> h
    java.util.Set excludeFromBitmapSelection -> i
    org.eclipse.jgit.lib.ObjectIdSet[] excludeInPacks -> j
    org.eclipse.jgit.lib.ObjectIdSet excludeInPackLast -> k
    java.util.zip.Deflater myDeflater -> l
    org.eclipse.jgit.lib.ObjectReader reader -> m
    org.eclipse.jgit.internal.storage.pack.ObjectReuseAsIs reuseSupport -> n
    org.eclipse.jgit.storage.pack.PackConfig config -> b
    org.eclipse.jgit.storage.pack.PackStatistics$Accumulator stats -> o
    org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState state -> p
    java.lang.ref.WeakReference selfRef -> q
    org.eclipse.jgit.storage.pack.PackStatistics$ObjectType$Accumulator typeStats -> r
    org.eclipse.jgit.util.BlockList sortedByName$7865b31 -> s
    byte[] packcsum -> t
    boolean deltaBaseAsOffset -> u
    boolean reuseDeltas -> v
    boolean reuseValidate -> w
    boolean createBitmaps -> x
    boolean ignoreMissingUninteresting -> y
    boolean canBuildBitmaps -> z
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder writeBitmaps -> A
    java.util.zip.CRC32 crc32 -> B
    org.eclipse.jgit.transport.FilterSpec filterSpec -> C
    int[] $SWITCH_TABLE$org$eclipse$jgit$internal$storage$pack$PackWriter$PackingPhase -> D
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.storage.pack.PackConfig,org.eclipse.jgit.lib.ObjectReader) -> <init>
    void <init>(org.eclipse.jgit.storage.pack.PackConfig,org.eclipse.jgit.lib.ObjectReader,byte) -> <init>
    boolean isDeltaBaseAsOffset() -> a
    void setDeltaBaseAsOffset$1385ff() -> b
    void setCreateBitmaps(boolean) -> a
    boolean isIndexDisabled() -> g
    void setTagTargets$54367556(java.util.HashSet) -> a
    long getObjectCount() -> c
    void excludeObjects(org.eclipse.jgit.lib.ObjectIdSet) -> a
    void preparePack$6131fb95(org.eclipse.jgit.lib.ProgressMonitor,java.util.HashSet,java.util.Set,java.util.Set,java.util.HashSet) -> a
    org.eclipse.jgit.lib.ObjectId computeName() -> d
    int getIndexVersion() -> e
    void writeIndex$6bd8bfdc$1d9475fa(org.eclipse.jgit.internal.storage.file.BasePackIndexWriter) -> a
    boolean isReverseIndexEnabled() -> f
    void writeReverseIndex(java.io.OutputStream) -> a
    void writeBitmapIndex$58f237d5(org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1) -> a
    org.eclipse.jgit.util.BlockList sortByName$5679c1ce() -> h
    void beginPhase(org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase,org.eclipse.jgit.lib.ProgressMonitor,long) -> a
    void writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream) -> a
    void close() -> close
    void searchForReuse$79bf683a(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.util.BlockList) -> a
    void cutDeltaChains(org.eclipse.jgit.util.BlockList) -> a
    int findObjectsNeedingDelta(org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int,int) -> a
    void reselectNonDelta(org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    void writeObjects$3054e7c1(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.util.BlockList) -> a
    void writeObject(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    void writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> b
    void writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> c
    void writeWholeObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> d
    void writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> e
    org.eclipse.jgit.util.TemporaryBuffer$Heap delta(org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> b
    byte[] buffer$5980f67f(org.eclipse.jgit.lib.ObjectId) -> a
    byte[] buffer$1594a750(org.eclipse.jgit.storage.pack.PackConfig,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectId) -> a
    java.util.zip.Deflater deflater() -> i
    void addObject$69e33c4a(org.eclipse.jgit.revwalk.RevObject) -> a
    void addObject$29706c3c$530ff72c(org.eclipse.jgit.revwalk.RevObject,int,int) -> a
    boolean exclude$36eb52e0$21a6ca88(org.eclipse.jgit.revwalk.RevObject) -> b
    void select$614fdce7(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation) -> a
    boolean prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$internal$storage$pack$PackWriter$PackingPhase() -> j
    int lambda$1(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
org.eclipse.jgit.internal.storage.pack.PackWriter$DepthAwareVisitationPolicy -> org.eclipse.jgit.internal.b.d.v:
    java.util.HashMap lowestDepthVisited$5a983bf5 -> a
    org.eclipse.jgit.revwalk.ObjectWalk walk -> b
    void <init>(org.eclipse.jgit.revwalk.ObjectWalk) -> <init>
    boolean shouldVisit(org.eclipse.jgit.revwalk.RevObject) -> a
    void visited(org.eclipse.jgit.revwalk.RevObject) -> b
org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState -> org.eclipse.jgit.internal.b.d.w:
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase phase -> a
    void <init>(org.eclipse.jgit.internal.storage.pack.PackWriter) -> <init>
org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase -> org.eclipse.jgit.internal.b.d.x:
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase COUNTING -> a
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase GETTING_SIZES -> b
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase FINDING_SOURCES -> c
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase COMPRESSING -> d
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase WRITING -> e
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase BUILDING_BITMAPS -> f
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase[] ENUM$VALUES -> g
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.internal.storage.pack.PackWriter$PackingPhase[] values() -> a
org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer -> org.eclipse.jgit.internal.b.d.y:
    java.util.Comparator ORDER_BY_REVERSE_TIMESTAMP -> a
    org.eclipse.jgit.lib.ObjectReader reader -> b
    org.eclipse.jgit.lib.ProgressMonitor pm -> c
    java.util.Set want -> d
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder writeBitmaps -> e
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl commitBitmapIndex -> f
    org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper bitmapRemapper -> g
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl bitmapIndex -> h
    int contiguousCommitCount -> i
    int recentCommitCount -> j
    int recentCommitSpan -> k
    int distantCommitSpan -> l
    int excessiveBranchCount -> m
    int excessiveBranchTipCount -> n
    long inactiveBranchTimestamp -> o
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,org.eclipse.jgit.lib.ProgressMonitor,java.util.Set,org.eclipse.jgit.storage.pack.PackConfig) -> <init>
    org.eclipse.jgit.util.BlockList selectCommits$33a99d6a(int,java.util.Set) -> a
    int nextSpan(int) -> a
    org.eclipse.jgit.revwalk.BitmapWalker newBitmapWalker() -> a
    int lambda$0(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit) -> a
org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$CommitSelectionHelper -> org.eclipse.jgit.internal.b.d.z:
    java.util.HashSet newWants$5a95723b -> a
    java.util.ArrayList newWantsByNewest$7865b31 -> b
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder reusedCommitsBitmap$7f48663e -> c
    java.util.ArrayList reusedCommits$7865b31 -> d
    org.eclipse.jgit.revwalk.RevCommit[] newCommitsByOldest -> e
    int newCommitStartPos -> f
    void <init>(java.util.HashSet,org.eclipse.jgit.revwalk.RevCommit[],int,java.util.ArrayList,org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder,java.util.ArrayList) -> <init>
    java.util.Iterator iterator() -> iterator
org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$CommitSelectionHelper$1 -> org.eclipse.jgit.internal.b.d.A:
    int pos -> a
    org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$CommitSelectionHelper this$1 -> b
    void <init>(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$CommitSelectionHelper) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$NotInBitmapFilter -> org.eclipse.jgit.internal.b.d.B:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder bitmap$7f48663e -> c
    void <init>(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder) -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    boolean requiresCommitBody() -> b
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    java.lang.Object clone() -> clone
org.eclipse.jgit.internal.storage.pack.ThreadSafeDeltaCache -> org.eclipse.jgit.internal.b.d.C:
    java.util.concurrent.locks.ReentrantLock lock -> a
    void <init>(org.eclipse.jgit.storage.pack.PackConfig) -> <init>
    boolean canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack) -> a
    void credit(int) -> a
    org.eclipse.jgit.internal.storage.pack.DeltaCache$Ref cache(byte[],int,int) -> a
org.eclipse.jgit.internal.storage.reftable.BlockReader -> org.eclipse.jgit.internal.b.e.a:
    byte blockType -> a
    long endPosition -> b
    byte[] buf -> c
    int bufLen -> d
    int ptr -> e
    int keysStart -> f
    int keysEnd -> g
    int restartCnt -> h
    int restartTbl -> i
    byte[] nameBuf -> j
    int nameLen -> k
    int valueType -> l
    void <init>() -> <init>
    byte type() -> a
    long endPosition() -> b
    boolean next() -> c
    void parseKey() -> d
    java.lang.String name() -> e
    boolean match(byte[],boolean) -> a
    long readPositionFromIndex() -> f
    org.eclipse.jgit.lib.Ref readRef(long) -> a
    long readLogUpdateIndex() -> g
    org.eclipse.jgit.internal.storage.reftable.BlockReader$1 readLogEntry$474b0b13() -> h
    org.eclipse.jgit.lib.ObjectId readValueId() -> k
    java.lang.String readValueString() -> l
    void readBlock$752f1b32(org.eclipse.jgit.internal.storage.io.BlockSource$2,long,int) -> a
    void readBlockIntoBuf(org.eclipse.jgit.internal.storage.io.BlockSource,long,int) -> a
    long inflateBuf$30b4be05(org.eclipse.jgit.internal.storage.io.BlockSource$2,long,int,int) -> a
    void verifyIndex() -> i
    int seekKey(byte[]) -> a
    void skipValue() -> j
    void skipString() -> m
    int readVarint32() -> n
    long readVarint64() -> o
    org.eclipse.jgit.lib.ObjectIdRef$Unpeeled newRef$374eaf8b(java.lang.String,long) -> a
    java.io.IOException invalidBlock$1647a77c(java.util.zip.DataFormatException) -> a
org.eclipse.jgit.internal.storage.reftable.BlockReader$1 -> org.eclipse.jgit.internal.b.e.b:
    org.eclipse.jgit.lib.ObjectId val$oldId -> a
    org.eclipse.jgit.lib.ObjectId val$newId -> b
    org.eclipse.jgit.lib.PersonIdent val$who -> c
    java.lang.String val$msg -> d
    void <init>(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.PersonIdent,java.lang.String) -> <init>
    org.eclipse.jgit.lib.ObjectId getOldId() -> g
    org.eclipse.jgit.lib.ObjectId getNewId() -> h
    org.eclipse.jgit.lib.PersonIdent getWho() -> i
    java.lang.String getComment() -> j
    org.eclipse.jgit.internal.storage.file.UnpackedObject parseCheckout$1cb8481e$71041aa5() -> k
org.eclipse.jgit.internal.storage.reftable.BlockSizeTooSmallException -> org.eclipse.jgit.internal.b.e.c:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Exception) -> <init>
org.eclipse.jgit.internal.storage.reftable.BlockWriter -> org.eclipse.jgit.internal.b.e.d:
    byte blockType -> a
    byte keyType -> b
    java.util.ArrayList entries$7865b31 -> c
    int blockLimitBytes -> d
    int restartInterval -> e
    int entriesSumBytes -> f
    int restartCnt -> g
    void <init>(byte,byte,int,int) -> <init>
    byte blockType() -> a
    boolean padBetweenBlocks() -> b
    boolean padBetweenBlocks(byte) -> a
    byte[] lastKey() -> c
    void mustAdd(org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry) -> a
    boolean tryAdd(org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry) -> b
    boolean tryAdd(org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry,boolean) -> a
    boolean nextShouldBeRestart() -> d
    int computeBlockBytes(int,boolean) -> a
    int computeBlockBytes(int,int) -> a
    void writeTo(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
    int commonPrefix(byte[],int,byte[]) -> a
    int compare(byte[],int,int,byte[],int,int) -> a
org.eclipse.jgit.internal.storage.reftable.BlockWriter$DeleteLogEntry -> org.eclipse.jgit.internal.b.e.e:
    void <init>(java.lang.String,long) -> <init>
    byte blockType() -> a
    int valueType() -> b
    int valueSize() -> c
    void writeValue(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry -> org.eclipse.jgit.internal.b.e.f:
    byte[] key -> a
    int prefixLen -> b
    boolean restart -> c
    int compare(org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry,org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry) -> a
    void <init>(byte[]) -> <init>
    int sizeBytes() -> d
    byte blockType() -> a
    int valueType() -> b
    int valueSize() -> c
    void writeValue(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
org.eclipse.jgit.internal.storage.reftable.BlockWriter$IndexEntry -> org.eclipse.jgit.internal.b.e.g:
    long blockPosition -> d
    void <init>(byte[],long) -> <init>
    byte blockType() -> a
    int valueType() -> b
    int valueSize() -> c
    void writeValue(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
org.eclipse.jgit.internal.storage.reftable.BlockWriter$LogEntry -> org.eclipse.jgit.internal.b.e.h:
    org.eclipse.jgit.lib.ObjectId oldId -> d
    org.eclipse.jgit.lib.ObjectId newId -> e
    long timeSecs -> f
    short tz -> g
    byte[] name -> h
    byte[] email -> i
    byte[] msg -> j
    void <init>(java.lang.String,long,org.eclipse.jgit.lib.PersonIdent,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,java.lang.String) -> <init>
    byte[] key(java.lang.String,long) -> a
    byte blockType() -> a
    int valueType() -> b
    int valueSize() -> c
    void writeValue(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
org.eclipse.jgit.internal.storage.reftable.BlockWriter$ObjEntry -> org.eclipse.jgit.internal.b.e.i:
    org.eclipse.jgit.util.LongList blockPos -> d
    void <init>(int,org.eclipse.jgit.internal.storage.reftable.ReftableWriter$RefList,org.eclipse.jgit.util.LongList) -> <init>
    byte blockType() -> a
    int valueType() -> b
    int valueSize() -> c
    void writeValue(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
org.eclipse.jgit.internal.storage.reftable.BlockWriter$RefEntry -> org.eclipse.jgit.internal.b.e.j:
    org.eclipse.jgit.lib.Ref ref -> d
    long updateIndexDelta -> e
    void <init>(org.eclipse.jgit.lib.Ref,long) -> <init>
    byte blockType() -> a
    int valueType() -> b
    int valueSize() -> c
    void writeValue(org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> a
    byte[] nameUtf8(org.eclipse.jgit.lib.Ref) -> a
org.eclipse.jgit.internal.storage.reftable.EmptyLogCursor -> org.eclipse.jgit.internal.b.e.k:
    void <init>() -> <init>
    boolean next() -> a
    java.lang.String getRefName() -> b
    long getUpdateIndex() -> c
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReflogEntry$474b0b13$297f7e12() -> d
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.LogCursor -> org.eclipse.jgit.internal.b.e.l:
    void <init>() -> <init>
    boolean next() -> a
    java.lang.String getRefName() -> b
    long getUpdateIndex() -> c
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReflogEntry$474b0b13$297f7e12() -> d
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.MergedReftable -> org.eclipse.jgit.internal.b.e.m:
    org.eclipse.jgit.internal.storage.reftable.ReftableReader[] tables -> b
    void <init>(java.util.List) -> <init>
    long maxUpdateIndex() -> a
    long minUpdateIndex() -> b
    org.eclipse.jgit.internal.storage.reftable.RefCursor allRefs() -> c
    org.eclipse.jgit.internal.storage.reftable.RefCursor seekRef(java.lang.String) -> a
    org.eclipse.jgit.internal.storage.reftable.RefCursor seekRefsWithPrefix(java.lang.String) -> b
    org.eclipse.jgit.internal.storage.reftable.MergedReftable$MergedLogCursor allLogs$25d326c8() -> d
    org.eclipse.jgit.internal.storage.reftable.LogCursor seekLog(java.lang.String,long) -> a
    int queueSize() -> e
org.eclipse.jgit.internal.storage.reftable.MergedReftable$LogQueueEntry -> org.eclipse.jgit.internal.b.e.n:
    org.eclipse.jgit.internal.storage.reftable.LogCursor lc -> a
    int stackIdx -> b
    int compare(org.eclipse.jgit.internal.storage.reftable.MergedReftable$LogQueueEntry,org.eclipse.jgit.internal.storage.reftable.MergedReftable$LogQueueEntry) -> a
    void <init>(org.eclipse.jgit.internal.storage.reftable.LogCursor,int) -> <init>
org.eclipse.jgit.internal.storage.reftable.MergedReftable$MergedLogCursor -> org.eclipse.jgit.internal.b.e.o:
    java.util.PriorityQueue queue -> a
    java.lang.String refName -> b
    long updateIndex -> c
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData entry$161d702c$685ab4d1 -> d
    org.eclipse.jgit.internal.storage.reftable.MergedReftable this$0 -> e
    void <init>(org.eclipse.jgit.internal.storage.reftable.MergedReftable) -> <init>
    void add(org.eclipse.jgit.internal.storage.reftable.MergedReftable$LogQueueEntry) -> a
    boolean next() -> a
    java.lang.String getRefName() -> b
    long getUpdateIndex() -> c
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReflogEntry$474b0b13$297f7e12() -> d
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.MergedReftable$MergedRefCursor -> org.eclipse.jgit.internal.b.e.p:
    java.util.PriorityQueue queue -> a
    org.eclipse.jgit.internal.storage.reftable.MergedReftable$RefQueueEntry head -> b
    org.eclipse.jgit.lib.Ref ref -> c
    org.eclipse.jgit.internal.storage.reftable.MergedReftable this$0 -> d
    void <init>(org.eclipse.jgit.internal.storage.reftable.MergedReftable) -> <init>
    void add(org.eclipse.jgit.internal.storage.reftable.MergedReftable$RefQueueEntry) -> a
    boolean next() -> a
    org.eclipse.jgit.internal.storage.reftable.MergedReftable$RefQueueEntry poll() -> d
    org.eclipse.jgit.lib.Ref getRef() -> b
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.MergedReftable$RefQueueEntry -> org.eclipse.jgit.internal.b.e.q:
    org.eclipse.jgit.internal.storage.reftable.RefCursor rc -> a
    int stackIdx -> b
    int compare(org.eclipse.jgit.internal.storage.reftable.MergedReftable$RefQueueEntry,org.eclipse.jgit.internal.storage.reftable.MergedReftable$RefQueueEntry) -> a
    void <init>(org.eclipse.jgit.internal.storage.reftable.RefCursor,int) -> <init>
    java.lang.String name() -> a
    long updateIndex() -> b
org.eclipse.jgit.internal.storage.reftable.RefCursor -> org.eclipse.jgit.internal.b.e.r:
    void <init>() -> <init>
    boolean next() -> a
    org.eclipse.jgit.lib.Ref getRef() -> b
    boolean wasDeleted() -> c
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.Reftable -> org.eclipse.jgit.internal.b.e.s:
    boolean includeDeletes -> a
    void <init>() -> <init>
    void setIncludeDeletes(boolean) -> a
    long maxUpdateIndex() -> a
    org.eclipse.jgit.internal.storage.reftable.RefCursor allRefs() -> c
    org.eclipse.jgit.internal.storage.reftable.RefCursor seekRef(java.lang.String) -> a
    org.eclipse.jgit.internal.storage.reftable.RefCursor seekRefsWithPrefix(java.lang.String) -> b
    org.eclipse.jgit.internal.storage.reftable.LogCursor seekLog(java.lang.String) -> c
    org.eclipse.jgit.internal.storage.reftable.LogCursor seekLog(java.lang.String,long) -> a
    org.eclipse.jgit.lib.Ref exactRef(java.lang.String) -> d
    boolean hasRef(java.lang.String) -> e
    org.eclipse.jgit.lib.Ref resolve(org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.lib.Ref resolve(org.eclipse.jgit.lib.Ref,int) -> a
org.eclipse.jgit.internal.storage.reftable.ReftableCompactor -> org.eclipse.jgit.internal.b.e.t:
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter writer -> a
    java.util.ArrayDeque tables -> b
    boolean includeDeletes -> c
    long reflogExpireMaxUpdateIndex -> d
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Stats stats -> e
    void <init>(java.io.FileOutputStream) -> <init>
    org.eclipse.jgit.internal.storage.reftable.ReftableCompactor setConfig$624be931(org.eclipse.jgit.storage.pack.PackStatistics$ObjectType) -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableCompactor setIncludeDeletes(boolean) -> a
    void addAll$61fb9e66(java.util.ArrayList) -> a
    void compact() -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Stats getStats() -> b
org.eclipse.jgit.internal.storage.reftable.ReftableConstants -> org.eclipse.jgit.internal.b.e.u:
    byte[] FILE_HEADER_MAGIC -> a
    void <clinit>() -> <clinit>
    boolean isFileHeaderMagic$1cf967a0(byte[],int) -> a
    long reverseUpdateIndex(long) -> a
org.eclipse.jgit.internal.storage.reftable.ReftableDatabase -> org.eclipse.jgit.internal.b.e.v:
    java.util.concurrent.locks.ReentrantLock lock -> a
    org.eclipse.jgit.internal.storage.reftable.MergedReftable mergedTables$24aa2976 -> b
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.reftable.MergedReftable openMergedReftable() -> a
    long nextUpdateIndex() -> b
    org.eclipse.jgit.internal.storage.reftable.ReftableReflogReader getReflogReader$4491a17e(java.lang.String) -> a
    java.util.concurrent.locks.ReentrantLock getLock() -> c
    org.eclipse.jgit.internal.storage.reftable.MergedReftable reader$7eea7029() -> e
    boolean isNameConflicting$3cb62be5(java.lang.String,java.util.TreeSet,java.util.HashSet) -> a
    org.eclipse.jgit.lib.Ref exactRef(java.lang.String) -> b
    java.util.List getRefsByPrefix(java.lang.String) -> c
    void clearCache() -> d
org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream -> org.eclipse.jgit.internal.b.e.w:
    byte[] tmp -> a
    org.eclipse.jgit.util.io.CountingOutputStream out -> b
    boolean alignBlocks -> c
    java.util.zip.Deflater deflater -> d
    java.util.zip.DeflaterOutputStream compressor -> e
    int blockType -> f
    int blockSize -> g
    int blockStart -> h
    byte[] blockBuf -> i
    int cur -> j
    long paddingUsed -> k
    void <init>(java.io.FileOutputStream,int,boolean) -> <init>
    void setBlockSize(int) -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
    int bytesWrittenInBlock() -> a
    int bytesAvailableInBlock() -> b
    long paddingUsed() -> c
    long size() -> d
    int computeVarintSize(long) -> a
    void writeVarint(long) -> b
    void writeInt16(int) -> b
    void writeInt24(int) -> c
    void writeId(org.eclipse.jgit.lib.ObjectId) -> a
    void writeVarintString(byte[]) -> a
    void ensureBytesAvailableInBlockBuf(int) -> d
    void flushFileHeader() -> e
    void beginBlock(byte) -> a
    void flushBlock() -> f
    void padBetweenBlocksToNextBlock() -> g
    void finishFile() -> h
org.eclipse.jgit.internal.storage.reftable.ReftableReader -> org.eclipse.jgit.internal.b.e.x:
    org.eclipse.jgit.internal.storage.io.BlockSource$2 src$605422c2 -> b
    int blockSize -> c
    long minUpdateIndex -> d
    long maxUpdateIndex -> e
    long refEnd -> f
    long objPosition -> g
    long logPosition -> h
    long logEnd -> i
    long refIndexPosition -> j
    long objIndexPosition -> k
    long logIndexPosition -> l
    org.eclipse.jgit.internal.storage.reftable.BlockReader refIndex -> m
    org.eclipse.jgit.internal.storage.reftable.BlockReader logIndex -> n
    org.eclipse.jgit.util.LongMap indexCache -> o
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.io.BlockSource$2) -> <init>
    long minUpdateIndex() -> b
    long maxUpdateIndex() -> a
    org.eclipse.jgit.internal.storage.reftable.RefCursor allRefs() -> c
    org.eclipse.jgit.internal.storage.reftable.RefCursor seekRef(java.lang.String) -> a
    org.eclipse.jgit.internal.storage.reftable.RefCursor seekRefsWithPrefix(java.lang.String) -> b
    org.eclipse.jgit.internal.storage.reftable.LogCursor allLogs() -> d
    org.eclipse.jgit.internal.storage.reftable.LogCursor seekLog(java.lang.String,long) -> a
    org.eclipse.jgit.internal.storage.reftable.BlockReader seek(byte,byte[],org.eclipse.jgit.internal.storage.reftable.BlockReader,long,long) -> a
    org.eclipse.jgit.internal.storage.reftable.BlockReader binarySearch(byte,byte[],long,long) -> a
    void readFileHeader() -> f
    void readFileFooter() -> g
    byte[] readHeaderOrFooter(long,int) -> a
    void initRefIndex() -> h
    void initLogIndex() -> i
    org.eclipse.jgit.internal.storage.reftable.BlockReader readIndex(long) -> a
    int readBlockLen(long) -> b
    org.eclipse.jgit.internal.storage.reftable.BlockReader readBlock(long,long) -> a
    int blocksIn(long,long) -> b
    long size() -> e
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.ReftableReader$LogCursorImpl -> org.eclipse.jgit.internal.b.e.y:
    long scanEnd -> b
    byte[] match -> c
    java.lang.String refName -> d
    long updateIndex -> e
    org.eclipse.jgit.internal.storage.reftable.BlockReader$1 entry$161d702c$685ab4d1 -> f
    org.eclipse.jgit.internal.storage.reftable.BlockReader block -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableReader this$0 -> g
    void <init>(org.eclipse.jgit.internal.storage.reftable.ReftableReader,long,byte[]) -> <init>
    boolean next() -> a
    java.lang.String getRefName() -> b
    long getUpdateIndex() -> c
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReflogEntry$474b0b13$297f7e12() -> d
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.ReftableReader$RefCursorImpl -> org.eclipse.jgit.internal.b.e.z:
    long scanEnd -> b
    byte[] match -> c
    boolean prefix -> d
    org.eclipse.jgit.lib.Ref ref -> e
    org.eclipse.jgit.internal.storage.reftable.BlockReader block -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableReader this$0 -> f
    void <init>(org.eclipse.jgit.internal.storage.reftable.ReftableReader,long,byte[],boolean) -> <init>
    boolean next() -> a
    org.eclipse.jgit.lib.Ref getRef() -> b
    void close() -> close
org.eclipse.jgit.internal.storage.reftable.ReftableReflogReader -> org.eclipse.jgit.internal.b.e.A:
    java.util.concurrent.locks.ReentrantLock lock$5f135e5d -> a
    org.eclipse.jgit.internal.storage.reftable.MergedReftable reftable$24aa2976 -> b
    java.lang.String refname -> c
    void <init>(java.util.concurrent.locks.ReentrantLock,org.eclipse.jgit.internal.storage.reftable.MergedReftable,java.lang.String) -> <init>
    java.util.List getReverseEntries() -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReverseEntry$38ebbaac$66144207(int) -> a
    java.util.ArrayList getReverseEntries$22f3aa59$3d1b4708() -> b
org.eclipse.jgit.internal.storage.reftable.ReftableWriter -> org.eclipse.jgit.internal.b.e.B:
    org.eclipse.jgit.storage.pack.PackStatistics$ObjectType config$53ece3d8 -> a
    int refBlockSize -> b
    int logBlockSize -> c
    int restartInterval -> d
    int maxIndexLevels -> e
    boolean alignBlocks -> f
    boolean indexObjects -> g
    long minUpdateIndex -> h
    long maxUpdateIndex -> i
    java.io.FileOutputStream outputStream$33c83ab2 -> j
    org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream out -> k
    org.eclipse.jgit.lib.ObjectIdSubclassMap obj2ref -> l
    org.eclipse.jgit.internal.storage.reftable.BlockWriter$RefEntry lastRef$31501523 -> m
    org.eclipse.jgit.internal.storage.reftable.BlockWriter$LogEntry lastLog$31501523 -> n
    org.eclipse.jgit.internal.storage.reftable.BlockWriter cur -> o
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section refs -> p
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section objs -> q
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section logs -> r
    int objIdLen -> s
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Stats stats -> t
    void <init>(java.io.FileOutputStream) -> <init>
    void <init>(org.eclipse.jgit.storage.pack.PackStatistics$ObjectType,java.io.FileOutputStream) -> <init>
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter setConfig$4886164e(org.eclipse.jgit.storage.pack.PackStatistics$ObjectType) -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter setMinUpdateIndex(long) -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter setMaxUpdateIndex(long) -> b
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter begin() -> a
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter sortAndWriteRefs$2bd56027(java.util.ArrayList) -> a
    void writeRef(org.eclipse.jgit.lib.Ref) -> a
    void writeRef(org.eclipse.jgit.lib.Ref,long) -> a
    void throwIllegalEntry(org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry,org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry) -> a
    void indexRef(org.eclipse.jgit.lib.Ref,long) -> b
    void indexId(org.eclipse.jgit.lib.ObjectId,long) -> a
    void writeLog(java.lang.String,long,org.eclipse.jgit.lib.PersonIdent,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,java.lang.String) -> a
    void deleteLog(java.lang.String,long) -> a
    void beginLog() -> d
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter finish() -> b
    void finishRefAndObjSections() -> e
    void writeObjBlocks() -> f
    boolean shouldHaveIndex(org.eclipse.jgit.internal.storage.reftable.ReftableWriter$IndexBuilder) -> a
    void encodeHeader(byte[]) -> a
    long firstBlockPosition(org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section) -> a
    long indexPosition(org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section) -> b
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Stats getStats() -> c
    java.util.ArrayList sortById$7cc4bff1(org.eclipse.jgit.lib.ObjectIdSubclassMap) -> a
    int shortestUniqueAbbreviation$61fb9e59(java.util.ArrayList) -> b
    org.eclipse.jgit.internal.storage.reftable.BlockWriter$RefEntry lambda$0(org.eclipse.jgit.lib.Ref) -> b
org.eclipse.jgit.internal.storage.reftable.ReftableWriter$IndexBuilder -> org.eclipse.jgit.internal.b.e.C:
    byte keyType -> a
    java.util.ArrayList entries$7865b31 -> b
    long rootPosition -> c
    int bytes -> d
    int levels -> e
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter this$0 -> f
    void <init>(org.eclipse.jgit.internal.storage.reftable.ReftableWriter,byte) -> <init>
    void writeIndex() -> a
org.eclipse.jgit.internal.storage.reftable.ReftableWriter$RefList -> org.eclipse.jgit.internal.b.e.D:
    org.eclipse.jgit.util.LongList blockPos -> a
    void <init>(org.eclipse.jgit.lib.ObjectId) -> <init>
    void addBlock(long) -> a
org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Section -> org.eclipse.jgit.internal.b.e.E:
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter$IndexBuilder idx -> a
    long firstBlockPosition -> b
    long entryCnt -> c
    org.eclipse.jgit.internal.storage.reftable.ReftableWriter this$0 -> d
    void <init>(org.eclipse.jgit.internal.storage.reftable.ReftableWriter,byte) -> <init>
    long write(org.eclipse.jgit.internal.storage.reftable.BlockWriter$Entry) -> a
    void flushCurBlock() -> a
    void finishSectionMaybeWriteIndex() -> b
org.eclipse.jgit.internal.storage.reftable.ReftableWriter$Stats -> org.eclipse.jgit.internal.b.e.F:
    long minUpdateIndex -> a
    long refCnt -> b
    long logCnt -> c
    void <init>(org.eclipse.jgit.internal.storage.reftable.ReftableWriter,org.eclipse.jgit.internal.storage.reftable.ReftableOutputStream) -> <init>
    long minUpdateIndex() -> a
    long refCount() -> b
    long logCount() -> c
org.eclipse.jgit.internal.util.CleanupService -> org.eclipse.jgit.internal.c.a:
    java.lang.Object LOCK -> a
    org.eclipse.jgit.internal.util.CleanupService INSTANCE -> b
    boolean isOsgi -> c
    org.eclipse.jgit.internal.JGitText jgitText -> d
    boolean $assertionsDisabled -> e
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(byte) -> <init>
    org.eclipse.jgit.internal.util.CleanupService getInstance() -> a
    void register(java.lang.Runnable) -> a
    void lambda$0(java.lang.Runnable) -> b
org.eclipse.jgit.internal.util.Optionally -> org.eclipse.jgit.internal.c.b:
    org.eclipse.jgit.internal.util.Optionally$Empty EMPTY$51bcb935 -> a
    void <clinit>() -> <clinit>
    org.eclipse.jgit.internal.util.Optionally$Empty empty$f3e8b2a() -> a
    void clear() -> clear
    java.util.Optional getOptional() -> b
org.eclipse.jgit.internal.util.Optionally$Empty -> org.eclipse.jgit.internal.c.c:
    void <init>() -> <init>
    void clear() -> clear
    java.util.Optional getOptional() -> b
org.eclipse.jgit.internal.util.Optionally$Hard -> org.eclipse.jgit.internal.c.d:
    java.lang.Object element -> b
    void <init>(java.lang.Object) -> <init>
    void clear() -> clear
    java.util.Optional getOptional() -> b
org.eclipse.jgit.internal.util.Optionally$Soft -> org.eclipse.jgit.internal.c.e:
    void <init>(java.lang.Object) -> <init>
    java.util.Optional getOptional() -> b
org.eclipse.jgit.internal.util.ShutdownHook -> org.eclipse.jgit.internal.c.f:
    org.eclipse.jgit.internal.util.ShutdownHook INSTANCE -> a
    org.slf4j.Logger LOG -> b
    java.util.concurrent.ConcurrentHashMap$KeySetView listeners$5a95723b -> c
    java.util.concurrent.atomic.AtomicBoolean shutdownInProgress -> d
    void <clinit>() -> <clinit>
    void <init>(java.lang.String) -> <init>
    void cleanup() -> a
    void notify(org.eclipse.jgit.internal.util.ShutdownHook$Listener) -> c
    boolean register(org.eclipse.jgit.internal.util.ShutdownHook$Listener) -> a
    boolean unregister(org.eclipse.jgit.internal.util.ShutdownHook$Listener) -> b
    java.lang.Object lambda$1() -> b
org.eclipse.jgit.internal.util.ShutdownHook$Listener -> org.eclipse.jgit.internal.c.g:
    void onShutdown() -> onShutdown
org.eclipse.jgit.lib.AbbreviatedObjectId -> org.eclipse.jgit.lib.a:
    int nibbles -> a
    int w1 -> b
    int w2 -> c
    int w3 -> d
    int w4 -> e
    int w5 -> f
    boolean isId(java.lang.String) -> a
    org.eclipse.jgit.lib.AbbreviatedObjectId fromObjectId(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.AbbreviatedObjectId fromString(java.lang.String) -> b
    org.eclipse.jgit.lib.AbbreviatedObjectId fromHexString$7005882c(byte[],int) -> b
    int hexUInt32(byte[],int,int) -> a
    int mask(int,int,int) -> a
    void <init>(int,int,int,int,int,int) -> <init>
    boolean isComplete() -> a
    org.eclipse.jgit.lib.ObjectId toObjectId() -> b
    int prefixCompare$36eb52cf(org.eclipse.jgit.lib.ObjectId) -> a
    int prefixCompare(byte[],int) -> a
    int prefixCompare(int[],int) -> a
    int getFirstByte() -> c
    int mask(int,int) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String name() -> d
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.AnyObjectId -> org.eclipse.jgit.lib.b:
    int w1 -> d
    int w2 -> e
    int w3 -> f
    int w4 -> g
    int w5 -> h
    byte[] hexbyte -> a
    char[] hexchar -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean isEqual(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId) -> a
    int getFirstByte() -> u
    int compareTo(byte[],int) -> a
    int compareTo(int[],int) -> a
    int hashCode() -> hashCode
    boolean equals(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean equals(java.lang.Object) -> equals
    void copyRawTo(byte[],int) -> b
    void copyRawTo(java.io.OutputStream) -> a
    void writeRawInt(java.io.OutputStream,int) -> a
    void copyTo(java.io.OutputStream) -> b
    void copyTo$49634b87(byte[]) -> a
    void formatHexByte(byte[],int,int) -> a
    void copyTo$25a7eae3(char[],java.io.StringWriter) -> a
    char[] toHexCharArray() -> a
    void toHexCharArray(char[]) -> a
    void formatHexChar(char[],int,int) -> a
    java.lang.String toString() -> toString
    java.lang.String name() -> v
    java.lang.String getName() -> w
    org.eclipse.jgit.lib.AbbreviatedObjectId abbreviate(int) -> e
    org.eclipse.jgit.lib.ObjectId copy() -> x
    org.eclipse.jgit.lib.ObjectId toObjectId() -> y
    int compareTo(java.lang.Object) -> compareTo
org.eclipse.jgit.lib.AsyncObjectLoaderQueue -> org.eclipse.jgit.lib.c:
    boolean next() -> a
    org.eclipse.jgit.lib.ObjectId getObjectId() -> b
    org.eclipse.jgit.lib.ObjectLoader open() -> c
org.eclipse.jgit.lib.AsyncObjectSizeQueue -> org.eclipse.jgit.lib.d:
    boolean next() -> a
    org.eclipse.jgit.lib.ObjectId getCurrent() -> b
    org.eclipse.jgit.lib.ObjectId getObjectId() -> c
    long getSize() -> d
org.eclipse.jgit.lib.BaseRepositoryBuilder -> org.eclipse.jgit.lib.e:
    org.eclipse.jgit.util.FS fs -> fs
    java.io.File gitDir -> gitDir
    java.io.File gitCommonDir -> gitCommonDir
    java.io.File objectDirectory -> objectDirectory
    java.util.List alternateObjectDirectories -> alternateObjectDirectories
    java.io.File indexFile -> indexFile
    java.io.File workTree -> workTree
    java.lang.String initialBranch -> initialBranch
    java.util.List ceilingDirectories -> ceilingDirectories
    boolean bare -> bare
    boolean mustExist -> mustExist
    org.eclipse.jgit.lib.Config config -> config
    void <init>() -> <init>
    boolean isSymRef(byte[]) -> isSymRef
    java.io.File getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS) -> getSymRef
    org.eclipse.jgit.lib.BaseRepositoryBuilder setFS(org.eclipse.jgit.util.FS) -> setFS
    org.eclipse.jgit.util.FS getFS() -> getFS
    org.eclipse.jgit.lib.BaseRepositoryBuilder setGitDir(java.io.File) -> setGitDir
    java.io.File getGitDir() -> getGitDir
    org.eclipse.jgit.lib.BaseRepositoryBuilder setGitCommonDir(java.io.File) -> setGitCommonDir
    java.io.File getGitCommonDir() -> getGitCommonDir
    org.eclipse.jgit.lib.BaseRepositoryBuilder setObjectDirectory(java.io.File) -> setObjectDirectory
    java.io.File getObjectDirectory() -> getObjectDirectory
    org.eclipse.jgit.lib.BaseRepositoryBuilder addAlternateObjectDirectory(java.io.File) -> addAlternateObjectDirectory
    org.eclipse.jgit.lib.BaseRepositoryBuilder addAlternateObjectDirectories(java.util.Collection) -> addAlternateObjectDirectories
    org.eclipse.jgit.lib.BaseRepositoryBuilder addAlternateObjectDirectories(java.io.File[]) -> addAlternateObjectDirectories
    java.io.File[] getAlternateObjectDirectories() -> getAlternateObjectDirectories
    org.eclipse.jgit.lib.BaseRepositoryBuilder setBare() -> setBare
    boolean isBare() -> isBare
    org.eclipse.jgit.lib.BaseRepositoryBuilder setMustExist(boolean) -> setMustExist
    boolean isMustExist() -> isMustExist
    org.eclipse.jgit.lib.BaseRepositoryBuilder setWorkTree(java.io.File) -> setWorkTree
    java.io.File getWorkTree() -> getWorkTree
    org.eclipse.jgit.lib.BaseRepositoryBuilder setIndexFile(java.io.File) -> setIndexFile
    java.io.File getIndexFile() -> getIndexFile
    org.eclipse.jgit.lib.BaseRepositoryBuilder setInitialBranch(java.lang.String) -> setInitialBranch
    java.lang.String getInitialBranch() -> getInitialBranch
    org.eclipse.jgit.lib.BaseRepositoryBuilder readEnvironment() -> readEnvironment
    org.eclipse.jgit.lib.BaseRepositoryBuilder readEnvironment(org.eclipse.jgit.util.SystemReader) -> readEnvironment
    org.eclipse.jgit.lib.BaseRepositoryBuilder addCeilingDirectory(java.io.File) -> addCeilingDirectory
    org.eclipse.jgit.lib.BaseRepositoryBuilder addCeilingDirectories(java.util.Collection) -> addCeilingDirectories
    org.eclipse.jgit.lib.BaseRepositoryBuilder addCeilingDirectories(java.io.File[]) -> addCeilingDirectories
    org.eclipse.jgit.lib.BaseRepositoryBuilder findGitDir() -> findGitDir
    org.eclipse.jgit.lib.BaseRepositoryBuilder findGitDir(java.io.File) -> findGitDir
    org.eclipse.jgit.lib.BaseRepositoryBuilder setup() -> setup
    org.eclipse.jgit.lib.Repository build() -> build
    void requireGitDirOrWorkTree() -> requireGitDirOrWorkTree
    void setupGitDir() -> setupGitDir
    void setupCommonDir() -> setupCommonDir
    void setupWorkTree() -> setupWorkTree
    void setupInternals() -> setupInternals
    org.eclipse.jgit.lib.Config getConfig() -> getConfig
    org.eclipse.jgit.lib.Config loadConfig() -> loadConfig
    java.io.File guessWorkTreeOrFail() -> guessWorkTreeOrFail
    org.eclipse.jgit.util.FS safeFS() -> safeFS
    org.eclipse.jgit.lib.BaseRepositoryBuilder self() -> self
org.eclipse.jgit.lib.BatchingProgressMonitor -> org.eclipse.jgit.lib.f:
    void <clinit>() -> <clinit>
    void <init>() -> <init>
org.eclipse.jgit.lib.BitmapIndex -> org.eclipse.jgit.lib.g:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap getBitmap$380e555f(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder newBitmapBuilder$304338c3() -> b
org.eclipse.jgit.lib.BitmapIndex$Bitmap -> org.eclipse.jgit.lib.h:
    com.googlecode.javaewah.EWAHCompressedBitmap retrieveCompressed() -> a
org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder -> org.eclipse.jgit.lib.i:
    boolean contains(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder addObject$d3bf651(org.eclipse.jgit.revwalk.RevObject,int) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder or$267df25a(org.eclipse.jgit.lib.BitmapIndex$Bitmap) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmap build$600aaf08() -> c
    int cardinality() -> b
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl getBitmapIndex$49f66a95() -> d
org.eclipse.jgit.lib.BitmapIndex$BitmapLookupListener -> org.eclipse.jgit.lib.j:
    org.eclipse.jgit.lib.BitmapIndex$BitmapLookupListener$1 NOOP$40651dab -> a
    void <clinit>() -> <clinit>
org.eclipse.jgit.lib.BitmapIndex$BitmapLookupListener$1 -> org.eclipse.jgit.lib.k:
    void <init>() -> <init>
org.eclipse.jgit.lib.BitmapObject -> org.eclipse.jgit.lib.l:
    void <init>() -> <init>
org.eclipse.jgit.lib.CommitBuilder -> org.eclipse.jgit.lib.m:
    org.eclipse.jgit.lib.ObjectId[] EMPTY_OBJECTID_LIST -> a
    byte[] htree -> b
    byte[] hparent -> c
    byte[] hauthor -> d
    byte[] hcommitter -> e
    byte[] hgpgsig -> f
    org.eclipse.jgit.lib.ObjectId treeId -> g
    org.eclipse.jgit.lib.ObjectId[] parentIds -> h
    org.eclipse.jgit.lib.PersonIdent committer -> i
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void setTreeId$36eb52dc(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.lib.PersonIdent getAuthor() -> a
    void setAuthor(org.eclipse.jgit.lib.PersonIdent) -> a
    void setCommitter(org.eclipse.jgit.lib.PersonIdent) -> b
    void setParentIds(java.util.List) -> a
    byte[] build() -> b
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.CommitConfig -> org.eclipse.jgit.lib.n:
    org.eclipse.jgit.lib.Config$SectionParser KEY -> a
    char[] COMMENT_CHARS -> b
    org.eclipse.jgit.lib.CommitConfig$CleanupMode cleanupMode -> c
    char commentCharacter -> d
    boolean autoCommentChar -> e
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CommitConfig$CleanupMode -> f
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    char getCommentChar() -> a
    boolean isAutoCommentChar() -> b
    org.eclipse.jgit.lib.CommitConfig$CleanupMode getCleanupMode() -> c
    java.lang.String cleanText(java.lang.String,org.eclipse.jgit.lib.CommitConfig$CleanupMode,char) -> a
    char determineCommentChar(java.lang.String) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CommitConfig$CleanupMode() -> d
org.eclipse.jgit.lib.CommitConfig$CleanupMode -> org.eclipse.jgit.lib.o:
    org.eclipse.jgit.lib.CommitConfig$CleanupMode STRIP -> a
    org.eclipse.jgit.lib.CommitConfig$CleanupMode WHITESPACE -> b
    org.eclipse.jgit.lib.CommitConfig$CleanupMode VERBATIM -> c
    org.eclipse.jgit.lib.CommitConfig$CleanupMode SCISSORS -> d
    org.eclipse.jgit.lib.CommitConfig$CleanupMode DEFAULT -> e
    org.eclipse.jgit.lib.CommitConfig$CleanupMode[] ENUM$VALUES -> f
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    boolean matchConfigValue(java.lang.String) -> a
    org.eclipse.jgit.lib.CommitConfig$CleanupMode[] values() -> a
org.eclipse.jgit.lib.Config -> org.eclipse.jgit.lib.p:
    java.lang.String[] EMPTY_STRING_ARRAY -> a
    org.eclipse.jgit.lib.DefaultTypedConfigGetter typedGetter$5f5c09ea$685ab4d1 -> b
    org.eclipse.jgit.events.ListenerList listeners -> c
    java.util.concurrent.atomic.AtomicReference state -> d
    org.eclipse.jgit.lib.Config baseConfig -> e
    java.lang.String MISSING_ENTRY -> f
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.lib.StoredConfig) -> <init>
    org.eclipse.jgit.lib.Config getBaseConfig() -> a
    boolean isMissing(java.lang.String) -> a
    java.lang.String escapeValue(java.lang.String) -> e
    int getInt(java.lang.String,java.lang.String,int) -> a
    int getInt$78a4d1c3(java.lang.String,java.lang.String,java.lang.String) -> a
    long getLong(java.lang.String,java.lang.String,long) -> a
    long getLong(java.lang.String,java.lang.String,java.lang.String,long) -> a
    boolean getBoolean(java.lang.String,java.lang.String,boolean) -> a
    boolean getBoolean$78a511a5(java.lang.String,java.lang.String,java.lang.String) -> b
    java.lang.Enum getEnum$5ecfae63(java.lang.String,java.lang.String,java.lang.Enum) -> a
    java.lang.Object[] allValuesOf$56c1ec32(java.lang.Enum) -> a
    java.lang.Enum getEnum$1b2a2662(java.lang.Enum[],java.lang.String,java.lang.String,java.lang.Enum) -> a
    java.lang.String getString(java.lang.String,java.lang.String,java.lang.String) -> c
    java.lang.String[] getStringList(java.lang.String,java.lang.String,java.lang.String) -> d
    long getTimeUnit(java.lang.String,java.lang.String,java.lang.String,long,java.util.concurrent.TimeUnit) -> a
    java.nio.file.Path getPath$47b25843(java.lang.String,java.lang.String,org.eclipse.jgit.util.FS) -> a
    java.util.ArrayList getRefSpecs$4fe1c654(java.lang.String,java.lang.String,java.lang.String) -> e
    java.util.Set getSubsections(java.lang.String) -> b
    org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet getNames$68941238(java.lang.String,java.lang.String) -> a
    java.lang.Object get(org.eclipse.jgit.lib.Config$SectionParser) -> a
    org.eclipse.jgit.events.ListenerHandle addChangeListener(org.eclipse.jgit.events.ConfigChangedListener) -> a
    boolean notifyUponTransientChanges() -> b
    void fireConfigChangedEvent() -> c
    java.lang.String[] getRawStringList(java.lang.String,java.lang.String,java.lang.String) -> f
    org.eclipse.jgit.lib.ConfigSnapshot getState() -> f
    org.eclipse.jgit.lib.ConfigSnapshot getBaseState() -> g
    void setBoolean$78a511a1(java.lang.String,java.lang.String,boolean) -> b
    void setString(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void unsetSection(java.lang.String,java.lang.String) -> b
    boolean removeSection(java.lang.String,java.lang.String) -> c
    void setStringList(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> a
    java.lang.String toText() -> d
    void fromText(java.lang.String) -> c
    java.util.ArrayList fromTextRecurse$15ca46d9(java.lang.String,int,java.lang.String) -> a
    byte[] readIncludedConfig(java.lang.String) -> d
    void addIncludedConfig$634d3c24(java.util.ArrayList,org.eclipse.jgit.lib.ConfigLine,int) -> a
    org.eclipse.jgit.lib.ConfigSnapshot newState() -> h
    org.eclipse.jgit.lib.ConfigSnapshot newState$1da2c1b3(java.util.ArrayList) -> a
    void clear() -> e
    boolean isUtf8(byte[]) -> a
    java.lang.String readSectionName(org.eclipse.jgit.lib.Config$StringReader) -> a
    java.lang.String readKeyName(org.eclipse.jgit.lib.Config$StringReader) -> b
    java.lang.String readSubsectionName(org.eclipse.jgit.lib.Config$StringReader) -> c
    java.lang.String readValue(org.eclipse.jgit.lib.Config$StringReader) -> d
    java.lang.String toUnicodeLiteral(int) -> a
org.eclipse.jgit.lib.Config$ConfigEnum -> org.eclipse.jgit.lib.q:
    boolean matchConfigValue(java.lang.String) -> a
org.eclipse.jgit.lib.Config$SectionParser -> org.eclipse.jgit.lib.r:
    java.lang.Object parse(org.eclipse.jgit.lib.Config) -> parse
org.eclipse.jgit.lib.Config$StringReader -> org.eclipse.jgit.lib.s:
    char[] buf -> a
    int pos -> b
    void <init>(java.lang.String) -> <init>
    int read() -> a
    void reset() -> b
org.eclipse.jgit.lib.ConfigLine -> org.eclipse.jgit.lib.t:
    java.lang.String prefix -> a
    java.lang.String section -> b
    java.lang.String subsection -> c
    java.lang.String name -> d
    java.lang.String value -> e
    java.lang.String suffix -> f
    java.lang.String includedFrom -> g
    void <init>() -> <init>
    boolean match(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean match(java.lang.String,java.lang.String) -> a
    boolean eqIgnoreCase(java.lang.String,java.lang.String) -> b
    boolean eqSameCase(java.lang.String,java.lang.String) -> c
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.ConfigSnapshot -> org.eclipse.jgit.lib.u:
    java.util.List entryList -> a
    java.util.concurrent.ConcurrentHashMap cache$5a983bf5 -> b
    org.eclipse.jgit.lib.ConfigSnapshot baseState -> c
    java.util.ArrayList sorted$7865b31 -> d
    org.eclipse.jgit.lib.ConfigSnapshot$SectionNames names -> e
    void <init>(java.util.List,org.eclipse.jgit.lib.ConfigSnapshot) -> <init>
    java.util.Set getSubsections(java.lang.String) -> a
    org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet getNames$27ae6166$33e40dc9(java.lang.String,java.lang.String) -> a
    java.util.LinkedHashMap getNamesInternal$27b12b20(java.lang.String,java.lang.String,boolean) -> a
    java.lang.String[] get(java.lang.String,java.lang.String,java.lang.String) -> a
    int find$4c182849(java.util.ArrayList,java.lang.String,java.lang.String,java.lang.String) -> a
    int first$18ad9b6e(java.util.ArrayList,int,java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.ArrayList sorted$5679c1ce() -> a
    java.util.ArrayList sort$3038db21(java.util.List) -> a
    int compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet -> org.eclipse.jgit.lib.v:
    java.util.LinkedHashMap names$5a983bf5 -> a
    void <init>(java.util.LinkedHashMap) -> <init>
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet$1 -> org.eclipse.jgit.lib.w:
    java.util.Iterator val$i -> a
    void <init>(java.util.Iterator) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.lib.ConfigSnapshot$LineComparator -> org.eclipse.jgit.lib.x:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
org.eclipse.jgit.lib.ConfigSnapshot$SectionNames -> org.eclipse.jgit.lib.y:
    java.util.HashMap subsections$5a983bf5 -> a
    void <init>(org.eclipse.jgit.lib.ConfigSnapshot) -> <init>
org.eclipse.jgit.lib.Constants -> org.eclipse.jgit.lib.z:
    byte[] ENCODED_TYPE_COMMIT -> c
    byte[] ENCODED_TYPE_BLOB -> d
    byte[] ENCODED_TYPE_TREE -> e
    byte[] ENCODED_TYPE_TAG -> f
    byte[] PACK_SIGNATURE -> a
    org.eclipse.jgit.lib.ObjectId EMPTY_BLOB_ID -> b
    void <clinit>() -> <clinit>
    java.security.MessageDigest newMessageDigest() -> a
    java.lang.String typeString(int) -> a
    byte[] encodedTypeString(int) -> b
    int decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger) -> a
    byte[] encodeASCII(long) -> a
    byte[] encodeASCII(java.lang.String) -> a
    byte[] encode(java.lang.String) -> b
org.eclipse.jgit.lib.CoreConfig -> org.eclipse.jgit.lib.CoreConfig:
    org.eclipse.jgit.lib.Config$SectionParser KEY -> a
    int compression -> b
    java.lang.String attributesfile -> c
    boolean commitGraph -> d
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    int getCompression() -> a
    java.lang.String getAttributesFile() -> b
    boolean enableCommitGraph() -> c
org.eclipse.jgit.lib.CoreConfig$AutoCRLF -> org.eclipse.jgit.lib.CoreConfig$AutoCRLF:
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF FALSE -> FALSE
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF TRUE -> TRUE
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF INPUT -> INPUT
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$CheckStat -> org.eclipse.jgit.lib.CoreConfig$CheckStat:
    org.eclipse.jgit.lib.CoreConfig$CheckStat MINIMAL -> MINIMAL
    org.eclipse.jgit.lib.CoreConfig$CheckStat DEFAULT -> DEFAULT
    org.eclipse.jgit.lib.CoreConfig$CheckStat[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$CheckStat[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$CheckStat valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$EOL -> org.eclipse.jgit.lib.CoreConfig$EOL:
    org.eclipse.jgit.lib.CoreConfig$EOL CRLF -> CRLF
    org.eclipse.jgit.lib.CoreConfig$EOL LF -> LF
    org.eclipse.jgit.lib.CoreConfig$EOL NATIVE -> NATIVE
    org.eclipse.jgit.lib.CoreConfig$EOL[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$EOL[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$EOL valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$EolStreamType -> org.eclipse.jgit.lib.CoreConfig$EolStreamType:
    org.eclipse.jgit.lib.CoreConfig$EolStreamType TEXT_CRLF -> TEXT_CRLF
    org.eclipse.jgit.lib.CoreConfig$EolStreamType TEXT_LF -> TEXT_LF
    org.eclipse.jgit.lib.CoreConfig$EolStreamType AUTO_CRLF -> AUTO_CRLF
    org.eclipse.jgit.lib.CoreConfig$EolStreamType AUTO_LF -> AUTO_LF
    org.eclipse.jgit.lib.CoreConfig$EolStreamType DIRECT -> DIRECT
    org.eclipse.jgit.lib.CoreConfig$EolStreamType[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$EolStreamType[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$EolStreamType valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$HideDotFiles -> org.eclipse.jgit.lib.CoreConfig$HideDotFiles:
    org.eclipse.jgit.lib.CoreConfig$HideDotFiles FALSE -> FALSE
    org.eclipse.jgit.lib.CoreConfig$HideDotFiles TRUE -> TRUE
    org.eclipse.jgit.lib.CoreConfig$HideDotFiles DOTGITONLY -> DOTGITONLY
    org.eclipse.jgit.lib.CoreConfig$HideDotFiles[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$HideDotFiles[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$HideDotFiles valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$LogRefUpdates -> org.eclipse.jgit.lib.CoreConfig$LogRefUpdates:
    org.eclipse.jgit.lib.CoreConfig$LogRefUpdates FALSE -> FALSE
    org.eclipse.jgit.lib.CoreConfig$LogRefUpdates TRUE -> TRUE
    org.eclipse.jgit.lib.CoreConfig$LogRefUpdates ALWAYS -> ALWAYS
    org.eclipse.jgit.lib.CoreConfig$LogRefUpdates[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$LogRefUpdates[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$LogRefUpdates valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$SymLinks -> org.eclipse.jgit.lib.CoreConfig$SymLinks:
    org.eclipse.jgit.lib.CoreConfig$SymLinks FALSE -> FALSE
    org.eclipse.jgit.lib.CoreConfig$SymLinks TRUE -> TRUE
    org.eclipse.jgit.lib.CoreConfig$SymLinks[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$SymLinks[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$SymLinks valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat -> org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat:
    org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat ALWAYS -> ALWAYS
    org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat AFTER_OPEN -> AFTER_OPEN
    org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$TrustLooseRefStat valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat -> org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat:
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat NEVER -> NEVER
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat ALWAYS -> ALWAYS
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat AFTER_OPEN -> AFTER_OPEN
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat UNSET -> UNSET
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat[] values() -> values
    org.eclipse.jgit.lib.CoreConfig$TrustPackedRefsStat valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.DefaultTypedConfigGetter -> org.eclipse.jgit.lib.A:
    void <init>() -> <init>
    boolean getBoolean(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    java.lang.Enum getEnum$d2fa455(org.eclipse.jgit.lib.Config,java.lang.Enum[],java.lang.String,java.lang.String,java.lang.Enum) -> a
    int getInt(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,int) -> a
    long getLong(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,long) -> a
    long getTimeUnit(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String,long,java.util.concurrent.TimeUnit) -> a
    boolean match(java.lang.String,java.lang.String[]) -> a
    java.lang.IllegalArgumentException notTimeUnit(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.ArrayList getRefSpecs$2bf42cbd(org.eclipse.jgit.lib.Config,java.lang.String,java.lang.String,java.lang.String) -> a
org.eclipse.jgit.lib.FileMode -> org.eclipse.jgit.lib.B:
    org.eclipse.jgit.lib.FileMode$1 TREE$1ad008d6 -> a
    org.eclipse.jgit.lib.FileMode$2 SYMLINK$1ad008d6 -> b
    org.eclipse.jgit.lib.FileMode$3 REGULAR_FILE$1ad008d6 -> c
    org.eclipse.jgit.lib.FileMode$4 EXECUTABLE_FILE$1ad008d6 -> d
    org.eclipse.jgit.lib.FileMode$5 GITLINK$1ad008d6 -> e
    org.eclipse.jgit.lib.FileMode$6 MISSING$1ad008d6 -> f
    byte[] octalBytes -> g
    int modeBits -> h
    int objectType -> i
    void <clinit>() -> <clinit>
    org.eclipse.jgit.lib.FileMode fromBits(int) -> a
    void <init>(int,int) -> <init>
    boolean equals(int) -> b
    void copyTo$a3063a7(org.eclipse.jgit.util.TemporaryBuffer$Heap) -> a
    void copyTo(byte[],int) -> a
    int copyToLength() -> a
    int getObjectType() -> b
    java.lang.String toString() -> toString
    int getBits() -> c
org.eclipse.jgit.lib.FileMode$1 -> org.eclipse.jgit.lib.C:
    void <init>() -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileMode$2 -> org.eclipse.jgit.lib.D:
    void <init>() -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileMode$3 -> org.eclipse.jgit.lib.E:
    void <init>() -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileMode$4 -> org.eclipse.jgit.lib.F:
    void <init>() -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileMode$5 -> org.eclipse.jgit.lib.G:
    void <init>() -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileMode$6 -> org.eclipse.jgit.lib.H:
    void <init>() -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileMode$7 -> org.eclipse.jgit.lib.I:
    int val$bits -> g
    void <init>(int,int) -> <init>
    boolean equals(int) -> b
org.eclipse.jgit.lib.FileModeCache -> org.eclipse.jgit.lib.J:
    org.eclipse.jgit.lib.FileModeCache$CacheItem root -> a
    org.eclipse.jgit.lib.Repository repo -> b
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.lib.Repository getRepository() -> a
    org.eclipse.jgit.lib.FileModeCache$CacheItem safeCreateDirectory(java.lang.String,java.io.File,boolean) -> a
org.eclipse.jgit.lib.FileModeCache$CacheItem -> org.eclipse.jgit.lib.K:
    org.eclipse.jgit.lib.FileMode mode -> a
    java.util.HashMap children$5a983bf5 -> b
    void <init>(org.eclipse.jgit.lib.FileMode) -> <init>
    org.eclipse.jgit.lib.FileMode getMode() -> a
    org.eclipse.jgit.lib.FileModeCache$CacheItem child(java.lang.String) -> a
    org.eclipse.jgit.lib.FileModeCache$CacheItem insert(java.lang.String,org.eclipse.jgit.lib.FileMode) -> a
    org.eclipse.jgit.lib.FileModeCache$CacheItem remove(java.lang.String) -> b
    void setMode$19fa8131(org.eclipse.jgit.lib.FileMode$1) -> a
org.eclipse.jgit.lib.GpgConfig -> org.eclipse.jgit.lib.L:
    org.eclipse.jgit.lib.GpgConfig$GpgFormat keyFormat -> a
    java.lang.String signingKey -> b
    boolean signCommits -> c
    void <init>(org.eclipse.jgit.lib.StoredConfig) -> <init>
    org.eclipse.jgit.lib.GpgConfig$GpgFormat getKeyFormat() -> a
    java.lang.String getSigningKey() -> b
    boolean isSignCommits() -> c
org.eclipse.jgit.lib.GpgConfig$GpgFormat -> org.eclipse.jgit.lib.M:
    org.eclipse.jgit.lib.GpgConfig$GpgFormat OPENPGP -> a
    org.eclipse.jgit.lib.GpgConfig$GpgFormat X509 -> b
    org.eclipse.jgit.lib.GpgConfig$GpgFormat SSH -> c
    java.lang.String configValue -> d
    org.eclipse.jgit.lib.GpgConfig$GpgFormat[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    boolean matchConfigValue(java.lang.String) -> a
    java.lang.String toConfigValue() -> a
    org.eclipse.jgit.lib.GpgConfig$GpgFormat[] values() -> b
org.eclipse.jgit.lib.GpgSignature -> org.eclipse.jgit.lib.N:
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.InflaterCache -> org.eclipse.jgit.lib.O:
    java.util.zip.Inflater[] inflaterCache -> a
    int openInflaterCount -> b
    void <clinit>() -> <clinit>
    java.util.zip.Inflater get() -> a
    java.util.zip.Inflater getImpl() -> b
    void release(java.util.zip.Inflater) -> a
    boolean releaseImpl(java.util.zip.Inflater) -> b
org.eclipse.jgit.lib.MutableObjectId -> org.eclipse.jgit.lib.P:
    void <init>() -> <init>
    void clear() -> a
    void fromRaw(byte[]) -> b
    void fromRaw(byte[],int) -> c
    void fromRaw(int[],int) -> b
    void set(int,int,int,int,int) -> a
    void fromString(byte[],int) -> d
    org.eclipse.jgit.lib.ObjectId toObjectId() -> y
org.eclipse.jgit.lib.NullProgressMonitor -> org.eclipse.jgit.lib.Q:
    org.eclipse.jgit.lib.NullProgressMonitor INSTANCE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void start(int) -> a
    void beginTask(java.lang.String,int) -> a
    void update(int) -> b
    boolean isCancelled() -> a
    void endTask() -> b
org.eclipse.jgit.lib.ObjectBuilder -> org.eclipse.jgit.lib.R:
    byte[] hencoding -> a
    org.eclipse.jgit.lib.PersonIdent author -> b
    org.eclipse.jgit.lib.GpgSignature gpgSignature -> c
    java.lang.String message -> d
    java.nio.charset.Charset encoding -> e
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.lib.PersonIdent getAuthor() -> a
    void setAuthor(org.eclipse.jgit.lib.PersonIdent) -> a
    void setGpgSignature(org.eclipse.jgit.lib.GpgSignature) -> a
    org.eclipse.jgit.lib.GpgSignature getGpgSignature() -> c
    java.lang.String getMessage() -> d
    void setMessage(java.lang.String) -> a
    java.nio.charset.Charset getEncoding() -> e
    byte[] build() -> b
    void writeEncoding$78efbb35(java.nio.charset.Charset,java.io.ByteArrayOutputStream) -> a
org.eclipse.jgit.lib.ObjectChecker -> org.eclipse.jgit.lib.ObjectChecker:
    byte[] author -> a
    byte[] committer -> b
    byte[] encoding -> c
    java.util.EnumSet errors -> d
    boolean windows -> e
    boolean macosx -> f
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.lib.ObjectChecker setSafeForWindows(boolean) -> a
    org.eclipse.jgit.lib.ObjectChecker setSafeForMacOS(boolean) -> b
    void checkTree(byte[]) -> a
    int scanPathSegment$430755f6(byte[],int,int) -> c
    void report(org.eclipse.jgit.lib.ObjectChecker$ErrorType,org.eclipse.jgit.lib.AnyObjectId,java.lang.String) -> a
    void checkPath(byte[],int,int) -> a
    void checkPathSegment(byte[],int,int) -> b
    void checkPathSegment2$43075603(byte[],int,int) -> d
    boolean isMacHFSPath$545d0df2(byte[],int,int,byte[]) -> a
    boolean isMacHFSGit$43075607(byte[],int,int) -> e
    boolean checkTruncatedIgnorableUTF8(byte[],int,int,org.eclipse.jgit.lib.AnyObjectId) -> a
    java.lang.String toHexString(byte[],int,int) -> f
    void checkNotWindowsDevice$43075603(byte[],int,int) -> g
    boolean isInvalidOnWindows(byte) -> a
    boolean isGit(byte[],int) -> a
    boolean isGitTilde1(byte[],int,int) -> h
    boolean isNormalizedGit(byte[],int,int) -> i
    char toLower(byte) -> b
    boolean isPositiveDigit(byte) -> c
org.eclipse.jgit.lib.ObjectChecker$ErrorType -> org.eclipse.jgit.lib.ObjectChecker$ErrorType:
    org.eclipse.jgit.lib.ObjectChecker$ErrorType NULL_SHA1 -> NULL_SHA1
    org.eclipse.jgit.lib.ObjectChecker$ErrorType DUPLICATE_ENTRIES -> DUPLICATE_ENTRIES
    org.eclipse.jgit.lib.ObjectChecker$ErrorType TREE_NOT_SORTED -> TREE_NOT_SORTED
    org.eclipse.jgit.lib.ObjectChecker$ErrorType ZERO_PADDED_FILEMODE -> ZERO_PADDED_FILEMODE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType EMPTY_NAME -> EMPTY_NAME
    org.eclipse.jgit.lib.ObjectChecker$ErrorType FULL_PATHNAME -> FULL_PATHNAME
    org.eclipse.jgit.lib.ObjectChecker$ErrorType HAS_DOT -> HAS_DOT
    org.eclipse.jgit.lib.ObjectChecker$ErrorType HAS_DOTDOT -> HAS_DOTDOT
    org.eclipse.jgit.lib.ObjectChecker$ErrorType HAS_DOTGIT -> HAS_DOTGIT
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_OBJECT_SHA1 -> BAD_OBJECT_SHA1
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_PARENT_SHA1 -> BAD_PARENT_SHA1
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_TREE_SHA1 -> BAD_TREE_SHA1
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_AUTHOR -> MISSING_AUTHOR
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_COMMITTER -> MISSING_COMMITTER
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_OBJECT -> MISSING_OBJECT
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_TREE -> MISSING_TREE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_TYPE_ENTRY -> MISSING_TYPE_ENTRY
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_TAG_ENTRY -> MISSING_TAG_ENTRY
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_DATE -> BAD_DATE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_EMAIL -> BAD_EMAIL
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_TIMEZONE -> BAD_TIMEZONE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_EMAIL -> MISSING_EMAIL
    org.eclipse.jgit.lib.ObjectChecker$ErrorType MISSING_SPACE_BEFORE_DATE -> MISSING_SPACE_BEFORE_DATE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_BLOB -> GITMODULES_BLOB
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_LARGE -> GITMODULES_LARGE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_NAME -> GITMODULES_NAME
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_PARSE -> GITMODULES_PARSE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_PATH -> GITMODULES_PATH
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_SYMLINK -> GITMODULES_SYMLINK
    org.eclipse.jgit.lib.ObjectChecker$ErrorType GITMODULES_URL -> GITMODULES_URL
    org.eclipse.jgit.lib.ObjectChecker$ErrorType UNKNOWN_TYPE -> UNKNOWN_TYPE
    org.eclipse.jgit.lib.ObjectChecker$ErrorType WIN32_BAD_NAME -> WIN32_BAD_NAME
    org.eclipse.jgit.lib.ObjectChecker$ErrorType BAD_UTF8 -> BAD_UTF8
    org.eclipse.jgit.lib.ObjectChecker$ErrorType[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getMessageId() -> getMessageId
    org.eclipse.jgit.lib.ObjectChecker$ErrorType[] values() -> values
    org.eclipse.jgit.lib.ObjectChecker$ErrorType valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.lib.ObjectDatabase -> org.eclipse.jgit.lib.S:
    java.util.Set shallowCommits -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean exists() -> j
    void create() -> k
    org.eclipse.jgit.internal.storage.file.ObjectDirectoryInserter newInserter$3221133d() -> g
    org.eclipse.jgit.lib.ObjectReader newReader() -> a
    java.util.Set getShallowCommits() -> l
    void close() -> close
    boolean has(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId,int) -> a
org.eclipse.jgit.lib.ObjectId -> org.eclipse.jgit.lib.T:
    org.eclipse.jgit.lib.ObjectId ZEROID -> a
    java.lang.String ZEROID_STR -> b
    void <clinit>() -> <clinit>
    org.eclipse.jgit.lib.ObjectId zeroId() -> z
    boolean isId(java.lang.String) -> a
    java.lang.String toString(org.eclipse.jgit.lib.ObjectId) -> b
    boolean equals(byte[],int,byte[],int) -> a
    org.eclipse.jgit.lib.ObjectId fromRaw(byte[]) -> b
    org.eclipse.jgit.lib.ObjectId fromRaw(byte[],int) -> c
    org.eclipse.jgit.lib.ObjectId fromRaw(int[],int) -> b
    org.eclipse.jgit.lib.ObjectId fromString(byte[],int) -> d
    org.eclipse.jgit.lib.ObjectId fromString(java.lang.String) -> b
    org.eclipse.jgit.lib.ObjectId fromHexString(byte[],int) -> e
    void <init>(int,int,int,int,int) -> <init>
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    org.eclipse.jgit.lib.ObjectId toObjectId() -> y
org.eclipse.jgit.lib.ObjectIdOwnerMap -> org.eclipse.jgit.lib.U:
    org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry[][] directory -> a
    int size -> b
    int grow -> d
    int bits -> c
    int mask -> e
    void <init>() -> <init>
    void clear() -> a
    org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry get(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean contains$36eb52e0$21a6ca88(org.eclipse.jgit.revwalk.RevObject) -> a
    void add(org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry) -> a
    java.util.Iterator iterator() -> iterator
org.eclipse.jgit.lib.ObjectIdOwnerMap$1 -> org.eclipse.jgit.lib.V:
    int found -> a
    int dirIdx -> b
    int tblIdx -> c
    org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry next -> d
    org.eclipse.jgit.lib.ObjectIdOwnerMap this$0 -> e
    void <init>(org.eclipse.jgit.lib.ObjectIdOwnerMap) -> <init>
    boolean hasNext() -> hasNext
    org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry found(org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry) -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry -> org.eclipse.jgit.lib.W:
    org.eclipse.jgit.lib.ObjectIdOwnerMap$Entry next -> i
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
org.eclipse.jgit.lib.ObjectIdRef -> org.eclipse.jgit.lib.X:
    java.lang.String name -> a
    org.eclipse.jgit.lib.Ref$Storage storage -> b
    org.eclipse.jgit.lib.ObjectId objectId -> c
    long updateIndex -> d
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,long) -> <init>
    java.lang.String getName() -> c
    boolean isSymbolic() -> d
    org.eclipse.jgit.lib.Ref getLeaf() -> e
    org.eclipse.jgit.lib.Ref getTarget() -> f
    org.eclipse.jgit.lib.ObjectId getObjectId() -> b
    org.eclipse.jgit.lib.Ref$Storage getStorage() -> g
    long getUpdateIndex() -> h
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.ObjectIdRef$PeeledNonTag -> org.eclipse.jgit.lib.Y:
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId) -> <init>
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,long) -> <init>
    org.eclipse.jgit.lib.ObjectId getPeeledObjectId() -> i
    boolean isPeeled() -> j
org.eclipse.jgit.lib.ObjectIdRef$PeeledTag -> org.eclipse.jgit.lib.Z:
    org.eclipse.jgit.lib.ObjectId peeledObjectId -> a
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId) -> <init>
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,long) -> <init>
    org.eclipse.jgit.lib.ObjectId getPeeledObjectId() -> i
    boolean isPeeled() -> j
org.eclipse.jgit.lib.ObjectIdRef$Unpeeled -> org.eclipse.jgit.lib.aa:
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,org.eclipse.jgit.lib.ObjectId) -> <init>
    void <init>(org.eclipse.jgit.lib.Ref$Storage,java.lang.String,long) -> <init>
    org.eclipse.jgit.lib.ObjectId getPeeledObjectId() -> i
    boolean isPeeled() -> j
org.eclipse.jgit.lib.ObjectIdSet -> org.eclipse.jgit.lib.ab:
    boolean contains$36eb52e0$21a6ca88(org.eclipse.jgit.revwalk.RevObject) -> a
org.eclipse.jgit.lib.ObjectIdSubclassMap -> org.eclipse.jgit.lib.ac:
    int size -> a
    int grow -> c
    int mask -> d
    org.eclipse.jgit.lib.ObjectId[] table -> b
    void <init>() -> <init>
    org.eclipse.jgit.lib.ObjectId get$187c48eb(org.eclipse.jgit.lib.ObjectId) -> a
    boolean contains$36eb52e0$21a6ca88(org.eclipse.jgit.revwalk.RevObject) -> a
    void add$21a6ca8c(org.eclipse.jgit.internal.storage.reftable.ReftableWriter$RefList) -> a
    int size() -> a
    boolean isEmpty() -> b
    java.util.Iterator iterator() -> iterator
    void insert(org.eclipse.jgit.lib.ObjectId) -> b
    void initTable(int) -> a
org.eclipse.jgit.lib.ObjectIdSubclassMap$1 -> org.eclipse.jgit.lib.ad:
    int found -> a
    int i -> b
    org.eclipse.jgit.lib.ObjectIdSubclassMap this$0 -> c
    void <init>(org.eclipse.jgit.lib.ObjectIdSubclassMap) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.lib.ObjectInserter -> org.eclipse.jgit.lib.ae:
    org.eclipse.jgit.util.sha1.SHA1 hasher -> a
    byte[] tempBuffer -> b
    void <init>() -> <init>
    byte[] buffer() -> b
    org.eclipse.jgit.util.sha1.SHA1 digest() -> c
    org.eclipse.jgit.lib.ObjectId idFor$552df9ee(byte[]) -> a
    org.eclipse.jgit.lib.ObjectId idFor$5db8e6f2(int,byte[],int) -> b
    org.eclipse.jgit.lib.ObjectId insert$5db8e6f2(int,byte[],int) -> a
    org.eclipse.jgit.lib.ObjectId insert(int,long,java.io.InputStream) -> a
    org.eclipse.jgit.internal.storage.file.WindowCursor newReader$13597046() -> a
    void close() -> close
org.eclipse.jgit.lib.ObjectInserter$Formatter -> org.eclipse.jgit.lib.af:
    void <init>() -> <init>
    org.eclipse.jgit.lib.ObjectId insert(int,long,java.io.InputStream) -> a
    org.eclipse.jgit.internal.storage.file.WindowCursor newReader$13597046() -> a
    void close() -> close
org.eclipse.jgit.lib.ObjectLoader -> org.eclipse.jgit.lib.ag:
    void <init>() -> <init>
    int getType() -> a
    long getSize() -> b
    boolean isLarge() -> c
    byte[] getCachedBytes() -> d
    byte[] getCachedBytes(int) -> a
    org.eclipse.jgit.lib.ObjectStream openStream() -> e
    void copyTo$a3063a7(java.util.zip.DeflaterOutputStream) -> a
org.eclipse.jgit.lib.ObjectLoader$SmallObject -> org.eclipse.jgit.lib.ah:
    int type -> a
    byte[] data -> b
    void <init>(int,byte[]) -> <init>
    int getType() -> a
    long getSize() -> b
    boolean isLarge() -> c
    byte[] getCachedBytes() -> d
    org.eclipse.jgit.lib.ObjectStream openStream() -> e
org.eclipse.jgit.lib.ObjectReader -> org.eclipse.jgit.lib.ai:
    int streamFileThreshold -> c
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.file.WindowCursor newReader$13597046() -> b
    java.util.Set resolve$164c5018(org.eclipse.jgit.lib.AbbreviatedObjectId) -> a
    boolean has(org.eclipse.jgit.lib.AnyObjectId) -> a
    boolean has$59808455(org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId,int) -> a
    java.util.Set getShallowCommits() -> e
    org.eclipse.jgit.lib.ObjectReader$1 open$53baedc6$6780b243(java.util.ArrayList) -> a
    long getObjectSize$59808465(org.eclipse.jgit.lib.ObjectId,int) -> a
    org.eclipse.jgit.lib.ObjectReader$2 getObjectSize$5d008174$6b803c0f(java.util.List) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl getBitmapIndex$49f66a95() -> c
    java.util.Optional getCommitGraph() -> d
    void close() -> close
    int getStreamFileThreshold() -> g
org.eclipse.jgit.lib.ObjectReader$1 -> org.eclipse.jgit.lib.aj:
    org.eclipse.jgit.lib.ObjectId cur -> a
    org.eclipse.jgit.lib.ObjectReader this$0 -> b
    java.util.Iterator val$idItr -> c
    void <init>(org.eclipse.jgit.lib.ObjectReader,java.util.Iterator) -> <init>
    boolean next() -> a
    org.eclipse.jgit.lib.ObjectId getObjectId() -> b
    org.eclipse.jgit.lib.ObjectLoader open() -> c
org.eclipse.jgit.lib.ObjectReader$2 -> org.eclipse.jgit.lib.ak:
    org.eclipse.jgit.lib.ObjectId cur -> a
    long sz -> b
    org.eclipse.jgit.lib.ObjectReader this$0 -> c
    java.util.Iterator val$idItr -> d
    void <init>(org.eclipse.jgit.lib.ObjectReader,java.util.Iterator) -> <init>
    boolean next() -> a
    org.eclipse.jgit.lib.ObjectId getCurrent() -> b
    org.eclipse.jgit.lib.ObjectId getObjectId() -> c
    long getSize() -> d
org.eclipse.jgit.lib.ObjectStream -> org.eclipse.jgit.lib.al:
    void <init>() -> <init>
    long getSize() -> a
org.eclipse.jgit.lib.ObjectStream$Filter -> org.eclipse.jgit.lib.am:
    long size -> a
    java.io.BufferedInputStream in$6e004ba7 -> b
    void <init>(long,java.io.BufferedInputStream) -> <init>
    long getSize() -> a
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void close() -> close
org.eclipse.jgit.lib.ObjectStream$SmallStream -> org.eclipse.jgit.lib.an:
    byte[] data -> a
    int ptr -> b
    int mark -> c
    void <init>(org.eclipse.jgit.lib.ObjectLoader$SmallObject) -> <init>
    void <init>(byte[]) -> <init>
    long getSize() -> a
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    int read(byte[],int,int) -> read
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
org.eclipse.jgit.lib.PersonIdent -> org.eclipse.jgit.lib.ao:
    java.time.format.DateTimeFormatter OFFSET_FORMATTER -> a
    java.lang.String name -> b
    java.lang.String emailAddress -> c
    java.time.Instant when -> d
    java.time.ZoneId tzOffset -> e
    void <clinit>() -> <clinit>
    void appendSanitized(java.lang.StringBuilder,java.lang.String) -> a
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.PersonIdent) -> <init>
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone) -> <init>
    void <init>(java.lang.String,java.lang.String,java.time.Instant,java.time.ZoneId) -> <init>
    void <init>(java.lang.String,java.lang.String,java.time.Instant) -> <init>
    void <init>(org.eclipse.jgit.lib.UserConfig) -> <init>
    void <init>(java.lang.String,java.lang.String,long,int) -> <init>
    java.lang.String getName() -> a
    java.lang.String getEmailAddress() -> b
    java.util.Date getWhen() -> c
    java.util.TimeZone getTimeZone() -> d
    java.time.ZoneOffset getZoneOffset() -> g
    int getTimeZoneOffset() -> e
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toExternalString() -> f
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.ProgressMonitor -> org.eclipse.jgit.lib.ap:
    void start(int) -> a
    void beginTask(java.lang.String,int) -> a
    void update(int) -> b
    void endTask() -> b
    boolean isCancelled() -> a
org.eclipse.jgit.lib.RebaseTodoFile -> org.eclipse.jgit.lib.aq:
    org.eclipse.jgit.lib.Repository repo -> a
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    java.util.ArrayList readRebaseTodo$15e38f0e(java.lang.String,boolean) -> a
    int nextParsableToken(byte[],int,int) -> a
    org.eclipse.jgit.lib.RebaseTodoLine parseLine(byte[],int,int) -> b
    void writeRebaseTodoFile(java.lang.String,java.util.List,boolean) -> a
org.eclipse.jgit.lib.RebaseTodoLine -> org.eclipse.jgit.lib.ar:
    org.eclipse.jgit.lib.RebaseTodoLine$Action action -> a
    org.eclipse.jgit.lib.AbbreviatedObjectId commit -> b
    java.lang.String shortMessage -> c
    java.lang.String comment -> d
    void <init>(java.lang.String) -> <init>
    void <init>(org.eclipse.jgit.lib.RebaseTodoLine$Action,org.eclipse.jgit.lib.AbbreviatedObjectId,java.lang.String) -> <init>
    void setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action) -> a
    void setComment(java.lang.String) -> a
    java.lang.IllegalArgumentException createInvalidCommentException(java.lang.String) -> b
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.RebaseTodoLine$Action -> org.eclipse.jgit.lib.as:
    org.eclipse.jgit.lib.RebaseTodoLine$Action PICK -> b
    org.eclipse.jgit.lib.RebaseTodoLine$Action REWORD -> c
    org.eclipse.jgit.lib.RebaseTodoLine$Action EDIT -> d
    org.eclipse.jgit.lib.RebaseTodoLine$Action SQUASH -> e
    org.eclipse.jgit.lib.RebaseTodoLine$Action FIXUP -> f
    org.eclipse.jgit.lib.RebaseTodoLine$Action COMMENT -> a
    java.lang.String token -> g
    java.lang.String shortToken -> h
    org.eclipse.jgit.lib.RebaseTodoLine$Action[] ENUM$VALUES -> i
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String toToken() -> a
    java.lang.String toString() -> toString
    org.eclipse.jgit.lib.RebaseTodoLine$Action parse(java.lang.String) -> a
    org.eclipse.jgit.lib.RebaseTodoLine$Action[] values() -> b
org.eclipse.jgit.lib.Ref -> org.eclipse.jgit.lib.at:
    java.lang.String getName() -> c
    boolean isSymbolic() -> d
    org.eclipse.jgit.lib.Ref getLeaf() -> e
    org.eclipse.jgit.lib.Ref getTarget() -> f
    org.eclipse.jgit.lib.ObjectId getObjectId() -> b
    org.eclipse.jgit.lib.ObjectId getPeeledObjectId() -> i
    boolean isPeeled() -> j
    org.eclipse.jgit.lib.Ref$Storage getStorage() -> g
    long getUpdateIndex() -> h
org.eclipse.jgit.lib.Ref$Storage -> org.eclipse.jgit.lib.au:
    org.eclipse.jgit.lib.Ref$Storage NEW -> a
    org.eclipse.jgit.lib.Ref$Storage LOOSE -> b
    org.eclipse.jgit.lib.Ref$Storage PACKED -> c
    org.eclipse.jgit.lib.Ref$Storage LOOSE_PACKED -> d
    org.eclipse.jgit.lib.Ref$Storage NETWORK -> e
    boolean loose -> f
    boolean packed -> g
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,boolean,boolean) -> <init>
    boolean isLoose() -> a
    boolean isPacked() -> b
org.eclipse.jgit.lib.RefComparator -> org.eclipse.jgit.lib.av:
    org.eclipse.jgit.lib.RefComparator INSTANCE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int compareTo(org.eclipse.jgit.lib.Ref,java.lang.String) -> a
    int compareTo(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.eclipse.jgit.lib.RefDatabase -> org.eclipse.jgit.lib.aw:
    java.lang.String[] SEARCH_PATH -> a
    java.lang.String[] additionalRefsNames -> e
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void create() -> d
    void close() -> c
    boolean isNameConflicting(java.lang.String) -> d
    org.eclipse.jgit.lib.RefUpdate newUpdate(java.lang.String,boolean) -> a
    org.eclipse.jgit.lib.RefRename newRename(java.lang.String,java.lang.String) -> a
    org.eclipse.jgit.lib.Ref findRef(java.lang.String) -> g
    org.eclipse.jgit.lib.Ref exactRef(java.lang.String) -> b
    org.eclipse.jgit.lib.Ref firstExactRef(java.lang.String[]) -> a
    java.util.List getRefs() -> a
    org.eclipse.jgit.util.RefMap getRefs$694ad9f4(java.lang.String) -> c
    java.util.List getRefsByPrefix(java.lang.String) -> h
    java.util.List getRefsByPrefix(java.lang.String[]) -> b
    java.util.List getAdditionalRefs() -> b
    org.eclipse.jgit.lib.Ref peel(org.eclipse.jgit.lib.Ref) -> a
    void packRefs(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.api.PackRefsCommand) -> a
    boolean lambda$0(java.lang.String,java.util.Map$Entry) -> a
    org.eclipse.jgit.lib.Ref lambda$1(java.util.Map$Entry) -> a
org.eclipse.jgit.lib.RefRename -> org.eclipse.jgit.lib.ax:
    org.eclipse.jgit.lib.RefUpdate source -> a
    org.eclipse.jgit.lib.RefUpdate destination -> b
    org.eclipse.jgit.lib.RefUpdate$Result result -> c
    void <init>(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate) -> <init>
    org.eclipse.jgit.lib.RefUpdate$Result rename() -> b
    org.eclipse.jgit.lib.RefUpdate$Result doRename() -> a
    boolean needToUpdateHEAD() -> c
org.eclipse.jgit.lib.RefUpdate -> org.eclipse.jgit.lib.ay:
    org.eclipse.jgit.lib.ObjectId newValue -> a
    boolean force -> b
    org.eclipse.jgit.lib.PersonIdent refLogIdent -> c
    java.lang.String refLogMessage -> d
    org.eclipse.jgit.lib.ObjectId oldValue -> e
    org.eclipse.jgit.lib.ObjectId expValue -> f
    org.eclipse.jgit.lib.RefUpdate$Result result -> g
    org.eclipse.jgit.lib.Ref ref -> h
    boolean detachingSymbolicRef -> i
    boolean checkConflicting -> j
    void <init>(org.eclipse.jgit.lib.Ref) -> <init>
    org.eclipse.jgit.lib.RefDatabase getRefDatabase() -> a
    org.eclipse.jgit.internal.storage.file.FileRepository getRepository$70b619e2() -> b
    boolean tryLock(boolean) -> a
    void unlock() -> c
    org.eclipse.jgit.lib.RefUpdate$Result doUpdate(org.eclipse.jgit.lib.RefUpdate$Result) -> a
    org.eclipse.jgit.lib.RefUpdate$Result doDelete(org.eclipse.jgit.lib.RefUpdate$Result) -> b
    org.eclipse.jgit.lib.RefUpdate$Result doLink(java.lang.String) -> a
    java.lang.String getName() -> f
    org.eclipse.jgit.lib.Ref getRef() -> g
    org.eclipse.jgit.lib.ObjectId getNewObjectId() -> h
    void setDetachingSymbolicRef() -> i
    boolean isDetachingSymbolicRef() -> j
    void setNewObjectId$36eb52dc(org.eclipse.jgit.lib.ObjectId) -> a
    void setExpectedOldObjectId$36eb52dc(org.eclipse.jgit.lib.ObjectId) -> b
    void setForceUpdate(boolean) -> b
    org.eclipse.jgit.lib.PersonIdent getRefLogIdent() -> d
    void setRefLogIdent(org.eclipse.jgit.lib.PersonIdent) -> a
    java.lang.String getRefLogMessage() -> k
    void setRefLogMessage$505cbf4b(java.lang.String) -> b
    void disableRefLog() -> l
    org.eclipse.jgit.lib.ObjectId getOldObjectId() -> m
    void setOldObjectId(org.eclipse.jgit.lib.ObjectId) -> c
    org.eclipse.jgit.lib.RefUpdate$Result getResult() -> n
    org.eclipse.jgit.lib.RefUpdate$Result forceUpdate() -> o
    org.eclipse.jgit.lib.RefUpdate$Result update() -> p
    org.eclipse.jgit.lib.RefUpdate$Result update(org.eclipse.jgit.revwalk.RevWalk) -> a
    org.eclipse.jgit.lib.RefUpdate$Result delete() -> q
    org.eclipse.jgit.lib.RefUpdate$Result delete(org.eclipse.jgit.revwalk.RevWalk) -> b
    org.eclipse.jgit.lib.RefUpdate$Result link(java.lang.String) -> c
    org.eclipse.jgit.lib.RefUpdate$Result updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store) -> a
    org.eclipse.jgit.revwalk.RevObject safeParseOld$2502b3c4(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId) -> a
org.eclipse.jgit.lib.RefUpdate$1 -> org.eclipse.jgit.lib.az:
    org.eclipse.jgit.lib.RefUpdate this$0 -> a
    void <init>(org.eclipse.jgit.lib.RefUpdate) -> <init>
    org.eclipse.jgit.lib.RefUpdate$Result execute(org.eclipse.jgit.lib.RefUpdate$Result) -> a
org.eclipse.jgit.lib.RefUpdate$2 -> org.eclipse.jgit.lib.aA:
    org.eclipse.jgit.lib.RefUpdate this$0 -> a
    void <init>(org.eclipse.jgit.lib.RefUpdate) -> <init>
    org.eclipse.jgit.lib.RefUpdate$Result execute(org.eclipse.jgit.lib.RefUpdate$Result) -> a
org.eclipse.jgit.lib.RefUpdate$Result -> org.eclipse.jgit.lib.aB:
    org.eclipse.jgit.lib.RefUpdate$Result NOT_ATTEMPTED -> a
    org.eclipse.jgit.lib.RefUpdate$Result LOCK_FAILURE -> b
    org.eclipse.jgit.lib.RefUpdate$Result NO_CHANGE -> c
    org.eclipse.jgit.lib.RefUpdate$Result NEW -> d
    org.eclipse.jgit.lib.RefUpdate$Result FORCED -> e
    org.eclipse.jgit.lib.RefUpdate$Result FAST_FORWARD -> f
    org.eclipse.jgit.lib.RefUpdate$Result REJECTED -> g
    org.eclipse.jgit.lib.RefUpdate$Result REJECTED_CURRENT_BRANCH -> h
    org.eclipse.jgit.lib.RefUpdate$Result IO_FAILURE -> i
    org.eclipse.jgit.lib.RefUpdate$Result RENAMED -> j
    org.eclipse.jgit.lib.RefUpdate$Result REJECTED_MISSING_OBJECT -> k
    org.eclipse.jgit.lib.RefUpdate$Result REJECTED_OTHER_REASON -> l
    org.eclipse.jgit.lib.RefUpdate$Result[] ENUM$VALUES -> m
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.lib.RefUpdate$Result[] values() -> a
org.eclipse.jgit.lib.RefUpdate$Store -> org.eclipse.jgit.lib.aC:
    void <init>() -> <init>
    org.eclipse.jgit.lib.RefUpdate$Result execute(org.eclipse.jgit.lib.RefUpdate$Result) -> a
org.eclipse.jgit.lib.RefWriter -> org.eclipse.jgit.lib.aD:
    java.util.List refs$5036ee31 -> a
    void <init>(org.eclipse.jgit.util.RefList) -> <init>
    void writePackedRefs() -> a
    void writeFile(java.lang.String,byte[]) -> a
org.eclipse.jgit.lib.ReflogReader -> org.eclipse.jgit.lib.aE:
    java.util.List getReverseEntries() -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData getReverseEntry$38ebbaac$66144207(int) -> a
org.eclipse.jgit.lib.Repository -> org.eclipse.jgit.lib.Repository:
    org.slf4j.Logger LOG -> LOG
    org.eclipse.jgit.events.ListenerList globalListeners -> globalListeners
    java.util.regex.Pattern FORBIDDEN_BRANCH_NAME_COMPONENTS -> FORBIDDEN_BRANCH_NAME_COMPONENTS
    java.util.concurrent.atomic.AtomicInteger useCnt -> useCnt
    java.util.concurrent.atomic.AtomicLong closedAt -> closedAt
    java.io.File gitDir -> gitDir
    java.io.File gitCommonDir -> gitCommonDir
    org.eclipse.jgit.util.FS fs -> fs
    org.eclipse.jgit.events.ListenerList myListeners -> myListeners
    java.io.File workTree -> workTree
    java.io.File indexFile -> indexFile
    java.lang.String initialBranch -> initialBranch
    boolean $assertionsDisabled -> $assertionsDisabled
    void <clinit>() -> <clinit>
    org.eclipse.jgit.events.ListenerList getGlobalListenerList() -> getGlobalListenerList
    void <init>(org.eclipse.jgit.lib.BaseRepositoryBuilder) -> <init>
    org.eclipse.jgit.events.ListenerList getListenerList() -> getListenerList
    void fireEvent(org.eclipse.jgit.events.RepositoryEvent) -> fireEvent
    void create() -> create
    void create(boolean) -> create
    java.io.File getDirectory() -> getDirectory
    java.lang.String getIdentifier() -> getIdentifier
    java.io.File getCommonDirectory() -> getCommonDirectory
    org.eclipse.jgit.lib.ObjectDatabase getObjectDatabase() -> getObjectDatabase
    org.eclipse.jgit.lib.ObjectInserter newObjectInserter() -> newObjectInserter
    org.eclipse.jgit.lib.ObjectReader newObjectReader() -> newObjectReader
    org.eclipse.jgit.lib.RefDatabase getRefDatabase() -> getRefDatabase
    org.eclipse.jgit.lib.StoredConfig getConfig() -> getConfig
    org.eclipse.jgit.attributes.AttributesNodeProvider createAttributesNodeProvider() -> createAttributesNodeProvider
    org.eclipse.jgit.util.FS getFS() -> getFS
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId) -> open
    org.eclipse.jgit.lib.ObjectLoader open(org.eclipse.jgit.lib.AnyObjectId,int) -> open
    org.eclipse.jgit.lib.RefUpdate updateRef(java.lang.String) -> updateRef
    org.eclipse.jgit.lib.RefUpdate updateRef(java.lang.String,boolean) -> updateRef
    org.eclipse.jgit.lib.RefRename renameRef(java.lang.String,java.lang.String) -> renameRef
    org.eclipse.jgit.lib.ObjectId resolve(java.lang.String) -> resolve
    java.lang.String simplify(java.lang.String) -> simplify
    java.lang.Object resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String) -> resolve
    boolean isHex(char) -> isHex
    boolean isAllHex(java.lang.String,int) -> isAllHex
    org.eclipse.jgit.revwalk.RevObject parseSimple(org.eclipse.jgit.revwalk.RevWalk,java.lang.String) -> parseSimple
    org.eclipse.jgit.lib.ObjectId resolveSimple(java.lang.String) -> resolveSimple
    java.lang.String resolveReflogCheckout(int) -> resolveReflogCheckout
    org.eclipse.jgit.revwalk.RevCommit resolveReflog(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.Ref,java.lang.String) -> resolveReflog
    org.eclipse.jgit.lib.ObjectId resolveAbbreviation(java.lang.String) -> resolveAbbreviation
    void incrementOpen() -> incrementOpen
    void close() -> close
    void doClose() -> doClose
    java.lang.String toString() -> toString
    java.lang.String getFullBranch() -> getFullBranch
    java.lang.String getBranch() -> getBranch
    java.lang.String getInitialBranch() -> getInitialBranch
    java.util.Set getAdditionalHaves() -> getAdditionalHaves
    org.eclipse.jgit.lib.Ref exactRef(java.lang.String) -> exactRef
    org.eclipse.jgit.lib.Ref findRef(java.lang.String) -> findRef
    java.util.Map getAllRefs() -> getAllRefs
    java.util.Map getTags() -> getTags
    org.eclipse.jgit.lib.Ref peel(org.eclipse.jgit.lib.Ref) -> peel
    java.util.Map getAllRefsByPeeledObjectId() -> getAllRefsByPeeledObjectId
    java.io.File getIndexFile() -> getIndexFile
    org.eclipse.jgit.revwalk.RevCommit parseCommit(org.eclipse.jgit.lib.AnyObjectId) -> parseCommit
    org.eclipse.jgit.dircache.DirCache readDirCache() -> readDirCache
    org.eclipse.jgit.dircache.DirCache lockDirCache() -> lockDirCache
    org.eclipse.jgit.lib.RepositoryState getRepositoryState() -> getRepositoryState
    boolean isValidRefName(java.lang.String) -> isValidRefName
    java.lang.String normalizeBranchName(java.lang.String) -> normalizeBranchName
    java.lang.String stripWorkDir(java.io.File,java.io.File) -> stripWorkDir
    boolean isBare() -> isBare
    java.io.File getWorkTree() -> getWorkTree
    void scanForRepoChanges() -> scanForRepoChanges
    void notifyIndexChanged(boolean) -> notifyIndexChanged
    java.lang.String shortenRefName(java.lang.String) -> shortenRefName
    java.lang.String shortenRemoteBranchName(java.lang.String) -> shortenRemoteBranchName
    java.lang.String getRemoteName(java.lang.String) -> getRemoteName
    java.lang.String getGitwebDescription() -> getGitwebDescription
    void setGitwebDescription(java.lang.String) -> setGitwebDescription
    org.eclipse.jgit.lib.ReflogReader getReflogReader(java.lang.String) -> getReflogReader
    org.eclipse.jgit.lib.ReflogReader getReflogReader(org.eclipse.jgit.lib.Ref) -> getReflogReader
    java.lang.String readMergeCommitMsg() -> readMergeCommitMsg
    void writeMergeCommitMsg(java.lang.String) -> writeMergeCommitMsg
    java.lang.String readCommitEditMsg() -> readCommitEditMsg
    void writeCommitEditMsg(java.lang.String) -> writeCommitEditMsg
    java.util.List readMergeHeads() -> readMergeHeads
    void writeMergeHeads(java.util.List) -> writeMergeHeads
    org.eclipse.jgit.lib.ObjectId readCherryPickHead() -> readCherryPickHead
    org.eclipse.jgit.lib.ObjectId readRevertHead() -> readRevertHead
    void writeCherryPickHead(org.eclipse.jgit.lib.ObjectId) -> writeCherryPickHead
    void writeRevertHead(org.eclipse.jgit.lib.ObjectId) -> writeRevertHead
    void writeOrigHead(org.eclipse.jgit.lib.ObjectId) -> writeOrigHead
    org.eclipse.jgit.lib.ObjectId readOrigHead() -> readOrigHead
    java.lang.String readSquashCommitMsg() -> readSquashCommitMsg
    void writeSquashCommitMsg(java.lang.String) -> writeSquashCommitMsg
    java.lang.String readCommitMsgFile(java.lang.String) -> readCommitMsgFile
    void writeCommitMsg(java.io.File,java.lang.String) -> writeCommitMsg
    byte[] readGitDirectoryFile(java.lang.String) -> readGitDirectoryFile
    void writeHeadsFile(java.util.List,java.lang.String) -> writeHeadsFile
    java.util.List readRebaseTodo(java.lang.String,boolean) -> readRebaseTodo
    void writeRebaseTodoFile(java.lang.String,java.util.List,boolean) -> writeRebaseTodoFile
    java.util.Set getRemoteNames() -> getRemoteNames
    void autoGC(org.eclipse.jgit.lib.ProgressMonitor) -> autoGC
    void lambda$0(org.eclipse.jgit.events.IndexChangedEvent) -> lambda$0
org.eclipse.jgit.lib.RepositoryBuilder -> org.eclipse.jgit.lib.aF:
    void <init>() -> <init>
org.eclipse.jgit.lib.RepositoryCache -> org.eclipse.jgit.lib.aG:
    org.slf4j.Logger LOG -> a
    org.eclipse.jgit.lib.RepositoryCache cache -> b
    java.util.concurrent.ConcurrentHashMap cacheMap$5a983bf5 -> c
    org.eclipse.jgit.lib.RepositoryCache$Lock[] openLocks -> d
    java.util.concurrent.ScheduledFuture cleanupTask -> e
    long expireAfter -> f
    org.eclipse.jgit.lib.RepositoryCache$Lock schedulerLock$5f790d9c -> g
    void <clinit>() -> <clinit>
    org.eclipse.jgit.lib.Repository open$6f75a138(org.eclipse.jgit.lib.RepositoryCache$FileKey) -> a
    boolean isCached(org.eclipse.jgit.lib.Repository) -> a
    void <init>() -> <init>
    org.eclipse.jgit.lib.Repository openRepository$b342f32$337652b2(org.eclipse.jgit.lib.RepositoryCache$FileKey) -> b
    void clearAllExpired() -> a
    org.eclipse.jgit.lib.RepositoryCache$Lock lockFor$56c722b5(org.eclipse.jgit.lib.RepositoryCache$FileKey) -> c
    void lambda$0() -> b
org.eclipse.jgit.lib.RepositoryCache$FileKey -> org.eclipse.jgit.lib.aH:
    java.io.File path -> a
    org.eclipse.jgit.util.FS fs -> b
    org.eclipse.jgit.lib.RepositoryCache$FileKey exact(java.io.File,org.eclipse.jgit.util.FS) -> a
    void <init>(java.io.File,org.eclipse.jgit.util.FS) -> <init>
    java.io.File canonical(java.io.File) -> a
    org.eclipse.jgit.internal.storage.file.FileRepository open$307fd758$2b659de9() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean isGitRepository(java.io.File,org.eclipse.jgit.util.FS) -> b
    java.lang.String readFirstLine(java.io.File) -> b
org.eclipse.jgit.lib.RepositoryCache$Key -> org.eclipse.jgit.lib.aI:
    org.eclipse.jgit.internal.storage.file.FileRepository open$307fd758$2b659de9() -> a
org.eclipse.jgit.lib.RepositoryCache$Lock -> org.eclipse.jgit.lib.aJ:
    void <init>() -> <init>
org.eclipse.jgit.lib.RepositoryState -> org.eclipse.jgit.lib.aK:
    org.eclipse.jgit.lib.RepositoryState$1 BARE$5a29325a -> a
    org.eclipse.jgit.lib.RepositoryState$2 SAFE$5a29325a -> b
    org.eclipse.jgit.lib.RepositoryState$3 MERGING$5a29325a -> c
    org.eclipse.jgit.lib.RepositoryState$4 MERGING_RESOLVED$5a29325a -> d
    org.eclipse.jgit.lib.RepositoryState$5 CHERRY_PICKING$5a29325a -> e
    org.eclipse.jgit.lib.RepositoryState$6 CHERRY_PICKING_RESOLVED$5a29325a -> f
    org.eclipse.jgit.lib.RepositoryState$7 REVERTING$5a29325a -> g
    org.eclipse.jgit.lib.RepositoryState$8 REVERTING_RESOLVED$5a29325a -> h
    org.eclipse.jgit.lib.RepositoryState$9 REBASING$5a29325a -> i
    org.eclipse.jgit.lib.RepositoryState$10 REBASING_REBASING$5a29325a -> j
    org.eclipse.jgit.lib.RepositoryState$11 APPLY$5a29325a -> k
    org.eclipse.jgit.lib.RepositoryState$12 REBASING_MERGE$5a29325a -> l
    org.eclipse.jgit.lib.RepositoryState$13 REBASING_INTERACTIVE$5a29325a -> m
    org.eclipse.jgit.lib.RepositoryState$14 BISECTING$5a29325a -> n
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$1 -> org.eclipse.jgit.lib.aL:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$10 -> org.eclipse.jgit.lib.aM:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$11 -> org.eclipse.jgit.lib.aN:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$12 -> org.eclipse.jgit.lib.aO:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$13 -> org.eclipse.jgit.lib.aP:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$14 -> org.eclipse.jgit.lib.aQ:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$2 -> org.eclipse.jgit.lib.aR:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$3 -> org.eclipse.jgit.lib.aS:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$4 -> org.eclipse.jgit.lib.aT:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$5 -> org.eclipse.jgit.lib.aU:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$6 -> org.eclipse.jgit.lib.aV:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$7 -> org.eclipse.jgit.lib.aW:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$8 -> org.eclipse.jgit.lib.aX:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.RepositoryState$9 -> org.eclipse.jgit.lib.aY:
    void <init>(java.lang.String) -> <init>
    boolean canCommit() -> a
org.eclipse.jgit.lib.SignerFactory -> org.eclipse.jgit.lib.aZ:
    org.eclipse.jgit.lib.GpgConfig$GpgFormat getType() -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData create$1d48ccbe$297f7e12() -> b
org.eclipse.jgit.lib.Signers -> org.eclipse.jgit.lib.ba:
    org.slf4j.Logger LOG -> a
    java.util.EnumMap SIGNER_FACTORIES$5a983bf5 -> b
    java.util.concurrent.ConcurrentHashMap SIGNERS$5a983bf5 -> c
    void <clinit>() -> <clinit>
    java.util.EnumMap loadSigners$604efcea() -> a
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData get$40d3e0e6$4bc718ca(org.eclipse.jgit.lib.GpgConfig$GpgFormat) -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData lambda$0$51b3418a$24ad5ca6(org.eclipse.jgit.lib.GpgConfig$GpgFormat,org.eclipse.jgit.lib.GpgConfig$GpgFormat) -> a
org.eclipse.jgit.lib.StoredConfig -> org.eclipse.jgit.lib.bb:
    void <init>(org.eclipse.jgit.storage.file.FileBasedConfig) -> <init>
    void save() -> f
    void clear() -> e
org.eclipse.jgit.lib.SymbolicRef -> org.eclipse.jgit.lib.bc:
    java.lang.String name -> a
    org.eclipse.jgit.lib.Ref target -> b
    long updateIndex -> c
    void <init>(java.lang.String,org.eclipse.jgit.lib.Ref) -> <init>
    void <init>(java.lang.String,org.eclipse.jgit.lib.Ref,long) -> <init>
    java.lang.String getName() -> c
    boolean isSymbolic() -> d
    org.eclipse.jgit.lib.Ref getLeaf() -> e
    org.eclipse.jgit.lib.Ref getTarget() -> f
    org.eclipse.jgit.lib.ObjectId getObjectId() -> b
    org.eclipse.jgit.lib.Ref$Storage getStorage() -> g
    org.eclipse.jgit.lib.ObjectId getPeeledObjectId() -> i
    boolean isPeeled() -> j
    long getUpdateIndex() -> h
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.ThreadSafeProgressMonitor -> org.eclipse.jgit.lib.bd:
    org.eclipse.jgit.lib.ProgressMonitor pm -> a
    java.util.concurrent.locks.ReentrantLock lock -> b
    java.lang.Thread mainThread -> c
    java.util.concurrent.atomic.AtomicInteger workers -> d
    java.util.concurrent.atomic.AtomicInteger pendingUpdates -> e
    java.util.concurrent.Semaphore process -> f
    boolean $assertionsDisabled -> g
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.ProgressMonitor) -> <init>
    void start(int) -> a
    void beginTask(java.lang.String,int) -> a
    void startWorkers(int) -> c
    void endWorker() -> c
    void waitForCompletion() -> d
    void doUpdates() -> e
    void update(int) -> b
    boolean isCancelled() -> a
    void endTask() -> b
    boolean isMainThread() -> f
org.eclipse.jgit.lib.TreeFormatter -> org.eclipse.jgit.lib.be:
    byte[] buf -> a
    int ptr -> b
    org.eclipse.jgit.util.TemporaryBuffer$Heap overflowBuffer -> c
    int entrySize(org.eclipse.jgit.lib.FileMode,int) -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void append$1e5f7105$631fde3a$3eddeace(byte[],int,org.eclipse.jgit.lib.FileMode$1,org.eclipse.jgit.lib.ObjectId) -> a
    void append(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int) -> a
    boolean fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode) -> a
    void fmtOverflowBuffer(byte[],int,int,org.eclipse.jgit.lib.FileMode) -> b
    org.eclipse.jgit.lib.ObjectId insertTo(org.eclipse.jgit.lib.ObjectInserter) -> a
    byte[] toByteArray() -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.lib.UserConfig -> org.eclipse.jgit.lib.bf:
    org.eclipse.jgit.lib.Config$SectionParser KEY -> a
    java.lang.String authorName -> b
    java.lang.String authorEmail -> c
    java.lang.String committerName -> d
    java.lang.String committerEmail -> e
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    java.lang.String getCommitterName() -> a
    java.lang.String getCommitterEmail() -> b
    java.lang.String getNameInternal(org.eclipse.jgit.lib.Config,java.lang.String) -> a
    java.lang.String getDefaultUserName() -> c
    java.lang.String getEmailInternal(org.eclipse.jgit.lib.Config,java.lang.String) -> b
    java.lang.String stripInvalidCharacters(java.lang.String) -> a
    java.lang.String getDefaultEmail() -> d
org.eclipse.jgit.lib.internal.WorkQueue -> org.eclipse.jgit.lib.a.a:
    java.util.concurrent.ScheduledThreadPoolExecutor executor -> a
    void <clinit>() -> <clinit>
    java.util.concurrent.ScheduledThreadPoolExecutor getExecutor() -> a
org.eclipse.jgit.lib.internal.WorkQueue$1 -> org.eclipse.jgit.lib.a.b:
    java.util.concurrent.ThreadFactory baseFactory -> a
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.eclipse.jgit.lib.internal.WorkQueue$2 -> org.eclipse.jgit.lib.a.c:
    void <init>() -> <init>
    void finalize() -> finalize
org.eclipse.jgit.merge.ContentMergeStrategy -> org.eclipse.jgit.h.a:
    org.eclipse.jgit.merge.ContentMergeStrategy CONFLICT -> a
    org.eclipse.jgit.merge.ContentMergeStrategy OURS -> b
    org.eclipse.jgit.merge.ContentMergeStrategy THEIRS -> c
    org.eclipse.jgit.merge.ContentMergeStrategy UNION -> d
    org.eclipse.jgit.merge.ContentMergeStrategy[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.merge.ContentMergeStrategy[] values() -> a
org.eclipse.jgit.merge.EolAwareOutputStream -> org.eclipse.jgit.h.b:
    org.eclipse.jgit.util.TemporaryBuffer$LocalFile out$33c83ab2 -> a
    boolean bol -> b
    void <init>(org.eclipse.jgit.util.TemporaryBuffer$LocalFile) -> <init>
    void beginln() -> a
    boolean isBeginln() -> b
    void write(int) -> write
    void write(byte[],int,int) -> write
org.eclipse.jgit.merge.MergeAlgorithm -> org.eclipse.jgit.h.c:
    org.eclipse.jgit.diff.LowLevelDiffAlgorithm diffAlg$4542cc73 -> a
    org.eclipse.jgit.merge.ContentMergeStrategy strategy -> b
    org.eclipse.jgit.diff.Edit END_EDIT -> c
    int[] $SWITCH_TABLE$org$eclipse$jgit$merge$ContentMergeStrategy -> d
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.diff.LowLevelDiffAlgorithm) -> <init>
    void setContentMergeStrategy(org.eclipse.jgit.merge.ContentMergeStrategy) -> a
    boolean isEndEdit(org.eclipse.jgit.diff.Edit) -> a
    org.eclipse.jgit.merge.MergeResult merge$10454ddc$3dc26ff0(org.eclipse.jgit.diff.RawTextComparator$1,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText) -> a
    org.eclipse.jgit.diff.Edit nextEdit(java.util.Iterator) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$merge$ContentMergeStrategy() -> a
org.eclipse.jgit.merge.MergeChunk -> org.eclipse.jgit.h.d:
    int sequenceIndex -> a
    int begin -> b
    int end -> c
    org.eclipse.jgit.merge.MergeChunk$ConflictState conflictState -> d
    void <init>(int,int,int,org.eclipse.jgit.merge.MergeChunk$ConflictState) -> <init>
    int getSequenceIndex() -> a
    int getBegin() -> b
    int getEnd() -> c
    org.eclipse.jgit.merge.MergeChunk$ConflictState getConflictState() -> d
org.eclipse.jgit.merge.MergeChunk$ConflictState -> org.eclipse.jgit.h.e:
    org.eclipse.jgit.merge.MergeChunk$ConflictState NO_CONFLICT -> a
    org.eclipse.jgit.merge.MergeChunk$ConflictState FIRST_CONFLICTING_RANGE -> b
    org.eclipse.jgit.merge.MergeChunk$ConflictState BASE_CONFLICTING_RANGE -> c
    org.eclipse.jgit.merge.MergeChunk$ConflictState NEXT_CONFLICTING_RANGE -> d
    org.eclipse.jgit.merge.MergeChunk$ConflictState[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.merge.MergeChunk$ConflictState[] values() -> a
org.eclipse.jgit.merge.MergeConfig -> org.eclipse.jgit.h.f:
    org.eclipse.jgit.api.MergeCommand$FastForwardMode fastForwardMode -> a
    boolean squash -> b
    boolean commit -> c
    org.eclipse.jgit.merge.MergeConfig getConfigForCurrentBranch(org.eclipse.jgit.lib.Repository) -> a
    void <init>(java.lang.String,org.eclipse.jgit.lib.Config) -> <init>
    void <init>() -> <init>
    org.eclipse.jgit.api.MergeCommand$FastForwardMode getFastForwardMode() -> a
    boolean isSquash() -> b
    boolean isCommit() -> c
    boolean isMergeConfigOptionSet(java.lang.String,java.lang.String[]) -> a
org.eclipse.jgit.merge.MergeConfig$MergeConfigSectionParser -> org.eclipse.jgit.h.g:
    java.lang.String branch -> a
    void <init>(java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object parse(org.eclipse.jgit.lib.Config) -> parse
org.eclipse.jgit.merge.MergeFormatter -> org.eclipse.jgit.h.h:
    void <init>() -> <init>
org.eclipse.jgit.merge.MergeFormatterPass -> org.eclipse.jgit.h.i:
    org.eclipse.jgit.merge.EolAwareOutputStream out -> a
    org.eclipse.jgit.merge.MergeResult res -> b
    java.util.List seqName -> c
    java.nio.charset.Charset charset -> d
    boolean threeWayMerge -> e
    java.lang.String lastConflictingName -> f
    void <init>(org.eclipse.jgit.util.TemporaryBuffer$LocalFile,org.eclipse.jgit.merge.MergeResult,java.util.List,java.nio.charset.Charset) -> <init>
    void <init>(org.eclipse.jgit.util.TemporaryBuffer$LocalFile,org.eclipse.jgit.merge.MergeResult,java.util.List,java.nio.charset.Charset,byte) -> <init>
    void formatMerge() -> a
    void writeConflictEnd() -> b
    void writeln(java.lang.String) -> a
    boolean isBase(org.eclipse.jgit.merge.MergeChunk) -> a
    boolean isTheirs(org.eclipse.jgit.merge.MergeChunk) -> b
org.eclipse.jgit.merge.MergeMessageFormatter -> org.eclipse.jgit.h.j:
    void <init>() -> <init>
    java.lang.String format$3bb20f00(java.util.ArrayList,org.eclipse.jgit.lib.Ref) -> a
    java.lang.String joinNames$4193609a(java.util.ArrayList,java.lang.String,java.lang.String) -> a
org.eclipse.jgit.merge.MergeResult -> org.eclipse.jgit.h.k:
    java.util.List sequences -> c
    org.eclipse.jgit.util.IntList chunks -> a
    boolean containsConflicts -> d
    org.eclipse.jgit.merge.MergeChunk$ConflictState[] states -> b
    void <clinit>() -> <clinit>
    void <init>(java.util.List) -> <init>
    void add(int,int,int,org.eclipse.jgit.merge.MergeChunk$ConflictState) -> a
    java.util.List getSequences() -> a
    java.util.Iterator iterator() -> iterator
    boolean containsConflicts() -> b
    void setContainsConflicts(boolean) -> a
org.eclipse.jgit.merge.MergeResult$1 -> org.eclipse.jgit.h.l:
    int idx -> a
    org.eclipse.jgit.merge.MergeResult this$0 -> b
    void <init>(org.eclipse.jgit.merge.MergeResult) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.merge.MergeStrategy -> org.eclipse.jgit.h.m:
    org.eclipse.jgit.merge.StrategyOneSided OURS$67b88dd1 -> b
    org.eclipse.jgit.merge.StrategyOneSided THEIRS$67b88dd1 -> c
    org.eclipse.jgit.merge.StrategySimpleTwoWayInCore SIMPLE_TWO_WAY_IN_CORE$2790b600 -> d
    org.eclipse.jgit.merge.StrategyResolve RESOLVE$2790b600 -> e
    org.eclipse.jgit.merge.StrategyRecursive RECURSIVE$2790b600 -> a
    java.util.HashMap STRATEGIES -> f
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void register(org.eclipse.jgit.merge.MergeStrategy) -> a
    void register(java.lang.String,org.eclipse.jgit.merge.MergeStrategy) -> a
    java.lang.String getName() -> a
    org.eclipse.jgit.merge.Merger newMerger(org.eclipse.jgit.lib.Repository) -> a
org.eclipse.jgit.merge.Merger -> org.eclipse.jgit.h.n:
    org.eclipse.jgit.lib.Repository db -> a
    org.eclipse.jgit.internal.storage.file.WindowCursor reader$63005ce7 -> b
    org.eclipse.jgit.revwalk.RevWalk walk -> c
    org.eclipse.jgit.lib.ObjectInserter inserter -> f
    org.eclipse.jgit.revwalk.RevObject[] sourceObjects -> g
    org.eclipse.jgit.revwalk.RevCommit[] sourceCommits -> d
    org.eclipse.jgit.revwalk.RevTree[] sourceTrees -> e
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.lib.Repository getRepository() -> a
    org.eclipse.jgit.lib.Repository nonNullRepo() -> b
    org.eclipse.jgit.lib.ObjectInserter getObjectInserter() -> c
    boolean merge(org.eclipse.jgit.lib.AnyObjectId[]) -> a
    boolean merge$3f73d85f(org.eclipse.jgit.lib.AnyObjectId[]) -> b
    org.eclipse.jgit.lib.ObjectId getBaseCommitId() -> d
    org.eclipse.jgit.revwalk.RevCommit getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.treewalk.CanonicalTreeParser openTree$242a3af9(org.eclipse.jgit.revwalk.RevTree) -> a
    boolean mergeImpl() -> e
    org.eclipse.jgit.lib.ObjectId getResultTreeId() -> f
org.eclipse.jgit.merge.RecursiveMerger -> org.eclipse.jgit.h.o:
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.revwalk.RevCommit getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int) -> a
    java.lang.String lambda$0(java.util.Map$Entry) -> a
org.eclipse.jgit.merge.ResolveMerger -> org.eclipse.jgit.h.p:
    org.eclipse.jgit.treewalk.NameConflictTreeWalk tw -> m
    java.lang.String[] commitNames -> n
    org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater workTreeUpdater -> o
    org.eclipse.jgit.lib.ObjectId resultTree -> f
    java.util.ArrayList modifiedFiles$7865b31 -> p
    java.util.ArrayList unmergedPaths$7865b31 -> g
    java.util.HashMap mergeResults$5a983bf5 -> h
    java.util.HashMap failingPaths$5a983bf5 -> i
    boolean enterSubtree -> q
    boolean inCore -> j
    org.eclipse.jgit.dircache.DirCache dircache -> k
    org.eclipse.jgit.treewalk.WorkingTreeIterator workingTreeIterator -> l
    org.eclipse.jgit.merge.MergeAlgorithm mergeAlgorithm -> r
    org.eclipse.jgit.merge.ContentMergeStrategy contentStrategy -> s
    org.eclipse.jgit.attributes.Attributes NO_ATTRIBUTES -> t
    int[] $SWITCH_TABLE$org$eclipse$jgit$merge$ContentMergeStrategy -> u
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void setContentMergeStrategy$33a0970f() -> g
    boolean mergeImpl() -> e
    org.eclipse.jgit.dircache.DirCacheEntry add$78d1be5c(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,java.time.Instant) -> a
    org.eclipse.jgit.dircache.DirCacheEntry addConflict(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser) -> a
    org.eclipse.jgit.dircache.DirCacheEntry keep(org.eclipse.jgit.dircache.DirCacheEntry) -> a
    void addToCheckout(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.attributes.Attributes[]) -> a
    boolean processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean,org.eclipse.jgit.attributes.Attributes[]) -> a
    org.eclipse.jgit.merge.MergeResult createGitLinksMergeResult(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser) -> b
    org.eclipse.jgit.merge.MergeResult contentMerge(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.attributes.Attributes[],org.eclipse.jgit.merge.ContentMergeStrategy) -> a
    org.eclipse.jgit.merge.ContentMergeStrategy getAttributesContentMergeStrategy(org.eclipse.jgit.attributes.Attributes,org.eclipse.jgit.merge.ContentMergeStrategy) -> a
    boolean isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry) -> a
    void updateIndex(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.merge.MergeResult,org.eclipse.jgit.attributes.Attributes) -> a
    java.io.File writeMergedFile$1e3de73b(org.eclipse.jgit.util.TemporaryBuffer$LocalFile,org.eclipse.jgit.attributes.Attributes) -> a
    org.eclipse.jgit.util.TemporaryBuffer$LocalFile doMerge$5926f9d3(org.eclipse.jgit.merge.MergeResult) -> a
    int mergeFileModes(int,int,int) -> a
    org.eclipse.jgit.diff.RawText getRawText(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.attributes.Attributes) -> a
    boolean nonTree(int) -> a
    org.eclipse.jgit.lib.ObjectId getResultTreeId() -> f
    void setCommitNames(java.lang.String[]) -> a
    java.util.ArrayList getUnmergedPaths$5679c1ce() -> h
    java.util.ArrayList getModifiedFiles$5679c1ce() -> i
    java.util.HashMap getMergeResults$604efcea() -> j
    java.util.HashMap getFailingPaths$604efcea() -> k
    void setWorkingTreeIterator$2ff29f3d(org.eclipse.jgit.treewalk.FileTreeIterator) -> a
    boolean mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$merge$ContentMergeStrategy() -> m
org.eclipse.jgit.merge.ResolveMerger$MergeFailureReason -> org.eclipse.jgit.h.q:
    org.eclipse.jgit.merge.ResolveMerger$MergeFailureReason DIRTY_INDEX -> a
    org.eclipse.jgit.merge.ResolveMerger$MergeFailureReason DIRTY_WORKTREE -> b
    org.eclipse.jgit.merge.ResolveMerger$MergeFailureReason COULD_NOT_DELETE -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater -> org.eclipse.jgit.h.r:
    org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater$Result result -> a
    org.eclipse.jgit.lib.Repository repo -> b
    boolean inCore -> c
    org.eclipse.jgit.lib.ObjectInserter inserter -> d
    org.eclipse.jgit.internal.storage.file.WindowCursor reader$63005ce7 -> e
    org.eclipse.jgit.dircache.DirCache dirCache -> f
    boolean implicitDirCache -> g
    org.eclipse.jgit.dircache.DirCacheBuilder builder -> h
    org.eclipse.jgit.treewalk.WorkingTreeOptions workingTreeOptions -> i
    int inCoreFileSizeLimit -> j
    java.util.HashMap toBeCheckedOut$5a983bf5 -> k
    java.util.TreeMap toBeDeleted -> l
    java.util.HashMap checkoutMetadataByPath$5a983bf5 -> m
    java.util.HashMap cleanupMetadataByPath$5a983bf5 -> n
    boolean indexChangesWritten -> o
    org.eclipse.jgit.dircache.Checkout checkout -> p
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCache) -> <init>
    org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater createWorkTreeUpdater(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCache) -> a
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectInserter) -> <init>
    org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater createInCoreWorkTreeUpdater(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectInserter) -> a
    int getInCoreFileSizeLimit$4c3b4f5f(org.eclipse.jgit.lib.StoredConfig) -> a
    int getInCoreFileSizeLimit() -> a
    org.eclipse.jgit.dircache.DirCache getLockedDirCache() -> b
    org.eclipse.jgit.dircache.DirCacheBuildIterator createDirCacheBuildIterator() -> c
    void writeWorkTreeChanges$1385ff() -> d
    org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater$Result writeIndexChanges() -> e
    void addToCheckout(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String,org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String) -> a
    void deleteFile(java.lang.String,java.io.File,org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String) -> a
    void addCheckoutMetadata$71e0757a(java.util.HashMap,java.lang.String,org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String) -> a
    org.eclipse.jgit.lib.CoreConfig$EolStreamType detectCheckoutStreamType(org.eclipse.jgit.attributes.Attributes) -> a
    void markAsModified(java.lang.String) -> a
    java.util.ArrayList getModifiedFiles$5679c1ce() -> f
    void revertModifiedFiles() -> g
    void close() -> close
    void updateFileWithContent(org.eclipse.jgit.dircache.DirCacheCheckout$StreamSupplier,org.eclipse.jgit.lib.CoreConfig$EolStreamType,java.lang.String,java.lang.String,java.io.File) -> a
    org.eclipse.jgit.dircache.DirCacheEntry insertToIndex$6fb3418f$2e10be0a(java.io.InputStream,byte[],org.eclipse.jgit.lib.FileMode,java.time.Instant,int) -> a
    org.eclipse.jgit.dircache.DirCacheEntry addExistingToIndex(org.eclipse.jgit.lib.ObjectId,byte[],org.eclipse.jgit.lib.FileMode,int,java.time.Instant,int) -> a
    org.eclipse.jgit.lib.ObjectId insertResult$4bff8bb2(java.io.InputStream,long) -> a
    org.eclipse.jgit.lib.Repository nonNullRepo() -> h
    java.lang.String lambda$0() -> i
org.eclipse.jgit.merge.ResolveMerger$WorkTreeUpdater$Result -> org.eclipse.jgit.h.s:
    java.util.ArrayList modifiedFiles$7865b31 -> a
    java.util.ArrayList failedToDelete$7865b31 -> b
    org.eclipse.jgit.lib.ObjectId treeId -> c
    void <init>() -> <init>
    org.eclipse.jgit.lib.ObjectId getTreeId() -> a
    java.util.ArrayList getFailedToDelete$5679c1ce() -> b
    java.util.ArrayList getModifiedFiles$5679c1ce() -> c
org.eclipse.jgit.merge.SquashMessageFormatter -> org.eclipse.jgit.h.t:
    org.eclipse.jgit.util.GitDateFormatter dateFormatter -> a
    void <init>() -> <init>
    java.lang.String format$3bb20f00$184e2efa(java.util.ArrayList) -> a
org.eclipse.jgit.merge.StrategyOneSided -> org.eclipse.jgit.h.u:
    java.lang.String strategyName -> b
    int treeIndex -> c
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getName() -> a
    org.eclipse.jgit.merge.Merger newMerger(org.eclipse.jgit.lib.Repository) -> a
org.eclipse.jgit.merge.StrategyOneSided$OneSide -> org.eclipse.jgit.h.v:
    int treeIndex -> f
    void <init>(org.eclipse.jgit.lib.Repository,int) -> <init>
    boolean mergeImpl() -> e
    org.eclipse.jgit.lib.ObjectId getResultTreeId() -> f
    org.eclipse.jgit.lib.ObjectId getBaseCommitId() -> d
org.eclipse.jgit.merge.StrategyRecursive -> org.eclipse.jgit.h.w:
    void <init>() -> <init>
    org.eclipse.jgit.merge.ThreeWayMerger newMerger(org.eclipse.jgit.lib.Repository) -> b
    java.lang.String getName() -> a
    org.eclipse.jgit.merge.Merger newMerger(org.eclipse.jgit.lib.Repository) -> a
org.eclipse.jgit.merge.StrategyResolve -> org.eclipse.jgit.h.x:
    void <init>() -> <init>
    org.eclipse.jgit.merge.ThreeWayMerger newMerger(org.eclipse.jgit.lib.Repository) -> b
    java.lang.String getName() -> a
    org.eclipse.jgit.merge.Merger newMerger(org.eclipse.jgit.lib.Repository) -> a
org.eclipse.jgit.merge.StrategySimpleTwoWayInCore -> org.eclipse.jgit.h.y:
    void <init>() -> <init>
    java.lang.String getName() -> a
    org.eclipse.jgit.merge.ThreeWayMerger newMerger(org.eclipse.jgit.lib.Repository) -> b
    org.eclipse.jgit.merge.Merger newMerger(org.eclipse.jgit.lib.Repository) -> a
org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger -> org.eclipse.jgit.h.z:
    org.eclipse.jgit.treewalk.NameConflictTreeWalk tw -> f
    org.eclipse.jgit.dircache.DirCache cache -> g
    org.eclipse.jgit.dircache.DirCacheBuilder builder -> h
    org.eclipse.jgit.lib.ObjectId resultTree -> i
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    boolean mergeImpl() -> e
    boolean nonTree(int) -> a
    void add(int,int) -> a
    org.eclipse.jgit.treewalk.AbstractTreeIterator getTree(int) -> b
    org.eclipse.jgit.lib.ObjectId getResultTreeId() -> f
org.eclipse.jgit.merge.ThreeWayMergeStrategy -> org.eclipse.jgit.h.A:
    void <init>() -> <init>
    org.eclipse.jgit.merge.ThreeWayMerger newMerger(org.eclipse.jgit.lib.Repository) -> b
    org.eclipse.jgit.merge.Merger newMerger(org.eclipse.jgit.lib.Repository) -> a
org.eclipse.jgit.merge.ThreeWayMerger -> org.eclipse.jgit.h.B:
    org.eclipse.jgit.lib.ObjectId baseCommitId -> f
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    boolean merge(org.eclipse.jgit.lib.AnyObjectId[]) -> a
    org.eclipse.jgit.lib.ObjectId getBaseCommitId() -> d
    org.eclipse.jgit.treewalk.AbstractTreeIterator mergeBase() -> l
org.eclipse.jgit.nls.GlobalBundleCache -> org.eclipse.jgit.i.a:
    java.util.HashMap cachedBundles$5a983bf5 -> a
    void <clinit>() -> <clinit>
    org.eclipse.jgit.nls.TranslationBundle lookupBundle(java.util.Locale,java.lang.Class) -> a
org.eclipse.jgit.nls.NLS -> org.eclipse.jgit.i.b:
    java.lang.InheritableThreadLocal local -> a
    java.util.Locale locale -> b
    java.util.concurrent.ConcurrentHashMap map$5a983bf5 -> c
    void <clinit>() -> <clinit>
    org.eclipse.jgit.nls.TranslationBundle getBundleFor(java.lang.Class) -> a
    void <init>(java.util.Locale) -> <init>
org.eclipse.jgit.nls.TranslationBundle -> org.eclipse.jgit.i.c:
    java.util.Locale effectiveLocale -> effectiveLocale
    java.util.ResourceBundle resourceBundle -> resourceBundle
    void <init>() -> <init>
    java.util.Locale effectiveLocale() -> effectiveLocale
    java.util.ResourceBundle resourceBundle() -> resourceBundle
    void load(java.util.Locale) -> load
org.eclipse.jgit.revwalk.AbstractRevQueue -> org.eclipse.jgit.revwalk.a:
    org.eclipse.jgit.revwalk.AbstractRevQueue$AlwaysEmptyQueue EMPTY_QUEUE$2cf7c540 -> a
    int outputType -> b
    void <clinit>() -> <clinit>
    void <init>(boolean) -> <init>
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    boolean everbodyHasFlag(int) -> a
    boolean anybodyHasFlag$134632() -> b
    int outputType() -> c
    void describe(java.lang.StringBuilder,org.eclipse.jgit.revwalk.RevCommit) -> a
org.eclipse.jgit.revwalk.AbstractRevQueue$AlwaysEmptyQueue -> org.eclipse.jgit.revwalk.b:
    void <init>() -> <init>
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    boolean anybodyHasFlag$134632() -> b
    boolean everbodyHasFlag(int) -> a
org.eclipse.jgit.revwalk.BitmapWalker -> org.eclipse.jgit.revwalk.c:
    org.eclipse.jgit.revwalk.ObjectWalk walker -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl bitmapIndex$137210aa -> b
    org.eclipse.jgit.lib.NullProgressMonitor pm$375bef60 -> c
    long countOfBitmapIndexMisses -> d
    org.eclipse.jgit.internal.storage.pack.BitmapCommit prevCommit$4cae90d9 -> e
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder prevBitmap$61797f27$7f48663e -> f
    void <init>(org.eclipse.jgit.revwalk.ObjectWalk,org.eclipse.jgit.internal.storage.file.BitmapIndexImpl) -> <init>
    void setPrevCommit$36eb52dc(org.eclipse.jgit.internal.storage.pack.BitmapCommit) -> a
    void setPrevBitmap$7425d542$410b2349(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder findObjects$7439cac4$7fecf970$5847e454(java.util.Set) -> a
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder findObjectsWalk$7439cac4$600932f0$5847e454(java.util.Set) -> b
org.eclipse.jgit.revwalk.BitmapWalker$BitmapObjectFilter -> org.eclipse.jgit.revwalk.d:
    org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder bitmap$7f48663e -> b
    void <init>(org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder) -> <init>
    boolean include$5aefabd8(org.eclipse.jgit.lib.AnyObjectId) -> a
org.eclipse.jgit.revwalk.BlockObjQueue -> org.eclipse.jgit.revwalk.e:
    org.eclipse.jgit.revwalk.BlockObjQueue$BlockFreeList free -> a
    org.eclipse.jgit.revwalk.BlockObjQueue$Block head -> b
    org.eclipse.jgit.revwalk.BlockObjQueue$Block tail -> c
    void <init>() -> <init>
    void add(org.eclipse.jgit.revwalk.RevObject) -> a
    org.eclipse.jgit.revwalk.RevObject next() -> a
org.eclipse.jgit.revwalk.BlockObjQueue$Block -> org.eclipse.jgit.revwalk.f:
    org.eclipse.jgit.revwalk.BlockObjQueue$Block next -> a
    org.eclipse.jgit.revwalk.RevObject[] objects -> b
    int headIndex -> c
    int tailIndex -> d
    void <init>() -> <init>
    void add(org.eclipse.jgit.revwalk.RevObject) -> a
org.eclipse.jgit.revwalk.BlockObjQueue$BlockFreeList -> org.eclipse.jgit.revwalk.g:
    org.eclipse.jgit.revwalk.BlockObjQueue$Block next -> a
    void <init>() -> <init>
    org.eclipse.jgit.revwalk.BlockObjQueue$Block newBlock() -> a
    void freeBlock(org.eclipse.jgit.revwalk.BlockObjQueue$Block) -> a
org.eclipse.jgit.revwalk.BlockRevQueue -> org.eclipse.jgit.revwalk.h:
    org.eclipse.jgit.revwalk.BlockRevQueue$BlockFreeList free -> c
    void <init>(boolean) -> <init>
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
org.eclipse.jgit.revwalk.BlockRevQueue$Block -> org.eclipse.jgit.revwalk.i:
    org.eclipse.jgit.revwalk.BlockRevQueue$Block next -> a
    org.eclipse.jgit.revwalk.RevCommit[] commits -> b
    int headIndex -> c
    int tailIndex -> d
    void <init>() -> <init>
    boolean isEmpty() -> a
    boolean canUnpop() -> b
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    void unpop(org.eclipse.jgit.revwalk.RevCommit) -> b
    org.eclipse.jgit.revwalk.RevCommit pop() -> c
    void resetToEnd() -> d
org.eclipse.jgit.revwalk.BlockRevQueue$BlockFreeList -> org.eclipse.jgit.revwalk.j:
    org.eclipse.jgit.revwalk.BlockRevQueue$Block next -> a
    void <init>() -> <init>
    org.eclipse.jgit.revwalk.BlockRevQueue$Block newBlock() -> a
    void freeBlock(org.eclipse.jgit.revwalk.BlockRevQueue$Block) -> a
org.eclipse.jgit.revwalk.BoundaryGenerator -> org.eclipse.jgit.revwalk.k:
    org.eclipse.jgit.revwalk.Generator g -> a
    void <init>(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.Generator) -> <init>
    int outputType() -> c
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.BoundaryGenerator$InitialGenerator -> org.eclipse.jgit.revwalk.l:
    org.eclipse.jgit.revwalk.RevWalk walk -> a
    org.eclipse.jgit.revwalk.FIFORevQueue held -> b
    org.eclipse.jgit.revwalk.Generator source -> c
    org.eclipse.jgit.revwalk.BoundaryGenerator this$0 -> e
    void <init>(org.eclipse.jgit.revwalk.BoundaryGenerator,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.Generator) -> <init>
    int outputType() -> c
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.DateRevPriorityQueue -> org.eclipse.jgit.revwalk.m:
    java.util.PriorityQueue queue -> c
    java.util.concurrent.atomic.AtomicInteger sequence -> e
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(org.eclipse.jgit.revwalk.AbstractRevQueue) -> <init>
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    org.eclipse.jgit.revwalk.RevCommit peek() -> d
    void clear() -> e
    boolean everbodyHasFlag(int) -> a
    boolean anybodyHasFlag$134632() -> b
    int outputType() -> c
    java.lang.String toString() -> toString
    int lambda$0(org.eclipse.jgit.revwalk.DateRevPriorityQueue$RevCommitEntry) -> a
    boolean lambda$3(int,org.eclipse.jgit.revwalk.RevCommit) -> a
    boolean lambda$5(int,org.eclipse.jgit.revwalk.RevCommit) -> b
org.eclipse.jgit.revwalk.DateRevPriorityQueue$RevCommitEntry -> org.eclipse.jgit.revwalk.n:
    int insertSequenceNumber -> a
    org.eclipse.jgit.revwalk.RevCommit entry -> b
    void <init>(int,org.eclipse.jgit.revwalk.RevCommit) -> <init>
    int getInsertSequenceNumber() -> a
    org.eclipse.jgit.revwalk.RevCommit getEntry() -> b
org.eclipse.jgit.revwalk.DateRevQueue -> org.eclipse.jgit.revwalk.o:
    org.eclipse.jgit.revwalk.DateRevQueue$Entry head -> c
    org.eclipse.jgit.revwalk.DateRevQueue$Entry free -> e
    int inQueue -> f
    int sinceLastIndex -> g
    org.eclipse.jgit.revwalk.DateRevQueue$Entry[] index -> h
    int first -> i
    int last -> j
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(org.eclipse.jgit.revwalk.AbstractRevQueue) -> <init>
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    org.eclipse.jgit.revwalk.RevCommit peek() -> d
    void clear() -> e
    boolean everbodyHasFlag(int) -> a
    boolean anybodyHasFlag$134632() -> b
    int outputType() -> c
    java.lang.String toString() -> toString
org.eclipse.jgit.revwalk.DateRevQueue$Entry -> org.eclipse.jgit.revwalk.p:
    org.eclipse.jgit.revwalk.DateRevQueue$Entry next -> a
    org.eclipse.jgit.revwalk.RevCommit commit -> b
    void <init>() -> <init>
org.eclipse.jgit.revwalk.DelayRevQueue -> org.eclipse.jgit.revwalk.q:
    org.eclipse.jgit.revwalk.Generator pending -> a
    org.eclipse.jgit.revwalk.FIFORevQueue delay -> b
    int size -> c
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.DepthGenerator -> org.eclipse.jgit.revwalk.r:
    org.eclipse.jgit.revwalk.FIFORevQueue pending -> a
    int depth -> b
    org.eclipse.jgit.revwalk.RevWalk walk -> c
    void <init>(org.eclipse.jgit.revwalk.DepthWalk,org.eclipse.jgit.revwalk.DateRevQueue) -> <init>
    int outputType() -> c
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.DepthWalk -> org.eclipse.jgit.revwalk.s:
    int getDepth() -> a
    java.util.List getDeepenNots() -> b
org.eclipse.jgit.revwalk.DepthWalk$Commit -> org.eclipse.jgit.revwalk.t:
    int depth -> a
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
org.eclipse.jgit.revwalk.DepthWalk$ObjectWalk -> org.eclipse.jgit.revwalk.u:
    org.eclipse.jgit.revwalk.RevCommit createCommit(org.eclipse.jgit.lib.AnyObjectId) -> a
    int getDepth() -> a
    java.util.List getDeepenNots() -> b
org.eclipse.jgit.revwalk.FIFORevQueue -> org.eclipse.jgit.revwalk.v:
    org.eclipse.jgit.revwalk.BlockRevQueue$Block head -> e
    org.eclipse.jgit.revwalk.BlockRevQueue$Block tail -> f
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    void unpop(org.eclipse.jgit.revwalk.RevCommit) -> b
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    boolean everbodyHasFlag(int) -> a
    boolean anybodyHasFlag$134632() -> b
    void removeFlag$13462e() -> d
    java.lang.String toString() -> toString
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
org.eclipse.jgit.revwalk.FixUninterestingGenerator -> org.eclipse.jgit.revwalk.w:
    org.eclipse.jgit.revwalk.Generator pending -> a
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.FollowFilter -> org.eclipse.jgit.revwalk.x:
    org.eclipse.jgit.treewalk.filter.PathFilter path -> d
    org.eclipse.jgit.diff.DiffConfig cfg -> a
    org.eclipse.jgit.attributes.FilterCommand renameCallback$3a0b6d2d -> e
    org.eclipse.jgit.revwalk.FollowFilter create(java.lang.String,org.eclipse.jgit.diff.DiffConfig) -> a
    void <init>(org.eclipse.jgit.treewalk.filter.PathFilter,org.eclipse.jgit.diff.DiffConfig) -> <init>
    java.lang.String getPath() -> a
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    boolean shouldBeRecursive() -> b
    java.util.Optional getPathsBestEffort() -> c
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    org.eclipse.jgit.attributes.FilterCommand getRenameCallback$3b7a3d4c() -> e
    void setRenameCallback$59d55212(org.eclipse.jgit.attributes.FilterCommand) -> a
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.Generator -> org.eclipse.jgit.revwalk.y:
    boolean firstParent -> d
    void <init>(boolean) -> <init>
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.LIFORevQueue -> org.eclipse.jgit.revwalk.z:
    org.eclipse.jgit.revwalk.BlockRevQueue$Block head -> e
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    void add(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    boolean everbodyHasFlag(int) -> a
    boolean anybodyHasFlag$134632() -> b
    java.lang.String toString() -> toString
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
org.eclipse.jgit.revwalk.MergeBaseGenerator -> org.eclipse.jgit.revwalk.A:
    org.eclipse.jgit.revwalk.RevWalk walker -> a
    org.eclipse.jgit.revwalk.DateRevQueue pending -> b
    int branchMask -> c
    int recarryTest -> e
    int recarryMask -> f
    int mergeBaseAncestor -> g
    java.util.ArrayDeque ret -> h
    org.eclipse.jgit.revwalk.MergeBaseGenerator$CarryStack stack -> i
    void <init>(org.eclipse.jgit.revwalk.RevWalk) -> <init>
    void init(org.eclipse.jgit.revwalk.AbstractRevQueue) -> a
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    int carryOntoOne(org.eclipse.jgit.revwalk.RevCommit,int) -> a
org.eclipse.jgit.revwalk.MergeBaseGenerator$CarryStack -> org.eclipse.jgit.revwalk.B:
    org.eclipse.jgit.revwalk.MergeBaseGenerator$CarryStack prev -> a
    org.eclipse.jgit.revwalk.RevCommit c -> b
    int carry -> c
    void <init>(org.eclipse.jgit.revwalk.MergeBaseGenerator$CarryStack,org.eclipse.jgit.revwalk.RevCommit,int) -> <init>
org.eclipse.jgit.revwalk.ObjectWalk -> org.eclipse.jgit.revwalk.C:
    org.eclipse.jgit.revwalk.ObjectWalk$1 SIMPLE_VISITATION_POLICY$e1bd12e -> g
    java.util.ArrayList rootObjects$7865b31 -> h
    org.eclipse.jgit.revwalk.BlockObjQueue pendingObjects -> i
    org.eclipse.jgit.revwalk.filter.ObjectFilter objectFilter -> j
    org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit freeVisit -> k
    org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit currVisit -> l
    byte[] pathBuf -> m
    int pathLen -> n
    boolean boundary -> o
    org.eclipse.jgit.revwalk.ObjectWalk$VisitationPolicy visitationPolicy -> p
    boolean $assertionsDisabled -> q
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectReader) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectReader,boolean) -> <init>
    void markStart(org.eclipse.jgit.revwalk.RevObject) -> a
    void markUninteresting(org.eclipse.jgit.revwalk.RevObject) -> b
    void sort(org.eclipse.jgit.revwalk.RevSort) -> a
    void setObjectFilter$2c4ca0b3(org.eclipse.jgit.revwalk.BitmapWalker$BitmapObjectFilter) -> a
    void setVisitationPolicy$2a7254dd(org.eclipse.jgit.internal.storage.pack.PackWriter$DepthAwareVisitationPolicy) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> c
    void skipTree() -> d
    org.eclipse.jgit.revwalk.RevObject nextObject() -> e
    int getTreeDepth() -> f
    int getPathHashCode() -> g
    int updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit) -> a
    void growPathBuf(int) -> c
    void dispose() -> h
    void reset(int) -> a
    void addObject(org.eclipse.jgit.revwalk.RevObject) -> f
    void markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree) -> a
    org.eclipse.jgit.revwalk.RevObject pushTree(org.eclipse.jgit.revwalk.RevObject) -> g
org.eclipse.jgit.revwalk.ObjectWalk$1 -> org.eclipse.jgit.revwalk.D:
    void <init>() -> <init>
    boolean shouldVisit(org.eclipse.jgit.revwalk.RevObject) -> a
    void visited(org.eclipse.jgit.revwalk.RevObject) -> b
org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit -> org.eclipse.jgit.revwalk.E:
    org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit parent -> a
    org.eclipse.jgit.revwalk.RevObject obj -> b
    byte[] buf -> c
    int ptr -> d
    int namePtr -> e
    int nameEnd -> f
    int pathLen -> g
    int depth -> h
    void <init>() -> <init>
org.eclipse.jgit.revwalk.ObjectWalk$VisitationPolicy -> org.eclipse.jgit.revwalk.F:
    boolean shouldVisit(org.eclipse.jgit.revwalk.RevObject) -> a
    void visited(org.eclipse.jgit.revwalk.RevObject) -> b
org.eclipse.jgit.revwalk.PendingGenerator -> org.eclipse.jgit.revwalk.G:
    org.eclipse.jgit.revwalk.RevCommit INIT_LAST -> b
    org.eclipse.jgit.revwalk.RevWalk walker -> c
    org.eclipse.jgit.revwalk.DateRevQueue pending -> e
    org.eclipse.jgit.revwalk.filter.RevFilter filter -> f
    int output -> g
    org.eclipse.jgit.revwalk.RevCommit last -> h
    int overScan -> i
    boolean canDispose -> a
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.DateRevQueue,org.eclipse.jgit.revwalk.filter.RevFilter,int) -> <init>
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.RevBlob -> org.eclipse.jgit.revwalk.H:
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    int getType() -> a
    void parseHeaders(org.eclipse.jgit.revwalk.RevWalk) -> a
    void parseBody(org.eclipse.jgit.revwalk.RevWalk) -> b
org.eclipse.jgit.revwalk.RevCommit -> org.eclipse.jgit.revwalk.I:
    org.eclipse.jgit.revwalk.RevCommit[] NO_PARENTS -> b
    org.eclipse.jgit.revwalk.RevTree tree -> c
    org.eclipse.jgit.revwalk.RevCommit[] parents -> j
    int commitTime -> k
    int inDegree -> l
    byte[] buffer -> m
    void <clinit>() -> <clinit>
    org.eclipse.jgit.revwalk.RevCommit parse(org.eclipse.jgit.revwalk.RevWalk,byte[]) -> a
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    void parseHeaders(org.eclipse.jgit.revwalk.RevWalk) -> a
    void parseBody(org.eclipse.jgit.revwalk.RevWalk) -> b
    void parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[]) -> b
    int getType() -> a
    void carryFlags(org.eclipse.jgit.revwalk.RevCommit,int) -> a
    org.eclipse.jgit.revwalk.FIFORevQueue carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int) -> a
    org.eclipse.jgit.revwalk.FIFORevQueue defer(org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.FIFORevQueue defer(org.eclipse.jgit.revwalk.FIFORevQueue,int,org.eclipse.jgit.revwalk.RevCommit[],int) -> a
    void carryOneStep(org.eclipse.jgit.revwalk.FIFORevQueue,int,org.eclipse.jgit.revwalk.RevCommit) -> a
    int getCommitTime() -> b
    org.eclipse.jgit.revwalk.RevTree getTree() -> c
    int getParentCount() -> d
    org.eclipse.jgit.revwalk.RevCommit getParent(int) -> a
    org.eclipse.jgit.revwalk.RevCommit[] getParents() -> e
    byte[] getRawBuffer() -> f
    org.eclipse.jgit.lib.PersonIdent getAuthorIdent() -> g
    java.lang.String getShortMessage() -> h
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter getChangedPathFilter(org.eclipse.jgit.revwalk.RevWalk) -> c
    void disposeBody() -> i
    java.lang.String toString() -> toString
org.eclipse.jgit.revwalk.RevCommitCG -> org.eclipse.jgit.revwalk.J:
    int graphPosition -> a
    void <init>(org.eclipse.jgit.lib.AnyObjectId,int) -> <init>
    void parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[]) -> b
    void parseHeaders(org.eclipse.jgit.revwalk.RevWalk) -> a
    void parseInGraph(org.eclipse.jgit.revwalk.RevWalk) -> d
    org.eclipse.jgit.internal.storage.commitgraph.ChangedPathFilter getChangedPathFilter(org.eclipse.jgit.revwalk.RevWalk) -> c
org.eclipse.jgit.revwalk.RevFlag -> org.eclipse.jgit.revwalk.K:
    org.eclipse.jgit.revwalk.RevFlag$StaticRevFlag UNINTERESTING$33d5c129 -> a
    org.eclipse.jgit.revwalk.RevFlag$StaticRevFlag SEEN$33d5c129 -> b
    org.eclipse.jgit.revwalk.RevWalk walker -> c
    java.lang.String name -> d
    int mask -> e
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.revwalk.RevWalk,java.lang.String,int) -> <init>
    java.lang.String toString() -> toString
org.eclipse.jgit.revwalk.RevFlag$StaticRevFlag -> org.eclipse.jgit.revwalk.L:
    void <init>(java.lang.String,int) -> <init>
org.eclipse.jgit.revwalk.RevObject -> org.eclipse.jgit.revwalk.M:
    int flags -> n
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    void parseHeaders(org.eclipse.jgit.revwalk.RevWalk) -> a
    void parseBody(org.eclipse.jgit.revwalk.RevWalk) -> b
    int getType() -> a
    boolean has(org.eclipse.jgit.revwalk.RevFlag) -> a
    void add(org.eclipse.jgit.revwalk.RevFlag) -> b
    java.lang.String toString() -> toString
    void appendCoreFlags(java.lang.StringBuilder) -> a
org.eclipse.jgit.revwalk.RevSort -> org.eclipse.jgit.revwalk.RevSort:
    org.eclipse.jgit.revwalk.RevSort NONE -> NONE
    org.eclipse.jgit.revwalk.RevSort COMMIT_TIME_DESC -> COMMIT_TIME_DESC
    org.eclipse.jgit.revwalk.RevSort TOPO -> TOPO
    org.eclipse.jgit.revwalk.RevSort TOPO_KEEP_BRANCH_TOGETHER -> TOPO_KEEP_BRANCH_TOGETHER
    org.eclipse.jgit.revwalk.RevSort REVERSE -> REVERSE
    org.eclipse.jgit.revwalk.RevSort BOUNDARY -> BOUNDARY
    org.eclipse.jgit.revwalk.RevSort[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.revwalk.RevSort[] values() -> values
    org.eclipse.jgit.revwalk.RevSort valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.revwalk.RevTag -> org.eclipse.jgit.revwalk.N:
    org.eclipse.jgit.revwalk.RevObject object -> a
    byte[] buffer -> b
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    void parseHeaders(org.eclipse.jgit.revwalk.RevWalk) -> a
    void parseBody(org.eclipse.jgit.revwalk.RevWalk) -> b
    void parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[]) -> a
    int getType() -> a
    org.eclipse.jgit.revwalk.RevObject getObject() -> b
org.eclipse.jgit.revwalk.RevTree -> org.eclipse.jgit.revwalk.O:
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    int getType() -> a
    void parseHeaders(org.eclipse.jgit.revwalk.RevWalk) -> a
    void parseBody(org.eclipse.jgit.revwalk.RevWalk) -> b
org.eclipse.jgit.revwalk.RevWalk -> org.eclipse.jgit.revwalk.P:
    org.eclipse.jgit.lib.ObjectReader reader -> a
    boolean closeReader -> g
    org.eclipse.jgit.lib.MutableObjectId idBuffer -> b
    org.eclipse.jgit.lib.ObjectIdOwnerMap objects -> c
    int freeFlags -> h
    int delayFreeFlags -> i
    int retainOnReset -> j
    int carryFlags -> k
    java.util.ArrayList roots -> l
    org.eclipse.jgit.revwalk.AbstractRevQueue queue -> d
    org.eclipse.jgit.revwalk.Generator pending -> e
    java.util.EnumSet sorting -> m
    org.eclipse.jgit.revwalk.filter.RevFilter filter -> n
    org.eclipse.jgit.treewalk.filter.TreeFilter treeFilter -> o
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph commitGraph -> p
    boolean retainBody -> q
    boolean rewriteParents -> r
    boolean shallowCommitsInitialized -> f
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectReader) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectReader,boolean) -> <init>
    org.eclipse.jgit.revwalk.DateRevQueue newDateRevQueue$62179d29$1cbdba1d() -> a
    org.eclipse.jgit.revwalk.DateRevQueue newDateRevQueue$736cff7a(org.eclipse.jgit.revwalk.AbstractRevQueue) -> a
    boolean usePriorityQueue() -> d
    org.eclipse.jgit.lib.ObjectReader getObjectReader() -> i
    void close() -> close
    void markStart(org.eclipse.jgit.revwalk.RevCommit) -> a
    void markUninteresting(org.eclipse.jgit.revwalk.RevCommit) -> b
    boolean isMergedInto(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> c
    boolean hasRevSort(org.eclipse.jgit.revwalk.RevSort) -> b
    void sort(org.eclipse.jgit.revwalk.RevSort) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter getRevFilter() -> j
    void setRevFilter(org.eclipse.jgit.revwalk.filter.RevFilter) -> a
    org.eclipse.jgit.treewalk.filter.TreeFilter getTreeFilter() -> k
    boolean getRewriteParents() -> l
    boolean isRetainBody() -> m
    void setRetainBody(boolean) -> a
    org.eclipse.jgit.revwalk.RevBlob lookupBlob$76265500(org.eclipse.jgit.lib.MutableObjectId) -> a
    org.eclipse.jgit.revwalk.RevTree lookupTree(org.eclipse.jgit.lib.AnyObjectId) -> b
    org.eclipse.jgit.revwalk.RevCommit lookupCommit(org.eclipse.jgit.lib.AnyObjectId) -> c
    org.eclipse.jgit.revwalk.RevCommit lookupCommit$751a3885(org.eclipse.jgit.lib.ObjectId,int) -> a
    org.eclipse.jgit.revwalk.RevObject lookupAny$10ac718d(org.eclipse.jgit.lib.MutableObjectId,int) -> a
    org.eclipse.jgit.revwalk.RevObject lookupOrNull$1877031e(org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.revwalk.RevCommit parseCommit(org.eclipse.jgit.lib.AnyObjectId) -> d
    org.eclipse.jgit.revwalk.RevTree parseTree$752618e1(org.eclipse.jgit.lib.ObjectId) -> b
    org.eclipse.jgit.revwalk.RevObject parseAny(org.eclipse.jgit.lib.AnyObjectId) -> e
    org.eclipse.jgit.revwalk.RevObject parseNew(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectLoader) -> a
    byte[] getCachedBytes(org.eclipse.jgit.revwalk.RevObject) -> c
    byte[] getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader) -> a
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph commitGraph() -> n
    org.eclipse.jgit.internal.storage.commitgraph.CommitGraph$CommitData parseAny$46276fc5$2dfb52ae$1d7085a8$70c43ce(java.util.ArrayList) -> a
    void parseHeaders(org.eclipse.jgit.revwalk.RevObject) -> d
    org.eclipse.jgit.revwalk.RevObject peel(org.eclipse.jgit.revwalk.RevObject) -> e
    org.eclipse.jgit.revwalk.RevFlag newFlag(java.lang.String) -> a
    int allocFlag() -> o
    void carry(org.eclipse.jgit.revwalk.RevFlag) -> a
    void freeFlag(int) -> b
    void finishDelayedFreeFlags() -> e
    void reset() -> p
    void reset(int) -> a
    void dispose() -> h
    org.eclipse.jgit.revwalk.RevCommit nextForIterator() -> f
    java.util.Iterator iterator() -> iterator
    void assertNotStarted() -> q
    org.eclipse.jgit.revwalk.RevCommit createCommit(org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.revwalk.RevCommit createCommit(org.eclipse.jgit.lib.AnyObjectId,int) -> a
    void carryFlagsImpl(org.eclipse.jgit.revwalk.RevCommit) -> c
    void assumeShallow$3a3fcc9a(java.util.Set) -> a
    void initializeShallowCommits(org.eclipse.jgit.revwalk.RevCommit) -> d
org.eclipse.jgit.revwalk.RevWalk$1 -> org.eclipse.jgit.revwalk.Q:
    java.util.Iterator val$objItr -> a
    void <init>(java.util.Iterator) -> <init>
    org.eclipse.jgit.revwalk.RevObject next() -> m
org.eclipse.jgit.revwalk.RevWalk$2 -> org.eclipse.jgit.revwalk.R:
    org.eclipse.jgit.revwalk.RevWalk this$0 -> a
    java.util.Iterator val$objItr -> b
    org.eclipse.jgit.lib.ObjectReader$1 val$lItr$27e66786 -> c
    void <init>(org.eclipse.jgit.revwalk.RevWalk,java.util.Iterator,org.eclipse.jgit.lib.ObjectReader$1) -> <init>
    org.eclipse.jgit.revwalk.RevObject next() -> m
org.eclipse.jgit.revwalk.RevWalk$3 -> org.eclipse.jgit.revwalk.S:
    org.eclipse.jgit.revwalk.RevCommit next -> a
    org.eclipse.jgit.revwalk.RevWalk this$0 -> b
    void <init>(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.revwalk.RewriteGenerator -> org.eclipse.jgit.revwalk.T:
    org.eclipse.jgit.revwalk.Generator source -> a
    org.eclipse.jgit.revwalk.FIFORevQueue pending -> b
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
    void applyFilterToParents(org.eclipse.jgit.revwalk.RevCommit) -> a
org.eclipse.jgit.revwalk.StartGenerator -> org.eclipse.jgit.revwalk.U:
    org.eclipse.jgit.revwalk.RevWalk walker -> a
    void <init>(org.eclipse.jgit.revwalk.RevWalk) -> <init>
    int outputType() -> c
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.TopoNonIntermixSortGenerator -> org.eclipse.jgit.revwalk.V:
    org.eclipse.jgit.revwalk.FIFORevQueue pending -> a
    int outputType -> b
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    int outputType() -> c
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.TopoSortGenerator -> org.eclipse.jgit.revwalk.W:
    org.eclipse.jgit.revwalk.FIFORevQueue pending -> a
    int outputType -> b
    void <init>(org.eclipse.jgit.revwalk.Generator) -> <init>
    int outputType() -> c
    void shareFreeList(org.eclipse.jgit.revwalk.BlockRevQueue) -> a
    org.eclipse.jgit.revwalk.RevCommit next() -> a
org.eclipse.jgit.revwalk.TreeRevFilter -> org.eclipse.jgit.revwalk.X:
    int rewriteFlag -> c
    org.eclipse.jgit.treewalk.TreeWalk pathFilter -> d
    long changedPathFilterTruePositive -> e
    long changedPathFilterFalsePositive -> f
    long changedPathFilterNegative -> g
    void <init>(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.treewalk.filter.TreeFilter,int) -> <init>
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    boolean requiresCommitBody() -> b
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.AndRevFilter -> org.eclipse.jgit.revwalk.a.a:
    void <init>() -> <init>
    org.eclipse.jgit.revwalk.filter.RevFilter create$7af27755(org.eclipse.jgit.revwalk.TreeRevFilter,org.eclipse.jgit.revwalk.filter.RevFilter) -> a
org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary -> org.eclipse.jgit.revwalk.a.b:
    org.eclipse.jgit.revwalk.filter.RevFilter a -> c
    org.eclipse.jgit.revwalk.filter.RevFilter b -> d
    boolean requiresCommitBody -> e
    void <init>(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter) -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    boolean requiresCommitBody() -> b
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.ObjectFilter -> org.eclipse.jgit.revwalk.a.c:
    org.eclipse.jgit.revwalk.filter.ObjectFilter$AllFilter ALL$5e542028 -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean include$5aefabd8(org.eclipse.jgit.lib.AnyObjectId) -> a
org.eclipse.jgit.revwalk.filter.ObjectFilter$AllFilter -> org.eclipse.jgit.revwalk.a.d:
    void <init>() -> <init>
    boolean include$5aefabd8(org.eclipse.jgit.lib.AnyObjectId) -> a
org.eclipse.jgit.revwalk.filter.RevFilter -> org.eclipse.jgit.revwalk.a.e:
    org.eclipse.jgit.revwalk.filter.RevFilter$AllFilter ALL$bdaf9cc -> a
    org.eclipse.jgit.revwalk.filter.RevFilter$MergeBaseFilter MERGE_BASE$bdaf9cc -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean requiresCommitBody() -> b
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.RevFilter$AllFilter -> org.eclipse.jgit.revwalk.a.f:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.RevFilter$MergeBaseFilter -> org.eclipse.jgit.revwalk.a.g:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.RevFilter$NoMergesFilter -> org.eclipse.jgit.revwalk.a.h:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.RevFilter$NoneFilter -> org.eclipse.jgit.revwalk.a.i:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.revwalk.filter.RevFilter$OnlyMergesFilter -> org.eclipse.jgit.revwalk.a.j:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit) -> a
    org.eclipse.jgit.revwalk.filter.RevFilter clone() -> a
    boolean requiresCommitBody() -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.storage.file.FileBasedConfig -> org.eclipse.jgit.storage.file.a:
    java.io.File configFile -> a
    org.eclipse.jgit.util.FS fs -> b
    java.util.concurrent.locks.ReentrantReadWriteLock lock -> c
    boolean utf8Bom -> d
    org.eclipse.jgit.internal.storage.file.FileSnapshot snapshot -> e
    org.eclipse.jgit.lib.ObjectId hash -> f
    java.util.concurrent.atomic.AtomicBoolean exists -> g
    void <init>(java.io.File,org.eclipse.jgit.util.FS) -> <init>
    void <init>(org.eclipse.jgit.storage.file.FileBasedConfig,java.io.File,org.eclipse.jgit.util.FS) -> <init>
    boolean notifyUponTransientChanges() -> b
    java.io.File getFile() -> g
    boolean exists() -> h
    void load() -> i
    java.lang.Boolean load(java.io.File) -> a
    void save() -> f
    void clear() -> e
    org.eclipse.jgit.lib.ObjectId hash(byte[]) -> b
    java.lang.String toString() -> toString
    boolean isOutdated() -> j
    byte[] readIncludedConfig(java.lang.String) -> d
org.eclipse.jgit.storage.file.FileRepositoryBuilder -> org.eclipse.jgit.storage.file.FileRepositoryBuilder:
    void <init>() -> <init>
    org.eclipse.jgit.lib.Repository build() -> build
    org.eclipse.jgit.lib.Repository create(java.io.File) -> create
org.eclipse.jgit.storage.file.UserConfigFile -> org.eclipse.jgit.storage.file.b:
    org.eclipse.jgit.storage.file.FileBasedConfig parent -> a
    void <init>(org.eclipse.jgit.storage.file.FileBasedConfig,java.io.File,java.io.File,org.eclipse.jgit.util.FS) -> <init>
    void setStringList(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> a
    void unsetSection(java.lang.String,java.lang.String) -> b
    boolean removeSection(java.lang.String,java.lang.String) -> c
    boolean isOutdated() -> j
    void load() -> i
    void save() -> f
org.eclipse.jgit.storage.file.WindowCacheConfig -> org.eclipse.jgit.storage.file.c:
    int packedGitOpenFiles -> a
    long packedGitLimit -> b
    boolean useStrongIndexRefs -> c
    int packedGitWindowSize -> d
    int deltaBaseCacheLimit -> e
    int streamFileThreshold -> f
    boolean exposeStats -> g
    void <init>() -> <init>
    int getPackedGitOpenFiles() -> a
    long getPackedGitLimit() -> b
    boolean isPackedIndexGitUseStrongRefs() -> c
    int getPackedGitWindowSize() -> d
    int getDeltaBaseCacheLimit() -> e
    int getStreamFileThreshold() -> f
    boolean getExposeStatsViaJmx() -> g
org.eclipse.jgit.storage.pack.PackConfig -> org.eclipse.jgit.storage.a.a:
    java.lang.String[] DEFAULT_BITMAP_EXCLUDED_REFS_PREFIXES -> a
    java.time.Duration DEFAULT_SEARCH_FOR_REUSE_TIMEOUT -> b
    int compressionLevel -> c
    boolean reuseDeltas -> d
    boolean reuseObjects -> e
    boolean preserveOldPacks -> f
    boolean prunePreserved -> g
    boolean deltaCompress -> h
    int maxDeltaDepth -> i
    int deltaSearchWindowSize -> j
    long deltaSearchMemoryLimit -> k
    long deltaCacheSize -> l
    int deltaCacheLimit -> m
    int bigFileThreshold -> n
    boolean waitPreventRacyPack -> o
    long minSizePreventRacyPack -> p
    int threads -> q
    int indexVersion -> r
    boolean writeReverseIndex -> s
    boolean buildBitmaps -> t
    boolean packKeptObjects -> u
    int bitmapContiguousCommitCount -> v
    int bitmapRecentCommitCount -> w
    int bitmapRecentCommitSpan -> x
    int bitmapDistantCommitSpan -> y
    int bitmapExcessiveBranchCount -> z
    int bitmapExcessiveBranchTipCount -> A
    int bitmapInactiveBranchAgeInDays -> B
    java.lang.String[] bitmapExcludedRefsPrefixes -> C
    java.time.Duration searchForReuseTimeout -> D
    boolean cutDeltaChains -> E
    boolean singlePack -> F
    int minBytesForObjSizeIndex -> G
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.internal.storage.file.FileRepository) -> <init>
    boolean isReuseDeltas() -> a
    boolean isReuseObjects() -> b
    boolean isPreserveOldPacks() -> c
    boolean isPrunePreserved() -> d
    boolean isDeltaCompress() -> e
    int getMaxDeltaDepth() -> f
    boolean getCutDeltaChains() -> g
    boolean getSinglePack() -> h
    int getDeltaSearchWindowSize() -> i
    long getDeltaSearchMemoryLimit() -> j
    long getDeltaCacheSize() -> k
    int getDeltaCacheLimit() -> l
    int getBigFileThreshold() -> m
    boolean isWaitPreventRacyPack() -> n
    long getMinSizePreventRacyPack() -> o
    int getCompressionLevel() -> p
    int getThreads() -> q
    int getIndexVersion() -> r
    boolean isWriteReverseIndex() -> s
    boolean isBuildBitmaps() -> t
    boolean isPackKeptObjects() -> u
    int getBitmapContiguousCommitCount() -> v
    int getBitmapRecentCommitCount() -> w
    int getBitmapRecentCommitSpan() -> x
    int getBitmapDistantCommitSpan() -> y
    int getBitmapExcessiveBranchCount() -> z
    int getBitmapExcessiveBranchTipCount() -> A
    int getBitmapInactiveBranchAgeInDays() -> B
    java.time.Duration getSearchForReuseTimeout() -> C
    java.lang.String[] getBitmapExcludedRefsPrefixes() -> D
    java.lang.String toString() -> toString
org.eclipse.jgit.storage.pack.PackStatistics -> org.eclipse.jgit.storage.a.b:
    void <init>() -> <init>
    int getWeight() -> a
    int getFormat() -> c
    org.eclipse.jgit.lib.ObjectId getDeltaBase() -> b
org.eclipse.jgit.storage.pack.PackStatistics$Accumulator -> org.eclipse.jgit.storage.a.c:
    java.util.Set interestingObjects -> a
    int deltasFound -> b
    long totalObjects -> c
    long totalDeltas -> d
    long reusedObjects -> e
    long reusedDeltas -> f
    long thinPackBytes -> g
    long timeWriting -> h
    long treesTraversed -> i
    org.eclipse.jgit.storage.pack.PackStatistics$ObjectType$Accumulator[] objectTypes -> j
    void <init>() -> <init>
org.eclipse.jgit.storage.pack.PackStatistics$ObjectType -> org.eclipse.jgit.storage.a.d:
    int refBlockSize -> a
    int logBlockSize -> b
    int restartInterval -> c
    int maxIndexLevels -> d
    boolean alignBlocks -> e
    boolean indexObjects -> f
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    int getRefBlockSize() -> a
    int getLogBlockSize() -> b
    int getRestartInterval() -> c
    int getMaxIndexLevels() -> d
    boolean isAlignBlocks() -> e
    boolean isIndexObjects() -> f
org.eclipse.jgit.storage.pack.PackStatistics$ObjectType$Accumulator -> org.eclipse.jgit.storage.a.e:
    long cntDeltas -> a
    long reusedObjects -> b
    long reusedDeltas -> c
    long bytes -> d
    long deltaBytes -> e
    void <init>() -> <init>
org.eclipse.jgit.submodule.SubmoduleConflict -> org.eclipse.jgit.j.a:
    void <init>() -> <init>
    int size() -> a
org.eclipse.jgit.submodule.SubmoduleWalk -> org.eclipse.jgit.j.b:
    org.eclipse.jgit.lib.Repository getSubmoduleRepository(java.io.File,java.lang.String,org.eclipse.jgit.util.FS) -> a
    org.eclipse.jgit.lib.Repository getSubmoduleRepository$3123d08b(java.io.File,java.lang.String,org.eclipse.jgit.util.FS,org.eclipse.jgit.lib.RepositoryBuilder) -> a
    void close() -> close
org.eclipse.jgit.transport.FilterSpec -> org.eclipse.jgit.k.a:
    org.eclipse.jgit.transport.FilterSpec$ObjectTypes types -> b
    org.eclipse.jgit.transport.FilterSpec NO_FILTER -> a
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.transport.FilterSpec$ObjectTypes) -> <init>
    boolean allowsType(int) -> a
org.eclipse.jgit.transport.FilterSpec$ObjectTypes -> org.eclipse.jgit.k.b:
    org.eclipse.jgit.transport.FilterSpec$ObjectTypes ALL -> a
    java.math.BigInteger val -> b
    void <clinit>() -> <clinit>
    void <init>(java.math.BigInteger) -> <init>
    boolean contains(int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.eclipse.jgit.transport.PackedObjectInfo -> org.eclipse.jgit.k.c:
    long offset -> a
    int crc -> b
    int type -> c
    void <init>(org.eclipse.jgit.lib.AnyObjectId) -> <init>
    long getOffset() -> A
    void setOffset(long) -> a
    int getCRC() -> B
    void setCRC(int) -> f
    int getType() -> h
org.eclipse.jgit.transport.RefSpec -> org.eclipse.jgit.k.d:
    boolean force -> a
    boolean wildcard -> b
    boolean matching -> c
    boolean negative -> d
    int allowMismatchedWildcards$3a29b8da -> e
    java.lang.String srcName -> f
    java.lang.String dstName -> g
    boolean isWildcard(java.lang.String) -> c
    void <init>() -> <init>
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(org.eclipse.jgit.transport.RefSpec) -> <init>
    java.lang.String getDestination() -> a
    boolean matchSource(java.lang.String) -> a
    org.eclipse.jgit.transport.RefSpec expandFromSource(java.lang.String) -> b
    boolean isNullOrEmpty(java.lang.String) -> d
    java.lang.String checkValid(java.lang.String) -> e
    boolean isValid(java.lang.String) -> f
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.eclipse.jgit.transport.RefSpec$WildcardMode -> org.eclipse.jgit.k.e:
    int REQUIRE_MATCH$3a29b8da -> a
    int ALLOW_MISMATCH$3a29b8da -> b
    void <clinit>() -> <clinit>
org.eclipse.jgit.transport.RemoteConfig -> org.eclipse.jgit.k.f:
    java.lang.String name -> a
    java.util.ArrayList uris$7865b31 -> b
    java.util.ArrayList pushURIs$7865b31 -> c
    java.util.ArrayList fetch$7865b31 -> d
    void <init>(org.eclipse.jgit.lib.StoredConfig,java.lang.String) -> <init>
    java.util.List getFetchRefSpecs() -> a
org.eclipse.jgit.transport.TagOpt -> org.eclipse.jgit.k.g:
    org.eclipse.jgit.transport.TagOpt AUTO_FOLLOW -> a
    org.eclipse.jgit.transport.TagOpt NO_TAGS -> b
    org.eclipse.jgit.transport.TagOpt FETCH_TAGS -> c
    java.lang.String option -> d
    org.eclipse.jgit.transport.TagOpt[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    org.eclipse.jgit.transport.TagOpt fromOption(java.lang.String) -> a
org.eclipse.jgit.transport.URIish -> org.eclipse.jgit.k.h:
    java.util.regex.Pattern FULL_URI -> a
    java.util.regex.Pattern LOCAL_FILE -> b
    java.util.regex.Pattern SINGLE_SLASH_FILE_URI -> c
    java.util.regex.Pattern RELATIVE_SCP_URI -> d
    java.util.regex.Pattern ABSOLUTE_SCP_URI -> e
    java.lang.String scheme -> f
    java.lang.String path -> g
    java.lang.String rawPath -> h
    java.lang.String user -> i
    java.lang.String pass -> j
    int port -> k
    java.lang.String host -> l
    java.util.BitSet reservedChars -> m
    void <clinit>() -> <clinit>
    void <init>(java.lang.String) -> <init>
    java.lang.String unescape(java.lang.String) -> a
    java.lang.String escape$4ff2de3f(java.lang.String,boolean) -> a
    java.lang.String n2e(java.lang.String) -> b
    java.lang.String cleanLeadingSlashes(java.lang.String,java.lang.String) -> a
    void <init>() -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean eq(java.lang.String,java.lang.String) -> b
    java.lang.String toString() -> toString
org.eclipse.jgit.transport.UrlConfig -> org.eclipse.jgit.k.i:
    org.eclipse.jgit.lib.StoredConfig config$797a7507 -> a
    java.util.HashMap insteadOf$5a983bf5 -> b
    java.util.HashMap pushInsteadOf$5a983bf5 -> c
    void <init>(org.eclipse.jgit.lib.StoredConfig) -> <init>
    java.lang.String replace(java.lang.String) -> a
    boolean hasPushReplacements() -> a
    java.lang.String replacePush(java.lang.String) -> b
    java.util.HashMap load$694ad9f4(java.lang.String) -> c
    java.lang.String replace$55081646(java.lang.String,java.util.HashMap) -> a
org.eclipse.jgit.treewalk.AbstractTreeIterator -> org.eclipse.jgit.l.a:
    byte[] zeroid -> d
    org.eclipse.jgit.treewalk.AbstractTreeIterator parent -> e
    org.eclipse.jgit.treewalk.AbstractTreeIterator matches -> f
    org.eclipse.jgit.hooks.Hooks attributesNode$7da53a12 -> g
    int matchShift -> h
    int mode -> i
    byte[] path -> j
    int pathOffset -> k
    int pathLen -> l
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(byte[]) -> <init>
    void <init>(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> <init>
    void <init>(org.eclipse.jgit.dircache.DirCacheIterator,byte[],int) -> <init>
    void growPath(int) -> c
    void ensurePathCapacity(int,int) -> a
    void setPathCapacity(int,int) -> b
    int pathCompare(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> a
    int pathCompare(org.eclipse.jgit.treewalk.AbstractTreeIterator,int) -> a
    boolean findFile(byte[]) -> a
    int pathCompare(byte[],int,int,int,int) -> a
    int alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator) -> a
    boolean idEqual(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> b
    boolean hasId() -> e
    org.eclipse.jgit.lib.ObjectId getEntryObjectId() -> k
    org.eclipse.jgit.lib.FileMode getEntryFileMode() -> l
    int getEntryRawMode() -> m
    java.lang.String getEntryPathString() -> n
    byte[] getEntryPathBuffer() -> o
    int getEntryPathLength() -> p
    byte[] idBuffer() -> f
    int idOffset() -> g
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> a
    org.eclipse.jgit.treewalk.EmptyTreeIterator createEmptyTreeIterator() -> d
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.MutableObjectId) -> a
    boolean first() -> h
    boolean eof() -> i
    void next(int) -> a
    void back(int) -> b
    void skip() -> a
    void stopWalk() -> b
    boolean needsStopWalk() -> c
    int getNameLength() -> q
    int getNameOffset() -> r
    java.lang.String toString() -> toString
    boolean isWorkTree() -> s
org.eclipse.jgit.treewalk.CanonicalTreeParser -> org.eclipse.jgit.l.b:
    byte[] EMPTY -> a
    byte[] ATTRS -> b
    byte[] raw -> c
    int prevPtr -> m
    int currPtr -> n
    int nextPtr -> o
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(byte[],org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.ObjectId) -> <init>
    void <init>(org.eclipse.jgit.treewalk.CanonicalTreeParser) -> <init>
    void reset(byte[]) -> b
    org.eclipse.jgit.treewalk.CanonicalTreeParser next() -> j
    void reset(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId) -> a
    org.eclipse.jgit.treewalk.CanonicalTreeParser createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.MutableObjectId) -> b
    org.eclipse.jgit.treewalk.CanonicalTreeParser createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> b
    boolean hasId() -> e
    byte[] idBuffer() -> f
    int idOffset() -> g
    boolean first() -> h
    boolean eof() -> i
    void next(int) -> a
    void back(int) -> b
    void parseEntry() -> t
    org.eclipse.jgit.hooks.Hooks getEntryAttributesNode$231fbf5c(org.eclipse.jgit.lib.ObjectReader) -> c
    org.eclipse.jgit.hooks.Hooks loadAttributes$4d065b55$2f9e874b(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectId) -> a
    org.eclipse.jgit.hooks.Hooks noAttributes$3c128193() -> u
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.MutableObjectId) -> a
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> a
org.eclipse.jgit.treewalk.EmptyTreeIterator -> org.eclipse.jgit.l.c:
    void <init>() -> <init>
    void <init>(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> <init>
    void <init>(org.eclipse.jgit.dircache.DirCacheIterator,byte[],int) -> <init>
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> a
    boolean hasId() -> e
    org.eclipse.jgit.lib.ObjectId getEntryObjectId() -> k
    byte[] idBuffer() -> f
    int idOffset() -> g
    boolean first() -> h
    boolean eof() -> i
    void next(int) -> a
    void back(int) -> b
    void stopWalk() -> b
    boolean needsStopWalk() -> c
org.eclipse.jgit.treewalk.FileTreeIterator -> org.eclipse.jgit.l.d:
    java.io.File directory -> a
    org.eclipse.jgit.util.FS fs -> b
    org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy fileModeStrategy -> c
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> <init>
    void <init>(java.io.File,org.eclipse.jgit.util.FS,org.eclipse.jgit.treewalk.WorkingTreeOptions,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> <init>
    void <init>(org.eclipse.jgit.treewalk.FileTreeIterator,java.io.File,org.eclipse.jgit.util.FS,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> <init>
    org.eclipse.jgit.treewalk.AbstractTreeIterator createSubtreeIterator(org.eclipse.jgit.lib.ObjectReader) -> a
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[] entries() -> A
    byte[] idSubmodule(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> a
    java.lang.String readSymlinkTarget(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> b
org.eclipse.jgit.treewalk.FileTreeIterator$DefaultFileModeStrategy -> org.eclipse.jgit.l.e:
    org.eclipse.jgit.treewalk.FileTreeIterator$DefaultFileModeStrategy INSTANCE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.lib.FileMode getMode(java.io.File,org.eclipse.jgit.util.FS$Attributes) -> a
org.eclipse.jgit.treewalk.FileTreeIterator$FileEntry -> org.eclipse.jgit.l.f:
    org.eclipse.jgit.lib.FileMode mode -> c
    org.eclipse.jgit.util.FS$Attributes attributes -> d
    void <init>(java.io.File,org.eclipse.jgit.util.FS,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> <init>
    void <init>(java.io.File,org.eclipse.jgit.util.FS_Win32,org.eclipse.jgit.util.FS$Attributes,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> <init>
    org.eclipse.jgit.lib.FileMode getMode() -> a
    java.lang.String getName() -> b
    long getLength() -> c
    java.time.Instant getLastModifiedInstant() -> d
    java.io.InputStream openInputStream() -> e
    java.io.File getFile() -> f
org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy -> org.eclipse.jgit.l.g:
    org.eclipse.jgit.lib.FileMode getMode(java.io.File,org.eclipse.jgit.util.FS$Attributes) -> a
org.eclipse.jgit.treewalk.FileTreeIterator$NoGitlinksStrategy -> org.eclipse.jgit.l.h:
    org.eclipse.jgit.treewalk.FileTreeIterator$NoGitlinksStrategy INSTANCE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.lib.FileMode getMode(java.io.File,org.eclipse.jgit.util.FS$Attributes) -> a
org.eclipse.jgit.treewalk.InstantComparator -> org.eclipse.jgit.l.i:
    void <init>() -> <init>
    int compare(java.time.Instant,java.time.Instant,boolean) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.eclipse.jgit.treewalk.NameConflictTreeWalk -> org.eclipse.jgit.l.j:
    int TREE_MODE -> d
    boolean allTreesNamesMatchFastMinRef -> e
    org.eclipse.jgit.treewalk.AbstractTreeIterator dfConflict -> f
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.internal.storage.file.WindowCursor) -> <init>
    org.eclipse.jgit.treewalk.AbstractTreeIterator min() -> a
    boolean nameEqual(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator) -> a
    boolean isGitlink(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> c
    boolean isTree(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> d
    void popEntriesEqual() -> b
    void skipEntriesEqual() -> c
    void stopWalk() -> d
    boolean isDirectoryFileConflict() -> e
org.eclipse.jgit.treewalk.TreeWalk -> org.eclipse.jgit.l.k:
    org.eclipse.jgit.treewalk.AbstractTreeIterator[] NO_TREES -> d
    org.eclipse.jgit.treewalk.TreeWalk$OperationType operationType -> e
    java.util.HashMap filterCommandsByNameDotType$5a983bf5 -> f
    org.eclipse.jgit.lib.ObjectReader reader -> g
    boolean closeReader -> h
    org.eclipse.jgit.lib.MutableObjectId idBuffer -> i
    org.eclipse.jgit.treewalk.filter.TreeFilter filter -> j
    org.eclipse.jgit.treewalk.AbstractTreeIterator[] trees -> a
    boolean recursive -> k
    int depth -> b
    boolean advance -> l
    org.eclipse.jgit.attributes.AttributesNodeProvider attributesNodeProvider -> m
    org.eclipse.jgit.treewalk.AbstractTreeIterator currentHead -> c
    org.eclipse.jgit.attributes.Attributes[] attrs -> n
    org.eclipse.jgit.attributes.AttributesHandler[] attributesHandlers -> o
    int headIndex -> p
    org.eclipse.jgit.lib.StoredConfig config$797a7507 -> q
    java.util.Set filterCommands -> r
    void <clinit>() -> <clinit>
    void setOperationType(org.eclipse.jgit.treewalk.TreeWalk$OperationType) -> a
    org.eclipse.jgit.treewalk.TreeWalk forPath(org.eclipse.jgit.lib.ObjectReader,java.lang.String,org.eclipse.jgit.lib.AnyObjectId[]) -> a
    void <init>(org.eclipse.jgit.lib.Repository) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectReader) -> <init>
    void <init>(org.eclipse.jgit.lib.ObjectReader) -> <init>
    void <init>(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectReader,boolean) -> <init>
    org.eclipse.jgit.lib.ObjectReader getObjectReader() -> f
    org.eclipse.jgit.treewalk.TreeWalk$OperationType getOperationType() -> g
    void close() -> close
    org.eclipse.jgit.treewalk.filter.TreeFilter getFilter() -> h
    void setFilter(org.eclipse.jgit.treewalk.filter.TreeFilter) -> a
    void setRecursive(boolean) -> a
    org.eclipse.jgit.attributes.AttributesNodeProvider getAttributesNodeProvider() -> i
    void setHead(int) -> a
    org.eclipse.jgit.attributes.Attributes getAttributes() -> j
    org.eclipse.jgit.attributes.Attributes getAttributes(int) -> b
    org.eclipse.jgit.lib.CoreConfig$EolStreamType getEolStreamType(org.eclipse.jgit.treewalk.TreeWalk$OperationType) -> b
    org.eclipse.jgit.lib.CoreConfig$EolStreamType getCheckoutEolStreamType(int) -> c
    void reset() -> k
    void reset$36eb52dc(org.eclipse.jgit.revwalk.RevTree) -> a
    void reset(org.eclipse.jgit.lib.AnyObjectId[]) -> a
    int addTree$36eb52cf(org.eclipse.jgit.lib.ObjectId) -> a
    int addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> a
    int getTreeCount() -> l
    boolean next() -> m
    void stopWalk() -> d
    org.eclipse.jgit.treewalk.AbstractTreeIterator getTree$1ddd6cb4(int) -> d
    int getRawMode(int) -> e
    org.eclipse.jgit.lib.FileMode getFileMode(int) -> f
    org.eclipse.jgit.lib.FileMode getFileMode() -> n
    org.eclipse.jgit.lib.ObjectId getObjectId(int) -> g
    void getObjectId(org.eclipse.jgit.lib.MutableObjectId,int) -> a
    boolean idEqual(int,int) -> a
    java.lang.String getPathString() -> o
    byte[] getRawPath() -> p
    int getPathLength() -> q
    int isPathMatch(byte[],int) -> a
    int isPathPrefix(byte[],int) -> b
    boolean isSubtree() -> r
    void enterSubtree() -> s
    org.eclipse.jgit.treewalk.AbstractTreeIterator min() -> a
    void popEntriesEqual() -> b
    void skipEntriesEqual() -> c
    void exitSubtree() -> t
    org.eclipse.jgit.treewalk.CanonicalTreeParser parserFor(org.eclipse.jgit.lib.AnyObjectId) -> a
    java.lang.String pathOf(org.eclipse.jgit.treewalk.AbstractTreeIterator) -> b
    java.lang.String pathOf(byte[],int,int) -> a
    org.eclipse.jgit.treewalk.AbstractTreeIterator getTree(java.lang.Class) -> a
    java.lang.String getFilterCommand(java.lang.String) -> a
    java.lang.String getSmudgeCommand(int) -> h
    java.lang.String getSmudgeCommand(org.eclipse.jgit.attributes.Attributes) -> a
    java.lang.String getFilterCommandDefinition(java.lang.String,java.lang.String) -> a
    org.eclipse.jgit.treewalk.CanonicalTreeParser lambda$0() -> e
    org.eclipse.jgit.treewalk.CanonicalTreeParser lambda$1(int) -> i
org.eclipse.jgit.treewalk.TreeWalk$OperationType -> org.eclipse.jgit.l.l:
    org.eclipse.jgit.treewalk.TreeWalk$OperationType CHECKOUT_OP -> a
    org.eclipse.jgit.treewalk.TreeWalk$OperationType CHECKIN_OP -> b
    org.eclipse.jgit.treewalk.TreeWalk$OperationType[] ENUM$VALUES -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.treewalk.TreeWalk$OperationType[] values() -> a
org.eclipse.jgit.treewalk.WorkingTreeIterator -> org.eclipse.jgit.l.m:
    org.eclipse.jgit.treewalk.WorkingTreeIterator$IteratorState state -> a
    byte[] contentId -> b
    int contentIdFromPtr -> c
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[] entries -> m
    int entryCnt -> n
    int ptr -> o
    org.eclipse.jgit.ignore.IgnoreNode ignoreNode -> p
    org.eclipse.jgit.util.Holder cleanFilterCommandHolder -> q
    org.eclipse.jgit.util.Holder eolStreamTypeHolder -> r
    org.eclipse.jgit.lib.Repository repository -> s
    long canonLen -> t
    int contentIdOffset -> u
    byte[] digits -> v
    byte[] hblob -> w
    java.util.Comparator ENTRY_CMP -> x
    int[] $SWITCH_TABLE$org$eclipse$jgit$treewalk$WorkingTreeIterator$MetadataDiff -> y
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$AutoCRLF -> z
    boolean $assertionsDisabled -> A
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.treewalk.WorkingTreeOptions) -> <init>
    void <init>(org.eclipse.jgit.treewalk.FileTreeIterator) -> <init>
    void initRootIterator(org.eclipse.jgit.lib.Repository) -> a
    void setDirCacheIterator(org.eclipse.jgit.treewalk.TreeWalk,int) -> a
    org.eclipse.jgit.dircache.DirCacheIterator getDirCacheIterator() -> j
    boolean hasId() -> e
    byte[] idBuffer() -> f
    boolean isWorkTree() -> s
    byte[] idSubmodule(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> a
    byte[] idSubmodule(java.io.File,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> a
    byte[] idBufferBlob(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> c
    long possiblyFilteredLength(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,long) -> a
    java.io.InputStream possiblyFilteredInputStream(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,java.io.InputStream,long) -> a
    boolean isBinary(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> d
    java.io.InputStream filterClean(java.io.InputStream) -> a
    int idOffset() -> g
    boolean first() -> h
    boolean eof() -> i
    void next(int) -> a
    void back(int) -> b
    void parseEntry() -> A
    long getEntryLength() -> t
    long getEntryContentLength() -> u
    java.time.Instant getEntryLastModifiedInstant() -> v
    java.io.InputStream openEntryStream() -> w
    boolean isEntryIgnored() -> x
    boolean isEntryIgnored(int,int) -> b
    org.eclipse.jgit.ignore.IgnoreNode getIgnoreNode() -> B
    org.eclipse.jgit.hooks.Hooks getEntryAttributesNode$3c128193() -> y
    void init(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[]) -> a
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry current() -> z
    boolean isModeDifferent(int) -> d
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry) -> a
    boolean isModified$d6dac66(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader) -> a
    org.eclipse.jgit.lib.FileMode getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator) -> a
    boolean contentCheck(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader) -> b
    java.lang.String readContentAsNormalizedString(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader) -> c
    java.lang.String readSymlinkTarget(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> b
    long computeLength(java.io.InputStream) -> b
    java.lang.String getCleanFilterCommand() -> C
    org.eclipse.jgit.lib.CoreConfig$EolStreamType getEolStreamType(org.eclipse.jgit.treewalk.TreeWalk$OperationType) -> a
    boolean hasCrLfInIndex(org.eclipse.jgit.dircache.DirCacheIterator) -> b
    boolean isDirectoryIgnored(java.lang.String) -> a
    boolean isDirectoryIgnored(java.lang.String,java.lang.String) -> a
    java.lang.String getParentPath(java.lang.String) -> b
    java.lang.String concatPath(java.lang.String,java.lang.String) -> b
    int[] $SWITCH_TABLE$org$eclipse$jgit$treewalk$WorkingTreeIterator$MetadataDiff() -> D
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$AutoCRLF() -> E
    int lambda$0(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> a
org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry -> org.eclipse.jgit.l.n:
    byte[] encodedName -> a
    int encodedNameLen -> b
    void <init>() -> <init>
    java.lang.String toString() -> toString
    org.eclipse.jgit.lib.FileMode getMode() -> a
    long getLength() -> c
    java.time.Instant getLastModifiedInstant() -> d
    java.lang.String getName() -> b
    java.io.InputStream openInputStream() -> e
org.eclipse.jgit.treewalk.WorkingTreeIterator$IgnoreNodeWithParent -> org.eclipse.jgit.l.o:
    org.eclipse.jgit.ignore.IgnoreNode parent -> a
    void <init>(org.eclipse.jgit.ignore.IgnoreNode) -> <init>
    java.lang.Boolean checkIgnored(java.lang.String,boolean) -> a
org.eclipse.jgit.treewalk.WorkingTreeIterator$IteratorState -> org.eclipse.jgit.l.p:
    org.eclipse.jgit.treewalk.WorkingTreeOptions options -> a
    java.nio.charset.CharsetEncoder nameEncoder -> b
    byte[] contentReadBuffer -> c
    org.eclipse.jgit.treewalk.TreeWalk walk -> d
    int dirCacheTree -> e
    java.util.HashMap directoryToIgnored$5a983bf5 -> f
    void <init>(org.eclipse.jgit.treewalk.WorkingTreeOptions) -> <init>
org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff -> org.eclipse.jgit.l.q:
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff EQUAL -> a
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff DIFFER_BY_METADATA -> b
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff SMUDGED -> c
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff DIFFER_BY_TIMESTAMP -> d
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff[] ENUM$VALUES -> e
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.treewalk.WorkingTreeIterator$MetadataDiff[] values() -> a
org.eclipse.jgit.treewalk.WorkingTreeIterator$PerDirectoryAttributesNode -> org.eclipse.jgit.l.r:
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry entry -> a
    void <init>(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> <init>
    org.eclipse.jgit.hooks.Hooks load$3c128193() -> b
org.eclipse.jgit.treewalk.WorkingTreeIterator$PerDirectoryIgnoreNode -> org.eclipse.jgit.l.s:
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry entry -> a
    java.lang.String name -> b
    void <init>(java.lang.String,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry) -> <init>
    org.eclipse.jgit.ignore.IgnoreNode load(org.eclipse.jgit.ignore.IgnoreNode) -> a
org.eclipse.jgit.treewalk.WorkingTreeIterator$RootIgnoreNode -> org.eclipse.jgit.l.t:
    org.eclipse.jgit.lib.Repository repository -> b
    void <init>(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.lib.Repository) -> <init>
    org.eclipse.jgit.ignore.IgnoreNode load(org.eclipse.jgit.ignore.IgnoreNode) -> a
    void loadRulesFromFile$2b3da69e(org.eclipse.jgit.treewalk.WorkingTreeIterator$IgnoreNodeWithParent,java.io.File) -> a
org.eclipse.jgit.treewalk.WorkingTreeOptions -> org.eclipse.jgit.l.u:
    org.eclipse.jgit.lib.Config$SectionParser KEY -> a
    boolean fileMode -> b
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF autoCRLF -> c
    org.eclipse.jgit.lib.CoreConfig$EOL eol -> d
    org.eclipse.jgit.lib.CoreConfig$CheckStat checkStat -> e
    org.eclipse.jgit.lib.CoreConfig$SymLinks symlinks -> f
    boolean dirNoGitLinks -> g
    void <clinit>() -> <clinit>
    void <init>(org.eclipse.jgit.lib.Config) -> <init>
    boolean isFileMode() -> a
    org.eclipse.jgit.lib.CoreConfig$AutoCRLF getAutoCRLF() -> b
    org.eclipse.jgit.lib.CoreConfig$EOL getEOL() -> c
    org.eclipse.jgit.lib.CoreConfig$CheckStat getCheckStat() -> d
    org.eclipse.jgit.lib.CoreConfig$SymLinks getSymLinks() -> e
    boolean isDirNoGitLinks() -> f
org.eclipse.jgit.treewalk.filter.AndTreeFilter -> org.eclipse.jgit.l.a.a:
    void <init>() -> <init>
    org.eclipse.jgit.treewalk.filter.TreeFilter create$1fef898d(org.eclipse.jgit.treewalk.filter.IndexDiffFilter,org.eclipse.jgit.treewalk.filter.TreeFilter) -> a
org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary -> org.eclipse.jgit.l.a.b:
    org.eclipse.jgit.treewalk.filter.TreeFilter a -> a
    org.eclipse.jgit.treewalk.filter.TreeFilter b -> d
    void <init>(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter) -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    int matchFilter(org.eclipse.jgit.treewalk.TreeWalk) -> b
    boolean shouldBeRecursive() -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.ByteArraySet -> org.eclipse.jgit.l.a.c:
    int size -> a
    int grow -> b
    int mask -> c
    byte[][] table -> d
    org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher hasher -> e
    void <init>(int) -> <init>
    boolean equals(byte[],byte[],int) -> a
    boolean contains(byte[],int,int) -> a
    byte[] addIfAbsent(byte[],int,int) -> b
    boolean isEmpty() -> a
    void insert(byte[],int) -> a
    void initTable(int) -> a
    java.lang.String toString() -> toString
    byte[][] toArray() -> b
    java.util.Set toSet() -> c
org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher -> org.eclipse.jgit.l.a.d:
    int hash -> a
    int pos -> b
    byte[] data -> c
    int length -> d
    void <init>(byte[],int) -> <init>
    void init(byte[],int) -> a
    int hash() -> a
    int nextHash() -> b
    int getHash() -> c
    boolean hasNext() -> d
    int length() -> e
    java.lang.String toString() -> toString
org.eclipse.jgit.treewalk.filter.IndexDiffFilter -> org.eclipse.jgit.l.a.e:
    java.util.HashSet ignoredPaths$5a95723b -> a
    java.util.ArrayDeque untrackedParentFolders -> d
    java.util.ArrayDeque untrackedFolders -> e
    void <init>(byte) -> <init>
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    boolean shouldBeRecursive() -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.PathFilter -> org.eclipse.jgit.l.a.f:
    java.lang.String pathStr -> d
    byte[] pathRaw -> a
    org.eclipse.jgit.treewalk.filter.PathFilter create(java.lang.String) -> a
    void <init>(java.lang.String) -> <init>
    java.lang.String getPath() -> a
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    int matchFilter(org.eclipse.jgit.treewalk.TreeWalk) -> b
    boolean shouldBeRecursive() -> b
    java.util.Optional getPathsBestEffort() -> c
    java.lang.String toString() -> toString
    boolean isDone(org.eclipse.jgit.treewalk.TreeWalk) -> c
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.PathFilterGroup -> org.eclipse.jgit.l.a.g:
    long expireAfterMillis -> a
    long cleanupDelayMillis -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter createFromStrings$4b6dc4c2(java.util.ArrayList) -> a
    void <init>() -> <init>
    long getExpireAfter() -> a
    long getCleanupDelay() -> b
org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group -> org.eclipse.jgit.l.a.h:
    org.eclipse.jgit.treewalk.filter.ByteArraySet fullpaths -> a
    org.eclipse.jgit.treewalk.filter.ByteArraySet prefixes -> d
    byte[] max -> e
    void <init>(org.eclipse.jgit.treewalk.filter.PathFilter[]) -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    boolean shouldBeRecursive() -> b
    java.util.Optional getPathsBestEffort() -> c
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single -> org.eclipse.jgit.l.a.i:
    org.eclipse.jgit.treewalk.filter.PathFilter path -> a
    byte[] raw -> d
    void <init>(org.eclipse.jgit.treewalk.filter.PathFilter) -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    boolean shouldBeRecursive() -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.TreeFilter -> org.eclipse.jgit.l.a.j:
    org.eclipse.jgit.treewalk.filter.TreeFilter$AllFilter ALL$21f99fd2 -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter ANY_DIFF$21f99fd2 -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    int matchFilter(org.eclipse.jgit.treewalk.TreeWalk) -> b
    boolean shouldBeRecursive() -> b
    java.util.Optional getPathsBestEffort() -> c
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.TreeFilter$AllFilter -> org.eclipse.jgit.l.a.k:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    boolean shouldBeRecursive() -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter -> org.eclipse.jgit.l.a.l:
    void <init>() -> <init>
    boolean include(org.eclipse.jgit.treewalk.TreeWalk) -> a
    boolean shouldBeRecursive() -> b
    org.eclipse.jgit.treewalk.filter.TreeFilter clone() -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.eclipse.jgit.util.Base85 -> org.eclipse.jgit.util.a:
    byte[] ENCODE -> a
    int[] DECODE -> b
    void <clinit>() -> <clinit>
    int encodedLength(int) -> a
    byte[] encode(byte[],int,int) -> a
    byte[] decode(byte[],int) -> a
org.eclipse.jgit.util.BlockList -> org.eclipse.jgit.util.b:
    java.lang.Object[][] directory -> a
    int size -> b
    int tailDirIdx -> c
    int tailBlkIdx -> d
    java.lang.Object[] tailBlock -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    int size() -> size
    void clear() -> clear
    java.lang.Object get(int) -> get
    java.lang.Object set(int,java.lang.Object) -> set
    void addAll(org.eclipse.jgit.util.BlockList) -> a
    void addAll(java.lang.Object[],int,int) -> a
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    void resetTailBlock() -> a
    java.util.Iterator iterator() -> iterator
    int toDirectoryIndex(int) -> a
    int toBlockIndex(int) -> b
org.eclipse.jgit.util.BlockList$MyIterator -> org.eclipse.jgit.util.c:
    int index -> a
    int dirIdx -> b
    int blkIdx -> c
    java.lang.Object[] block -> d
    org.eclipse.jgit.util.BlockList this$0 -> e
    void <init>(org.eclipse.jgit.util.BlockList) -> <init>
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.eclipse.jgit.util.ChangeIdUtil -> org.eclipse.jgit.util.d:
    java.util.regex.Pattern footerPattern -> a
    java.util.regex.Pattern includeInFooterPattern -> b
    void <clinit>() -> <clinit>
    int indexOfFirstFooterLine(java.lang.String[]) -> a
org.eclipse.jgit.util.FS -> org.eclipse.jgit.util.e:
    org.slf4j.Logger LOG -> c
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[] NO_ENTRIES -> a
    java.util.regex.Pattern VERSION -> d
    java.util.regex.Pattern EMPTY_PATH -> e
    java.lang.Boolean supportSymlinks -> f
    org.eclipse.jgit.util.FS DETECTED -> b
    org.eclipse.jgit.util.FS$FSFactory factory -> g
    org.eclipse.jgit.util.FS$Holder userHome -> h
    org.eclipse.jgit.util.FS$Holder gitSystemConfig -> i
    boolean $assertionsDisabled -> j
    void <clinit>() -> <clinit>
    org.eclipse.jgit.util.FS detect() -> a
    org.eclipse.jgit.util.FS detect$552f0819() -> j
    org.eclipse.jgit.util.FS$FileStoreAttributes getFileStoreAttributes(java.nio.file.Path) -> a
    void <init>() -> <init>
    boolean supportsExecute() -> b
    boolean supportsAtomicCreateNewFile() -> c
    boolean supportsSymlinks() -> d
    boolean canExecute(java.io.File) -> a
    boolean setExecute(java.io.File,boolean) -> a
    java.time.Instant lastModifiedInstant(java.io.File) -> b
    java.io.File resolve(java.io.File,java.lang.String) -> a
    java.io.File userHome() -> e
    java.io.File safeUserHomeImpl() -> k
    boolean retryFailedLockFileCommit() -> f
    java.nio.file.attribute.BasicFileAttributes fileAttributes(java.io.File) -> c
    java.io.File userHomeImpl() -> g
    java.io.File defaultUserHomeImpl() -> l
    java.io.File searchPath(java.lang.String,java.lang.String[]) -> a
    java.lang.String readPipe(java.io.File,java.lang.String[],java.lang.String) -> a
    java.lang.String readPipe$89cc3c8(java.io.File,java.lang.String[],java.lang.String,java.util.HashMap) -> a
    java.io.File discoverGitExe() -> h
    java.io.File discoverGitSystemConfig() -> m
    long parseVersion(java.lang.String) -> c
    long makeVersion(int,int,int) -> a
    java.io.File getGitSystemConfig() -> i
    java.lang.String readSymLink(java.io.File) -> d
    boolean isSymLink(java.io.File) -> e
    boolean exists(java.io.File) -> f
    boolean isDirectory(java.io.File) -> g
    void setHidden$f6d4428(java.io.File) -> h
    void createSymLink(java.io.File,java.lang.String) -> b
    org.eclipse.jgit.util.FS$LockToken createNewFileAtomic(java.io.File) -> i
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[] list(java.io.File,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> a
    org.eclipse.jgit.util.ProcessResult runHookIfPresent$7593d9a3$72e12f55$54f0cf71(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String[],java.io.PrintStream,org.eclipse.jgit.util.io.TeeOutputStream) -> a
    org.eclipse.jgit.util.ProcessResult internalRunHookIfPresent$7593d9a3$72e12f55$54f0cf71(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String[],java.io.PrintStream,org.eclipse.jgit.util.io.TeeOutputStream) -> b
    java.lang.String shellQuote(java.lang.String) -> a
    java.io.File findHook(org.eclipse.jgit.lib.Repository,java.lang.String) -> a
    java.io.File getRunDirectory(org.eclipse.jgit.lib.Repository,java.lang.String) -> b
    int runProcess(java.lang.ProcessBuilder,java.io.OutputStream,java.io.OutputStream,java.io.InputStream) -> a
    boolean shutdownAndAwaitTermination(java.util.concurrent.ExecutorService) -> a
    java.lang.ProcessBuilder runInShell(java.lang.String,java.lang.String[]) -> b
    org.eclipse.jgit.util.FS$ExecutionResult execute(java.lang.ProcessBuilder,java.io.InputStream) -> a
    org.eclipse.jgit.util.FS$Attributes getAttributes(java.io.File) -> j
    java.io.File normalize(java.io.File) -> k
    java.lang.String normalize(java.lang.String) -> b
    java.io.File getCommonDir(java.io.File) -> l
org.eclipse.jgit.util.FS$Attributes -> org.eclipse.jgit.util.f:
    boolean isDirectory -> a
    boolean isSymbolicLink -> b
    java.time.Instant lastModifiedInstant -> c
    boolean isExecutable -> d
    java.io.File file -> e
    long length -> f
    boolean isDirectory() -> a
    boolean isExecutable() -> b
    boolean isSymbolicLink() -> c
    java.time.Instant getLastModifiedInstant() -> d
    void <init>(java.io.File,boolean,boolean,boolean,java.time.Instant,long) -> <init>
    void <init>(java.io.File) -> <init>
    long getLength() -> e
    java.lang.String getName() -> f
    java.io.File getFile() -> g
org.eclipse.jgit.util.FS$ExecutionResult -> org.eclipse.jgit.util.g:
    org.eclipse.jgit.util.TemporaryBuffer$LocalFile stdout$55d0ad91 -> a
    org.eclipse.jgit.util.TemporaryBuffer$Heap stderr$55d0ad91 -> b
    int rc -> c
    void <init>(org.eclipse.jgit.util.TemporaryBuffer$LocalFile,org.eclipse.jgit.util.TemporaryBuffer$Heap,int) -> <init>
    org.eclipse.jgit.util.TemporaryBuffer$LocalFile getStdout$68fe61b2() -> a
    org.eclipse.jgit.util.TemporaryBuffer$Heap getStderr$68fe61b2() -> b
    int getRc() -> c
org.eclipse.jgit.util.FS$FSFactory -> org.eclipse.jgit.util.h:
    void <init>() -> <init>
    org.eclipse.jgit.util.FS detect$552f0819() -> a
org.eclipse.jgit.util.FS$FileStoreAttributes -> org.eclipse.jgit.util.i:
    java.time.Duration UNDEFINED_DURATION -> b
    java.time.Duration FALLBACK_TIMESTAMP_RESOLUTION -> c
    org.eclipse.jgit.util.FS$FileStoreAttributes FALLBACK_FILESTORE_ATTRIBUTES -> a
    long ONE_MICROSECOND -> d
    long ONE_MILLISECOND -> e
    long ONE_SECOND -> f
    long MINIMUM_RESOLUTION_NANOS -> g
    java.lang.String JAVA_VERSION_PREFIX -> h
    java.time.Duration FALLBACK_MIN_RACY_INTERVAL -> i
    java.util.concurrent.ConcurrentHashMap attributeCache$5a983bf5 -> j
    org.eclipse.jgit.util.SimpleLruCache attrCacheByPath -> k
    java.util.concurrent.atomic.AtomicBoolean background -> l
    java.util.concurrent.ConcurrentHashMap locks$5a983bf5 -> m
    java.util.concurrent.atomic.AtomicInteger threadNumber -> n
    java.util.concurrent.ThreadPoolExecutor SAVE_RUNNER$331d0885 -> o
    java.time.Duration fsTimestampResolution -> p
    java.time.Duration minimalRacyInterval -> q
    void <clinit>() -> <clinit>
    void shutdownSafeRunner() -> c
    org.eclipse.jgit.util.FS$FileStoreAttributes get(java.nio.file.Path) -> a
    org.eclipse.jgit.util.FS$FileStoreAttributes getFileStoreAttributes(java.nio.file.Path) -> b
    java.time.Duration measureMinimalRacyInterval(java.nio.file.Path) -> c
    void write(java.nio.file.Path,java.lang.String) -> a
    java.util.Optional measureFsTimestampResolution(java.nio.file.FileStore,java.nio.file.Path) -> a
    void deleteProbe(java.nio.file.Path) -> d
    java.util.Optional readFromConfig(java.nio.file.FileStore) -> a
    java.lang.String getConfigKey(java.nio.file.FileStore) -> b
    java.util.concurrent.TimeUnit getUnit(long) -> a
    java.time.Duration getMinimalRacyInterval() -> a
    java.time.Duration getFsTimestampResolution() -> b
    void <init>(java.time.Duration) -> <init>
    java.lang.String toString() -> toString
    java.lang.Thread lambda$0(java.lang.Runnable) -> a
    java.util.Optional lambda$2(java.nio.file.FileStore,java.nio.file.Path) -> b
    java.util.Optional lambda$5(java.lang.Throwable) -> a
    java.util.concurrent.locks.Lock lambda$3(java.nio.file.FileStore) -> c
    void lambda$4(java.nio.file.FileStore,org.eclipse.jgit.util.FS$FileStoreAttributes) -> a
org.eclipse.jgit.util.FS$GobblerThread -> org.eclipse.jgit.util.j:
    java.lang.Process p -> d
    java.lang.String desc -> e
    java.lang.String dir -> f
    java.util.concurrent.atomic.AtomicBoolean fail -> a
    java.util.concurrent.atomic.AtomicReference errorMessage -> b
    java.util.concurrent.atomic.AtomicReference exception -> c
    void <init>(java.lang.Process,java.lang.String[],java.io.File) -> <init>
    void run() -> run
    boolean waitForProcessCompletion(java.io.IOException) -> a
    void setError(java.io.IOException,java.lang.String,int) -> a
org.eclipse.jgit.util.FS$Holder -> org.eclipse.jgit.util.k:
    java.io.File value$5f790d9c -> a
    void <init>(java.io.File) -> <init>
org.eclipse.jgit.util.FS$LockToken -> org.eclipse.jgit.util.l:
    boolean isCreated -> a
    java.util.Optional link -> b
    void <init>(boolean,java.util.Optional) -> <init>
    boolean isCreated() -> a
    void close() -> close
    java.lang.String toString() -> toString
org.eclipse.jgit.util.FS$StreamGobbler -> org.eclipse.jgit.util.m:
    java.io.InputStream in -> a
    java.io.OutputStream out -> b
    void <init>(java.io.InputStream,java.io.OutputStream) -> <init>
    void run() -> run
    void copy() -> a
org.eclipse.jgit.util.FS_POSIX -> org.eclipse.jgit.util.n:
    org.slf4j.Logger LOG -> c
    int umask -> d
    java.util.concurrent.ConcurrentHashMap CAN_HARD_LINK$5a983bf5 -> e
    org.eclipse.jgit.util.FS_POSIX$AtomicFileCreation supportsAtomicFileCreation -> f
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    int readUmask() -> j
    java.io.File discoverGitExe() -> h
    boolean supportsExecute() -> b
    boolean canExecute(java.io.File) -> a
    boolean setExecute(java.io.File,boolean) -> a
    void apply(java.util.Set,int,java.nio.file.attribute.PosixFilePermission,int) -> a
    java.lang.ProcessBuilder runInShell(java.lang.String,java.lang.String[]) -> b
    java.lang.String shellQuote(java.lang.String) -> a
    org.eclipse.jgit.util.ProcessResult runHookIfPresent$7593d9a3$72e12f55$54f0cf71(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String[],java.io.PrintStream,org.eclipse.jgit.util.io.TeeOutputStream) -> a
    boolean retryFailedLockFileCommit() -> f
    void setHidden$f6d4428(java.io.File) -> h
    org.eclipse.jgit.util.FS$Attributes getAttributes(java.io.File) -> j
    java.io.File normalize(java.io.File) -> k
    java.lang.String normalize(java.lang.String) -> b
    boolean supportsAtomicCreateNewFile() -> c
    org.eclipse.jgit.util.FS$LockToken createNewFileAtomic(java.io.File) -> i
    org.eclipse.jgit.util.FS$LockToken token(boolean,java.nio.file.Path) -> a
    java.lang.Boolean lambda$0(java.nio.file.FileStore) -> a
org.eclipse.jgit.util.FS_POSIX$AtomicFileCreation -> org.eclipse.jgit.util.o:
    org.eclipse.jgit.util.FS_POSIX$AtomicFileCreation SUPPORTED -> a
    org.eclipse.jgit.util.FS_POSIX$AtomicFileCreation NOT_SUPPORTED -> b
    org.eclipse.jgit.util.FS_POSIX$AtomicFileCreation UNDEFINED -> c
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
org.eclipse.jgit.util.FS_Win32 -> org.eclipse.jgit.util.p:
    org.slf4j.Logger LOG -> c
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    boolean supportsExecute() -> b
    boolean canExecute(java.io.File) -> a
    boolean setExecute(java.io.File,boolean) -> a
    boolean retryFailedLockFileCommit() -> f
    org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[] list(java.io.File,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> a
    java.io.File discoverGitExe() -> h
    java.io.File userHomeImpl() -> g
    java.lang.ProcessBuilder runInShell(java.lang.String,java.lang.String[]) -> b
    org.eclipse.jgit.util.FS$Attributes getAttributes(java.io.File) -> j
org.eclipse.jgit.util.FS_Win32$1 -> org.eclipse.jgit.util.q:
    org.eclipse.jgit.util.FS_Win32 val$fs$1e40d309 -> a
    boolean val$checkExecutable -> b
    java.util.ArrayList val$result$7865b31 -> c
    org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy val$fileModeStrategy -> d
    void <init>(org.eclipse.jgit.util.FS_Win32,boolean,java.util.ArrayList,org.eclipse.jgit.treewalk.FileTreeIterator$FileModeStrategy) -> <init>
    java.nio.file.FileVisitResult visitFileFailed(java.lang.Object,java.io.IOException) -> visitFileFailed
    java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes) -> visitFile
org.eclipse.jgit.util.FS_Win32_Cygwin -> org.eclipse.jgit.util.r:
    org.slf4j.Logger LOG -> c
    java.lang.String cygpath -> d
    void <clinit>() -> <clinit>
    boolean isCygwin() -> j
    void <init>() -> <init>
    java.io.File resolve(java.io.File,java.lang.String) -> a
    java.io.File userHomeImpl() -> g
    java.lang.ProcessBuilder runInShell(java.lang.String,java.lang.String[]) -> b
    java.lang.String shellQuote(java.lang.String) -> a
    org.eclipse.jgit.util.ProcessResult runHookIfPresent$7593d9a3$72e12f55$54f0cf71(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String[],java.io.PrintStream,org.eclipse.jgit.util.io.TeeOutputStream) -> a
org.eclipse.jgit.util.FileUtils -> org.eclipse.jgit.util.s:
    org.slf4j.Logger LOG -> a
    java.util.Random RNG -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.nio.file.Path toPath(java.io.File) -> a
    void delete(java.io.File) -> b
    void delete(java.io.File,int) -> a
    void handleDeleteException(java.io.File,java.io.IOException,int,int) -> a
    void rename$7c4240a3(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile) -> a
    void rename(java.io.File,java.io.File,java.nio.file.CopyOption[]) -> a
    void mkdir(java.io.File) -> c
    void mkdir(java.io.File,boolean) -> a
    void mkdirs(java.io.File) -> d
    void mkdirs(java.io.File,boolean) -> b
    java.nio.file.Path createSymLink(java.io.File,java.lang.String) -> a
    java.lang.String readSymLink(java.io.File) -> e
    boolean isStaleFileHandleInCausalChain$786b7c5c(java.io.IOException) -> a
    java.lang.Object readWithRetries(java.io.File,org.eclipse.jgit.util.FileUtils$IOFunction) -> a
    boolean isSymlink(java.io.File) -> f
    java.time.Instant lastModifiedInstant(java.nio.file.Path) -> a
    java.nio.file.attribute.BasicFileAttributes fileAttributes(java.io.File) -> g
    boolean exists(java.io.File) -> h
    void setHidden$f6d4428(java.io.File) -> i
    boolean isDirectory(java.io.File) -> j
    boolean isFile(java.io.File) -> k
    boolean hasFiles(java.nio.file.Path) -> b
    org.eclipse.jgit.util.FS$Attributes getFileAttributesBasic$5f7bdad1(org.eclipse.jgit.util.FS_Win32,java.io.File) -> a
    org.eclipse.jgit.util.FS$Attributes getFileAttributesPosix$5f7bdad1$14cdbb6d(java.io.File) -> l
    java.io.File normalize(java.io.File) -> m
    java.lang.String normalize(java.lang.String) -> a
    long delay$487762a3(long) -> a
org.eclipse.jgit.util.FileUtils$IOFunction -> org.eclipse.jgit.util.t:
    java.lang.Object apply(java.lang.Object) -> apply
org.eclipse.jgit.util.GitDateFormatter -> org.eclipse.jgit.util.u:
    java.text.DateFormat dateTimeInstance -> a
    java.text.SimpleDateFormat dateTimeInstance2$74c4faeb -> b
    org.eclipse.jgit.util.GitDateFormatter$Format format -> c
    int[] $SWITCH_TABLE$org$eclipse$jgit$util$GitDateFormatter$Format -> d
    void <init>(org.eclipse.jgit.util.GitDateFormatter$Format) -> <init>
    java.lang.String formatDate(org.eclipse.jgit.lib.PersonIdent) -> a
    int[] $SWITCH_TABLE$org$eclipse$jgit$util$GitDateFormatter$Format() -> a
org.eclipse.jgit.util.GitDateFormatter$Format -> org.eclipse.jgit.util.v:
    org.eclipse.jgit.util.GitDateFormatter$Format DEFAULT -> a
    org.eclipse.jgit.util.GitDateFormatter$Format RELATIVE -> b
    org.eclipse.jgit.util.GitDateFormatter$Format LOCAL -> c
    org.eclipse.jgit.util.GitDateFormatter$Format ISO -> d
    org.eclipse.jgit.util.GitDateFormatter$Format RFC -> e
    org.eclipse.jgit.util.GitDateFormatter$Format SHORT -> f
    org.eclipse.jgit.util.GitDateFormatter$Format RAW -> g
    org.eclipse.jgit.util.GitDateFormatter$Format LOCALE -> h
    org.eclipse.jgit.util.GitDateFormatter$Format LOCALELOCAL -> i
    org.eclipse.jgit.util.GitDateFormatter$Format[] ENUM$VALUES -> j
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.util.GitDateFormatter$Format[] values() -> a
org.eclipse.jgit.util.GitDateParser -> org.eclipse.jgit.util.w:
    java.util.Date NEVER -> a
    org.eclipse.jgit.util.GitDateParser$1 formatCache$175df7e6 -> b
    void <clinit>() -> <clinit>
    java.util.Date parse$4cc908ae(java.lang.String,java.util.Locale) -> a
    java.util.Date parse_relative$ead8be7(java.lang.String) -> a
org.eclipse.jgit.util.GitDateParser$1 -> org.eclipse.jgit.util.x:
    void <init>() -> <init>
    java.lang.Object initialValue() -> initialValue
org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat -> org.eclipse.jgit.util.y:
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat ISO -> a
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat RFC -> b
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat SHORT -> c
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat SHORT_WITH_DOTS_REVERSE -> d
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat SHORT_WITH_DOTS -> e
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat SHORT_WITH_SLASH -> f
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat DEFAULT -> g
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat LOCAL -> h
    java.lang.String formatStr -> i
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat[] ENUM$VALUES -> j
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    org.eclipse.jgit.util.GitDateParser$ParseableSimpleDateFormat[] values() -> a
org.eclipse.jgit.util.Hex -> org.eclipse.jgit.util.z:
    char[] HEX -> a
    void <clinit>() -> <clinit>
    java.lang.String toHexString(byte[]) -> a
org.eclipse.jgit.util.Holder -> org.eclipse.jgit.util.A:
    java.io.Serializable value$5f790d9c -> a
    void <init>(java.io.Serializable) -> <init>
    java.io.Serializable get$7ef3cba3() -> a
org.eclipse.jgit.util.IntList -> org.eclipse.jgit.util.B:
    int[] entries -> a
    int count -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    int size() -> a
    int get(int) -> a
    void clear() -> b
    void add(int) -> b
    void set(int,int) -> a
    void fillTo$255f295() -> c
    void sort$232b8917(org.eclipse.jgit.internal.storage.file.PackReverseIndexWriterV1$IndexPositionsByOffsetComparator) -> a
    void quickSort(int,int,org.eclipse.jgit.util.IntList$IntComparator) -> a
    int partition(int,int,org.eclipse.jgit.util.IntList$IntComparator) -> b
    java.lang.String toString() -> toString
org.eclipse.jgit.util.IntList$IntComparator -> org.eclipse.jgit.util.C:
    int compare(int,int) -> a
org.eclipse.jgit.util.LfsFactory -> org.eclipse.jgit.util.D:
    org.eclipse.jgit.util.LfsFactory instance -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.util.LfsFactory getInstance() -> a
    org.eclipse.jgit.util.LfsFactory$LfsInputStream applyCleanFilter$558de106(java.io.InputStream,long) -> a
    org.eclipse.jgit.lib.ObjectLoader applySmudgeFilter$72fe2b5d(org.eclipse.jgit.lib.ObjectLoader) -> a
org.eclipse.jgit.util.LfsFactory$LfsInputStream -> org.eclipse.jgit.util.E:
    java.io.InputStream stream -> a
    long length -> b
    void <init>(java.io.InputStream,long) -> <init>
    void close() -> close
    int read() -> read
    int read(byte[],int,int) -> read
    long getLength() -> a
org.eclipse.jgit.util.LongList -> org.eclipse.jgit.util.F:
    long[] entries -> a
    int count -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    int size() -> a
    long get(int) -> a
    boolean contains(long) -> a
    void clear() -> b
    void add(long) -> b
    void set(int,long) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.util.LongMap -> org.eclipse.jgit.util.G:
    org.eclipse.jgit.util.LongMap$Node[] table -> a
    int size -> b
    int growAt -> c
    void <init>() -> <init>
    org.eclipse.jgit.internal.storage.reftable.BlockReader get$3c710923(long) -> a
    org.eclipse.jgit.internal.storage.reftable.BlockReader put$33cced79$2e9c4942(long,org.eclipse.jgit.internal.storage.reftable.BlockReader) -> a
    void insert(org.eclipse.jgit.util.LongMap$Node) -> a
    int index(long) -> b
org.eclipse.jgit.util.LongMap$Node -> org.eclipse.jgit.util.H:
    long key -> a
    org.eclipse.jgit.internal.storage.reftable.BlockReader value$5f790d9c -> b
    org.eclipse.jgit.util.LongMap$Node next -> c
    void <init>(long,org.eclipse.jgit.internal.storage.reftable.BlockReader) -> <init>
org.eclipse.jgit.util.Monitoring -> org.eclipse.jgit.util.I:
    org.slf4j.Logger LOG -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    javax.management.ObjectInstance registerMBean$6e75de85(org.eclipse.jgit.internal.storage.file.WindowCache$StatsRecorderImpl,java.lang.String) -> a
org.eclipse.jgit.util.MutableInteger -> org.eclipse.jgit.util.J:
    int value -> a
    void <init>() -> <init>
org.eclipse.jgit.util.ProcessResult -> org.eclipse.jgit.util.K:
    int exitCode -> a
    int status$5260964c -> b
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    int getExitCode() -> a
    int getStatus$10cdddcd() -> b
org.eclipse.jgit.util.ProcessResult$Status -> org.eclipse.jgit.util.L:
    int OK$5260964c -> a
    int NOT_PRESENT$5260964c -> b
    int NOT_SUPPORTED$5260964c -> c
    void <clinit>() -> <clinit>
org.eclipse.jgit.util.QuotedString -> org.eclipse.jgit.util.M:
    org.eclipse.jgit.util.QuotedString$BourneStyle BOURNE -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
org.eclipse.jgit.util.QuotedString$BourneStyle -> org.eclipse.jgit.util.N:
    void <init>() -> <init>
    java.lang.String quote(java.lang.String) -> a
org.eclipse.jgit.util.QuotedString$BourneUserPathStyle -> org.eclipse.jgit.util.O:
    void <init>() -> <init>
    java.lang.String quote(java.lang.String) -> a
org.eclipse.jgit.util.QuotedString$GitPathStyle -> org.eclipse.jgit.util.P:
    byte[] quote -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
org.eclipse.jgit.util.RawCharUtil -> org.eclipse.jgit.util.Q:
    boolean[] WHITESPACE -> a
    void <clinit>() -> <clinit>
    boolean isWhitespace(byte) -> a
    int trimTrailingWhitespace(byte[],int,int) -> a
    int trimLeadingWhitespace(byte[],int,int) -> b
org.eclipse.jgit.util.RawParseUtils -> org.eclipse.jgit.util.R:
    byte[] digits10 -> a
    byte[] digits16 -> b
    byte[] footerLineKeyChars -> c
    java.util.HashMap encodingAliases$5a983bf5 -> d
    byte[] base10byte -> e
    void <clinit>() -> <clinit>
    int match(byte[],int,byte[]) -> a
    int formatBase10(byte[],int,int) -> a
    int parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger) -> a
    long parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger) -> b
    int parseHexInt32(byte[],int) -> a
    int parseHexInt4(byte) -> a
    int parseTimeZoneOffset(byte[],int) -> j
    int next(byte[],int,char) -> a
    int nextLF(byte[],int) -> b
    int nextLF(byte[],int,char) -> b
    int prevLF(byte[],int) -> c
    org.eclipse.jgit.util.IntList lineMap(byte[],int,int) -> b
    org.eclipse.jgit.util.IntList lineMapOrBinary(byte[],int,int) -> c
    int author(byte[],int) -> d
    int committer(byte[],int) -> e
    java.nio.charset.Charset parseEncoding(byte[]) -> c
    java.nio.charset.Charset guessEncoding(byte[]) -> a
    org.eclipse.jgit.lib.PersonIdent parsePersonIdent(byte[],int) -> f
    org.eclipse.jgit.lib.PersonIdent parsePersonIdentOnly(byte[],int) -> g
    java.lang.String decode(byte[]) -> b
    java.lang.String decode(byte[],int,int) -> d
    java.lang.String decode(java.nio.charset.Charset,byte[],int,int) -> a
    java.lang.String decodeNoFallback(java.nio.charset.Charset,byte[],int,int) -> b
    java.lang.String decode(java.nio.ByteBuffer,java.nio.charset.Charset) -> a
    int commitMessage(byte[],int) -> h
    int endOfParagraph(byte[],int) -> i
    int lastIndexOfTrim$1cfc21eb(byte[],int) -> k
org.eclipse.jgit.util.RefList -> org.eclipse.jgit.util.S:
    org.eclipse.jgit.util.RefList EMPTY -> c
    org.eclipse.jgit.lib.Ref[] list -> a
    int cnt -> b
    void <clinit>() -> <clinit>
    org.eclipse.jgit.util.RefList emptyList() -> a
    void <init>(org.eclipse.jgit.lib.Ref[],int) -> <init>
    void <init>(org.eclipse.jgit.util.RefList) -> <init>
    java.util.Iterator iterator() -> iterator
    java.util.List asList() -> b
    int size() -> c
    int find(java.lang.String) -> a
    org.eclipse.jgit.lib.Ref get(java.lang.String) -> b
    org.eclipse.jgit.lib.Ref get(int) -> a
    org.eclipse.jgit.util.RefList$Builder copy(int) -> b
    org.eclipse.jgit.util.RefList set(int,org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.util.RefList add(int,org.eclipse.jgit.lib.Ref) -> b
    org.eclipse.jgit.util.RefList remove(int) -> c
    org.eclipse.jgit.util.RefList put(org.eclipse.jgit.lib.Ref) -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.util.RefList$1 -> org.eclipse.jgit.util.T:
    int idx -> a
    org.eclipse.jgit.util.RefList this$0 -> b
    void <init>(org.eclipse.jgit.util.RefList) -> <init>
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.util.RefList$Builder -> org.eclipse.jgit.util.U:
    org.eclipse.jgit.lib.Ref[] list -> a
    int size -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    int size() -> a
    org.eclipse.jgit.lib.Ref get(int) -> a
    void remove(int) -> b
    void add(org.eclipse.jgit.lib.Ref) -> a
    void addAll$613cf05a(org.eclipse.jgit.lib.Ref[],int) -> a
    void set(int,org.eclipse.jgit.lib.Ref) -> a
    void sort() -> b
    org.eclipse.jgit.util.RefList toRefList() -> c
    java.lang.String toString() -> toString
org.eclipse.jgit.util.RefMap -> org.eclipse.jgit.util.V:
    java.lang.String prefix -> a
    org.eclipse.jgit.util.RefList packed -> b
    org.eclipse.jgit.util.RefList loose -> c
    org.eclipse.jgit.util.RefList resolved -> d
    int size -> e
    boolean sizeIsValid -> f
    org.eclipse.jgit.util.RefMap$1 entrySet$5a95723b -> g
    void <init>() -> <init>
    void <init>(java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList) -> <init>
    boolean containsKey(java.lang.Object) -> containsKey
    org.eclipse.jgit.lib.Ref get(java.lang.Object) -> a
    org.eclipse.jgit.lib.Ref put(java.lang.String,org.eclipse.jgit.lib.Ref) -> a
    boolean isEmpty() -> isEmpty
    java.util.Set entrySet() -> entrySet
    java.lang.String toString() -> toString
    java.lang.String toRefName(java.lang.String) -> a
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.eclipse.jgit.util.RefMap$1 -> org.eclipse.jgit.util.W:
    org.eclipse.jgit.util.RefMap this$0 -> a
    void <init>(org.eclipse.jgit.util.RefMap) -> <init>
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean isEmpty() -> isEmpty
    void clear() -> clear
org.eclipse.jgit.util.RefMap$Ent -> org.eclipse.jgit.util.X:
    org.eclipse.jgit.lib.Ref ref -> a
    org.eclipse.jgit.util.RefMap this$0 -> b
    void <init>(org.eclipse.jgit.util.RefMap,org.eclipse.jgit.lib.Ref) -> <init>
    java.lang.String getKey() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.Object getKey() -> getKey
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
org.eclipse.jgit.util.RefMap$SetIterator -> org.eclipse.jgit.util.Y:
    int packedIdx -> a
    int looseIdx -> b
    int resolvedIdx -> c
    org.eclipse.jgit.util.RefMap$Ent next$2bcef1d -> d
    org.eclipse.jgit.util.RefMap this$0 -> e
    void <init>(org.eclipse.jgit.util.RefMap) -> <init>
    boolean hasNext() -> hasNext
    org.eclipse.jgit.util.RefMap$Ent peek$25e7c4bc() -> a
    org.eclipse.jgit.lib.Ref resolveLoose(org.eclipse.jgit.lib.Ref) -> a
    org.eclipse.jgit.util.RefMap$Ent toEntry(org.eclipse.jgit.lib.Ref) -> b
    void remove() -> remove
    java.lang.Object next() -> next
org.eclipse.jgit.util.SimpleLruCache -> org.eclipse.jgit.util.Z:
    java.util.concurrent.locks.ReentrantLock lock$5f135e5d -> a
    java.util.concurrent.ConcurrentHashMap map$5a983bf5 -> b
    int maximumSize -> c
    int purgeSize -> d
    long time -> e
    void <init>() -> <init>
    org.eclipse.jgit.util.FS$FileStoreAttributes get$7713a341$790cee2(java.nio.file.Path) -> a
    org.eclipse.jgit.util.FS$FileStoreAttributes put$4e55edb$2d544bed(java.nio.file.Path,org.eclipse.jgit.util.FS$FileStoreAttributes) -> a
    long tick() -> a
    long lambda$0(org.eclipse.jgit.util.SimpleLruCache$Entry) -> a
org.eclipse.jgit.util.SimpleLruCache$Entry -> org.eclipse.jgit.util.aa:
    java.nio.file.Path key$5f790d9c -> a
    org.eclipse.jgit.util.FS$FileStoreAttributes value$5f790d9c -> b
    long lastAccessed -> c
    long lastAccessedSorting -> d
    void <init>(java.nio.file.Path,org.eclipse.jgit.util.FS$FileStoreAttributes,long) -> <init>
    void copyAccessTime() -> a
    java.lang.String toString() -> toString
org.eclipse.jgit.util.Stats -> org.eclipse.jgit.util.ab:
    int n -> a
    double avg -> b
    double min -> c
    double max -> d
    double sum -> e
    void <init>() -> <init>
    void add(double) -> a
    double min() -> a
    double max() -> b
    double avg() -> c
    double var() -> d
org.eclipse.jgit.util.StringUtils -> org.eclipse.jgit.util.ac:
    char[] LC -> a
    void <clinit>() -> <clinit>
    char toLowerCase(char) -> a
    java.lang.String toLowerCase(java.lang.String) -> a
    boolean equalsIgnoreCase(java.lang.String,java.lang.String) -> a
    int compareIgnoreCase(java.lang.String,java.lang.String) -> b
    int compareWithCase(java.lang.String,java.lang.String) -> c
    boolean toBoolean(java.lang.String) -> b
    java.lang.Boolean toBooleanOrNull(java.lang.String) -> c
    java.lang.String join$32ec4510(java.util.ArrayList,java.lang.String) -> a
    java.lang.String join$2ddb2a66(java.util.ArrayList,java.lang.String,java.lang.String) -> a
    boolean isEmptyOrNull(java.lang.String) -> d
    java.lang.String replaceLineBreaksWithSpace(java.lang.String) -> e
    long parseLongWithSuffix$505cbf57(java.lang.String) -> f
    java.lang.String formatWithSuffix$2f33e691() -> a
    java.lang.String commonPrefix(java.lang.String[]) -> a
org.eclipse.jgit.util.SystemReader -> org.eclipse.jgit.util.ad:
    org.slf4j.Logger LOG -> a
    java.lang.Boolean isMacOS -> b
    java.lang.Boolean isWindows -> c
    org.eclipse.jgit.util.SystemReader$Default INSTANCE$148e293c -> d
    org.eclipse.jgit.lib.ObjectChecker platformChecker -> e
    java.util.concurrent.atomic.AtomicReference systemConfig -> f
    java.util.concurrent.atomic.AtomicReference userConfig -> g
    java.util.concurrent.atomic.AtomicReference jgitConfig -> h
    java.nio.charset.Charset defaultCharset -> i
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.util.SystemReader$Default getInstance$463b2f45() -> a
    java.lang.String getHostname() -> b
    java.lang.String getenv(java.lang.String) -> a
    java.lang.String getProperty(java.lang.String) -> b
    org.eclipse.jgit.storage.file.FileBasedConfig openUserConfig$3c301a48$21bfffd5(org.eclipse.jgit.storage.file.FileBasedConfig,org.eclipse.jgit.util.FS) -> a
    org.eclipse.jgit.storage.file.FileBasedConfig openSystemConfig$3c301a48$21bfffd5(org.eclipse.jgit.storage.file.FileBasedConfig,org.eclipse.jgit.util.FS) -> b
    org.eclipse.jgit.storage.file.FileBasedConfig openJGitConfig$3c301a48(org.eclipse.jgit.util.FS) -> a
    org.eclipse.jgit.storage.file.FileBasedConfig getUserConfig$4ad69cc3() -> c
    org.eclipse.jgit.storage.file.FileBasedConfig getJGitConfig$4ad69cc3() -> d
    java.nio.file.Path getXdgConfigDirectory(org.eclipse.jgit.util.FS) -> b
    void updateAll(org.eclipse.jgit.lib.Config) -> a
    long getCurrentTime() -> e
    java.time.Instant now() -> f
    java.util.TimeZone getTimeZone() -> g
    java.time.ZoneId getTimeZoneId() -> h
    java.util.Locale getLocale() -> i
    java.nio.charset.Charset getDefaultCharset() -> j
    java.text.SimpleDateFormat getSimpleDateFormat(java.lang.String) -> c
    java.text.SimpleDateFormat getSimpleDateFormat(java.lang.String,java.util.Locale) -> a
    java.text.DateFormat getDateTimeInstance$45594036() -> k
    boolean isWindows() -> l
    boolean isMacOS() -> m
    void checkPath(java.lang.String) -> d
    void checkPath(byte[]) -> a
org.eclipse.jgit.util.SystemReader$Default -> org.eclipse.jgit.util.ae:
    java.lang.String hostname -> a
    boolean $assertionsDisabled -> b
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.String getenv(java.lang.String) -> a
    java.lang.String getProperty(java.lang.String) -> b
    org.eclipse.jgit.storage.file.FileBasedConfig openSystemConfig$3c301a48$21bfffd5(org.eclipse.jgit.storage.file.FileBasedConfig,org.eclipse.jgit.util.FS) -> b
    org.eclipse.jgit.storage.file.FileBasedConfig openUserConfig$3c301a48$21bfffd5(org.eclipse.jgit.storage.file.FileBasedConfig,org.eclipse.jgit.util.FS) -> a
    org.eclipse.jgit.storage.file.FileBasedConfig openJGitConfig$3c301a48(org.eclipse.jgit.util.FS) -> a
    java.lang.String getHostname() -> b
    long getCurrentTime() -> e
    java.time.Instant now() -> f
org.eclipse.jgit.util.SystemReader$Default$1 -> org.eclipse.jgit.util.af:
    void <init>(org.eclipse.jgit.storage.file.FileBasedConfig,org.eclipse.jgit.util.FS) -> <init>
    void load() -> i
    boolean isOutdated() -> j
org.eclipse.jgit.util.TemporaryBuffer -> org.eclipse.jgit.util.ag:
    java.util.ArrayList blocks -> a
    int inCoreLimit -> b
    int initialBlocks -> c
    java.io.BufferedOutputStream overflow$33c83ab2 -> d
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    long length() -> a
    long inCoreLength() -> h
    byte[] toByteArray() -> b
    java.lang.String toString$47921032() -> c
    byte[] toByteArray(int) -> a
    void writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor) -> a
    java.io.InputStream openInputStream() -> d
    java.io.InputStream openInputStreamWithAutoDestroy() -> e
    java.io.BufferedOutputStream overflow$75f818f3() -> f
    org.eclipse.jgit.util.TemporaryBuffer$Block last() -> i
    boolean reachedInCoreLimit() -> j
    void switchToOverflow() -> k
    void close() -> close
    void destroy() -> g
org.eclipse.jgit.util.TemporaryBuffer$1 -> org.eclipse.jgit.util.ah:
    org.eclipse.jgit.util.TemporaryBuffer this$0 -> a
    void <init>(org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.util.TemporaryBuffer) -> <init>
    void close() -> close
org.eclipse.jgit.util.TemporaryBuffer$Block -> org.eclipse.jgit.util.ai:
    byte[] buffer -> a
    int count -> b
    void <init>() -> <init>
    void <init>(int) -> <init>
    boolean isFull() -> a
org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream -> org.eclipse.jgit.util.aj:
    byte[] singleByteBuffer -> a
    int blockIndex -> b
    org.eclipse.jgit.util.TemporaryBuffer$Block block -> c
    int blockPos -> d
    org.eclipse.jgit.util.TemporaryBuffer this$0 -> e
    void <init>(org.eclipse.jgit.util.TemporaryBuffer) -> <init>
    int read() -> read
    long skip(long) -> skip
    int read(byte[],int,int) -> read
    boolean nextBlock() -> a
org.eclipse.jgit.util.TemporaryBuffer$Heap -> org.eclipse.jgit.util.ak:
    void <init>(int) -> <init>
    void <init>() -> <init>
    java.io.BufferedOutputStream overflow$75f818f3() -> f
org.eclipse.jgit.util.TemporaryBuffer$LocalFile -> org.eclipse.jgit.util.al:
    java.io.File directory -> b
    java.io.File onDiskFile -> c
    void <init>() -> <init>
    void <init>(java.io.File,int) -> <init>
    java.io.BufferedOutputStream overflow$75f818f3() -> f
    long length() -> a
    byte[] toByteArray() -> b
    byte[] toByteArray(int) -> a
    void writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor) -> a
    java.io.InputStream openInputStream() -> d
    java.io.InputStream openInputStreamWithAutoDestroy() -> e
    void destroy() -> g
org.eclipse.jgit.util.TemporaryBuffer$LocalFile$1 -> org.eclipse.jgit.util.am:
    org.eclipse.jgit.util.TemporaryBuffer$LocalFile this$1 -> a
    void <init>(org.eclipse.jgit.util.TemporaryBuffer$LocalFile,java.io.File) -> <init>
    void close() -> close
org.eclipse.jgit.util.io.AutoCRLFInputStream -> org.eclipse.jgit.util.io.AutoCRLFInputStream:
    byte[] single -> single
    byte[] buf -> buf
    java.io.InputStream in -> in
    int cnt -> cnt
    int ptr -> ptr
    boolean isBinary -> isBinary
    boolean detectBinary -> detectBinary
    byte last -> last
    void <init>(java.io.InputStream,boolean) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    boolean fillBuffer() -> fillBuffer
org.eclipse.jgit.util.io.AutoCRLFOutputStream -> org.eclipse.jgit.util.io.AutoCRLFOutputStream:
    java.io.OutputStream out -> out
    int buf -> buf
    byte[] binbuf -> binbuf
    byte[] onebytebuf -> onebytebuf
    int binbufcnt -> binbufcnt
    boolean detectBinary -> detectBinary
    boolean isBinary -> isBinary
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,boolean) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    int buffer(byte[],int,int) -> buffer
    void decideMode(boolean) -> decideMode
    void flush() -> flush
    void close() -> close
org.eclipse.jgit.util.io.AutoLFInputStream -> org.eclipse.jgit.util.io.AutoLFInputStream:
    byte[] single -> single
    byte[] buf -> buf
    java.io.InputStream in -> in
    int cnt -> cnt
    int ptr -> ptr
    boolean passAsIs -> passAsIs
    boolean isBinary -> isBinary
    boolean detectBinary -> detectBinary
    boolean abortIfBinary -> abortIfBinary
    boolean forCheckout -> forCheckout
    org.eclipse.jgit.util.io.AutoLFInputStream create(java.io.InputStream,org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag[]) -> create
    void <init>(java.io.InputStream,java.util.Set) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    boolean isBinary() -> isBinary
    void close() -> close
    boolean fillBuffer() -> fillBuffer
org.eclipse.jgit.util.io.AutoLFInputStream$IsBinaryException -> org.eclipse.jgit.util.io.AutoLFInputStream$IsBinaryException:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag -> org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag:
    org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag DETECT_BINARY -> DETECT_BINARY
    org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag ABORT_IF_BINARY -> ABORT_IF_BINARY
    org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag FOR_CHECKOUT -> FOR_CHECKOUT
    org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int) -> <init>
    org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag[] values() -> values
    org.eclipse.jgit.util.io.AutoLFInputStream$StreamFlag valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.util.io.AutoLFOutputStream -> org.eclipse.jgit.util.io.AutoLFOutputStream:
    java.io.OutputStream out -> out
    int buf -> buf
    byte[] binbuf -> binbuf
    byte[] onebytebuf -> onebytebuf
    int binbufcnt -> binbufcnt
    boolean detectBinary -> detectBinary
    boolean isBinary -> isBinary
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.OutputStream,boolean) -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    int buffer(byte[],int,int) -> buffer
    void decideMode(boolean) -> decideMode
    void flush() -> flush
    void close() -> close
org.eclipse.jgit.util.io.BinaryDeltaInputStream -> org.eclipse.jgit.util.io.BinaryDeltaInputStream:
    byte[] base -> base
    java.io.InputStream delta -> delta
    long resultLength -> resultLength
    long toDeliver -> toDeliver
    int fromBase -> fromBase
    int fromDelta -> fromDelta
    int baseOffset -> baseOffset
    void <init>(byte[],java.io.InputStream) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    void initialize() -> initialize
    int readNext() -> readNext
    int next(java.io.InputStream) -> next
    long readVarInt(java.io.InputStream) -> readVarInt
    long getExpectedResultSize() -> getExpectedResultSize
    boolean isFullyConsumed() -> isFullyConsumed
    void close() -> close
org.eclipse.jgit.util.io.BinaryHunkInputStream -> org.eclipse.jgit.util.io.BinaryHunkInputStream:
    java.io.InputStream in -> in
    int lineNumber -> lineNumber
    byte[] buffer -> buffer
    int pos -> pos
    void <init>(java.io.InputStream) -> <init>
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    void fillBuffer() -> fillBuffer
org.eclipse.jgit.util.io.BinaryHunkOutputStream -> org.eclipse.jgit.util.io.BinaryHunkOutputStream:
    int MAX_BYTES -> MAX_BYTES
    java.io.OutputStream out -> out
    byte[] buffer -> buffer
    int pos -> pos
    void <init>(java.io.OutputStream) -> <init>
    void close() -> close
    void flush() -> flush
    void write(int) -> write
    void write(byte[],int,int) -> write
    void encode(byte[],int,int) -> encode
org.eclipse.jgit.util.io.ByteBufferInputStream -> org.eclipse.jgit.util.io.ByteBufferInputStream:
    java.nio.ByteBuffer buf -> buf
    void <init>(java.nio.ByteBuffer) -> <init>
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    byte[] readAllBytes() -> readAllBytes
    byte[] readNBytes(int) -> readNBytes
    int readNBytes(byte[],int,int) -> readNBytes
    long skip(long) -> skip
    int available() -> available
    void close() -> close
    void mark(int) -> mark
    void reset() -> reset
    boolean markSupported() -> markSupported
    void nullCheck() -> nullCheck
org.eclipse.jgit.util.io.CountingOutputStream -> org.eclipse.jgit.util.io.CountingOutputStream:
    java.io.OutputStream out -> out
    long cnt -> cnt
    void <init>(java.io.OutputStream) -> <init>
    long getCount() -> getCount
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.eclipse.jgit.util.io.DisabledOutputStream -> org.eclipse.jgit.util.io.DisabledOutputStream:
    org.eclipse.jgit.util.io.DisabledOutputStream INSTANCE -> INSTANCE
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void write(int) -> write
org.eclipse.jgit.util.io.EolStreamTypeUtil -> org.eclipse.jgit.util.io.EolStreamTypeUtil:
    int[] $SWITCH_TABLE$org$eclipse$jgit$treewalk$TreeWalk$OperationType -> $SWITCH_TABLE$org$eclipse$jgit$treewalk$TreeWalk$OperationType
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EolStreamType -> $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EolStreamType
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$AutoCRLF -> $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$AutoCRLF
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EOL -> $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EOL
    void <init>() -> <init>
    org.eclipse.jgit.lib.CoreConfig$EolStreamType detectStreamType(org.eclipse.jgit.treewalk.TreeWalk$OperationType,org.eclipse.jgit.treewalk.WorkingTreeOptions,org.eclipse.jgit.attributes.Attributes) -> detectStreamType
    java.io.InputStream wrapInputStream(java.io.InputStream,org.eclipse.jgit.lib.CoreConfig$EolStreamType) -> wrapInputStream
    java.io.InputStream wrapInputStream(java.io.InputStream,org.eclipse.jgit.lib.CoreConfig$EolStreamType,boolean) -> wrapInputStream
    java.io.OutputStream wrapOutputStream(java.io.OutputStream,org.eclipse.jgit.lib.CoreConfig$EolStreamType) -> wrapOutputStream
    org.eclipse.jgit.lib.CoreConfig$EolStreamType checkInStreamType(org.eclipse.jgit.treewalk.WorkingTreeOptions,org.eclipse.jgit.attributes.Attributes) -> checkInStreamType
    org.eclipse.jgit.lib.CoreConfig$EolStreamType getOutputFormat(org.eclipse.jgit.treewalk.WorkingTreeOptions) -> getOutputFormat
    org.eclipse.jgit.lib.CoreConfig$EolStreamType checkOutStreamType(org.eclipse.jgit.treewalk.WorkingTreeOptions,org.eclipse.jgit.attributes.Attributes) -> checkOutStreamType
    int[] $SWITCH_TABLE$org$eclipse$jgit$treewalk$TreeWalk$OperationType() -> $SWITCH_TABLE$org$eclipse$jgit$treewalk$TreeWalk$OperationType
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EolStreamType() -> $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EolStreamType
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$AutoCRLF() -> $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$AutoCRLF
    int[] $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EOL() -> $SWITCH_TABLE$org$eclipse$jgit$lib$CoreConfig$EOL
org.eclipse.jgit.util.io.InterruptTimer -> org.eclipse.jgit.util.io.InterruptTimer:
    org.eclipse.jgit.util.io.InterruptTimer$AlarmState state -> state
    org.eclipse.jgit.util.io.InterruptTimer$AlarmThread thread -> thread
    org.eclipse.jgit.util.io.InterruptTimer$AutoKiller autoKiller -> autoKiller
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void begin(int) -> begin
    void end() -> end
    void terminate() -> terminate
org.eclipse.jgit.util.io.InterruptTimer$AlarmState -> org.eclipse.jgit.util.io.a:
    java.lang.Thread callingThread -> a
    long deadline -> b
    boolean terminated -> c
    void <init>() -> <init>
    void run() -> run
    void begin(int) -> a
    void end() -> a
    void terminate() -> b
org.eclipse.jgit.util.io.InterruptTimer$AlarmThread -> org.eclipse.jgit.util.io.b:
    void <init>(java.lang.String,org.eclipse.jgit.util.io.InterruptTimer$AlarmState) -> <init>
org.eclipse.jgit.util.io.InterruptTimer$AutoKiller -> org.eclipse.jgit.util.io.c:
    org.eclipse.jgit.util.io.InterruptTimer$AlarmState state -> a
    void <init>(org.eclipse.jgit.util.io.InterruptTimer$AlarmState) -> <init>
    void finalize() -> finalize
org.eclipse.jgit.util.io.IsolatedOutputStream -> org.eclipse.jgit.util.io.IsolatedOutputStream:
    java.io.OutputStream dst -> dst
    java.util.concurrent.ExecutorService copier -> copier
    java.util.concurrent.Future pending -> pending
    void <init>(java.io.OutputStream) -> <init>
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    boolean tryCleanClose() -> tryCleanClose
    void cleanClose() -> cleanClose
    void dirtyClose() -> dirtyClose
    void checkClosed() -> checkClosed
    void execute(java.util.concurrent.Callable) -> execute
    void checkedGet(java.util.concurrent.Future) -> checkedGet
    java.io.InterruptedIOException interrupted(java.lang.InterruptedException) -> interrupted
    java.lang.Void lambda$0(byte[],int,int) -> lambda$0
    java.lang.Void lambda$1() -> lambda$1
    java.lang.Void lambda$2() -> lambda$2
    java.lang.Void lambda$3() -> lambda$3
org.eclipse.jgit.util.io.IsolatedOutputStream$NamedThreadFactory -> org.eclipse.jgit.util.io.d:
    java.util.concurrent.atomic.AtomicInteger cnt -> a
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.eclipse.jgit.util.io.LimitedInputStream -> org.eclipse.jgit.util.io.LimitedInputStream:
    long left -> left
    long limit -> limit
    long mark -> mark
    void <init>(java.io.InputStream,long) -> <init>
    int available() -> available
    void mark(int) -> mark
    int read() -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
    void limitExceeded() -> limitExceeded
org.eclipse.jgit.util.io.MessageWriter -> org.eclipse.jgit.util.io.MessageWriter:
    java.io.ByteArrayOutputStream buf -> buf
    java.io.OutputStreamWriter enc -> enc
    void <init>() -> <init>
    void write(char[],int,int) -> write
    java.io.OutputStream getRawStream() -> getRawStream
    void close() -> close
    void flush() -> flush
    java.lang.String toString() -> toString
org.eclipse.jgit.util.io.NullOutputStream -> org.eclipse.jgit.util.io.NullOutputStream:
    org.eclipse.jgit.util.io.NullOutputStream INSTANCE -> INSTANCE
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
org.eclipse.jgit.util.io.SilentFileInputStream -> org.eclipse.jgit.util.io.SilentFileInputStream:
    void <init>(java.io.File) -> <init>
    void close() -> close
org.eclipse.jgit.util.io.StreamCopyThread -> org.eclipse.jgit.util.io.StreamCopyThread:
    int BUFFER_SIZE -> BUFFER_SIZE
    java.io.InputStream src -> src
    java.io.OutputStream dst -> dst
    boolean done -> done
    java.lang.Object writeLock -> writeLock
    void <init>(java.io.InputStream,java.io.OutputStream) -> <init>
    void halt() -> halt
    void run() -> run
org.eclipse.jgit.util.io.TeeInputStream -> org.eclipse.jgit.util.io.TeeInputStream:
    byte[] skipBuffer -> skipBuffer
    java.io.InputStream src -> src
    java.io.OutputStream dst -> dst
    void <init>(java.io.InputStream,java.io.OutputStream) -> <init>
    int read() -> read
    long skip(long) -> skip
    int read(byte[],int,int) -> read
    void close() -> close
    byte[] skipBuffer() -> skipBuffer
org.eclipse.jgit.util.io.TeeOutputStream -> org.eclipse.jgit.util.io.TeeOutputStream:
    java.io.OutputStream stream1 -> stream1
    java.io.OutputStream stream2 -> stream2
    void <init>(java.io.OutputStream,java.io.OutputStream) -> <init>
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
org.eclipse.jgit.util.io.ThrowingPrintWriter -> org.eclipse.jgit.util.io.ThrowingPrintWriter:
    java.io.Writer out -> out
    java.lang.String LF -> LF
    void <init>(java.io.Writer) -> <init>
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void println(java.lang.String) -> println
    void println() -> println
    void print(char) -> print
    void print(int) -> print
    void print(long) -> print
    void print(short) -> print
    void format(java.lang.String,java.lang.Object[]) -> format
    void print(java.lang.Object) -> print
org.eclipse.jgit.util.io.TimeoutInputStream -> org.eclipse.jgit.util.io.TimeoutInputStream:
    org.eclipse.jgit.util.io.InterruptTimer myTimer -> myTimer
    int timeout -> timeout
    void <init>(java.io.InputStream,org.eclipse.jgit.util.io.InterruptTimer) -> <init>
    int getTimeout() -> getTimeout
    void setTimeout(int) -> setTimeout
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    void beginRead() -> beginRead
    void endRead() -> endRead
    java.io.InterruptedIOException readTimedOut(java.io.InterruptedIOException) -> readTimedOut
org.eclipse.jgit.util.io.TimeoutOutputStream -> org.eclipse.jgit.util.io.TimeoutOutputStream:
    java.io.OutputStream dst -> dst
    org.eclipse.jgit.util.io.InterruptTimer myTimer -> myTimer
    int timeout -> timeout
    void <init>(java.io.OutputStream,org.eclipse.jgit.util.io.InterruptTimer) -> <init>
    int getTimeout() -> getTimeout
    void setTimeout(int) -> setTimeout
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void beginWrite() -> beginWrite
    void endWrite() -> endWrite
    java.io.InterruptedIOException writeTimedOut(java.io.InterruptedIOException) -> writeTimedOut
org.eclipse.jgit.util.io.UnionInputStream -> org.eclipse.jgit.util.io.UnionInputStream:
    java.io.InputStream EOF -> EOF
    java.util.Deque streams -> streams
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    void <init>(java.io.InputStream[]) -> <init>
    java.io.InputStream head() -> head
    void pop() -> pop
    void add(java.io.InputStream) -> add
    boolean isEmpty() -> isEmpty
    int read() -> read
    int read(byte[],int,int) -> read
    int available() -> available
    long skip(long) -> skip
    void close() -> close
org.eclipse.jgit.util.io.UnionInputStream$1 -> org.eclipse.jgit.util.io.e:
    void <init>() -> <init>
    int read() -> read
org.eclipse.jgit.util.sha1.SHA1 -> org.eclipse.jgit.util.sha1.SHA1:
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation SHA1_IMPLEMENTATION -> SHA1_IMPLEMENTATION
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation fromConfig() -> fromConfig
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation getImplementation() -> getImplementation
    org.eclipse.jgit.util.sha1.SHA1 newInstance() -> newInstance
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    byte[] digest() -> digest
    org.eclipse.jgit.lib.ObjectId toObjectId() -> toObjectId
    void digest(org.eclipse.jgit.lib.MutableObjectId) -> digest
    org.eclipse.jgit.util.sha1.SHA1 reset() -> reset
    org.eclipse.jgit.util.sha1.SHA1 setDetectCollision(boolean) -> setDetectCollision
    boolean hasCollision() -> hasCollision
org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation -> org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation:
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation JAVA -> JAVA
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation JDKNATIVE -> JDKNATIVE
    java.lang.String implClassName -> implClassName
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation[] ENUM$VALUES -> ENUM$VALUES
    void <clinit>() -> <clinit>
    void <init>(java.lang.String,int,java.lang.Class) -> <init>
    java.lang.String toString() -> toString
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation[] values() -> values
    org.eclipse.jgit.util.sha1.SHA1$Sha1Implementation valueOf(java.lang.String) -> valueOf
org.eclipse.jgit.util.sha1.SHA1Java -> org.eclipse.jgit.util.sha1.a:
    org.slf4j.Logger LOG -> a
    boolean DETECT_COLLISIONS -> b
    org.eclipse.jgit.util.sha1.SHA1Java$State h -> c
    int[] w -> d
    byte[] buffer -> e
    long length -> f
    boolean detectCollision -> g
    boolean foundCollision -> h
    int[] w2 -> i
    org.eclipse.jgit.util.sha1.SHA1Java$State state58 -> j
    org.eclipse.jgit.util.sha1.SHA1Java$State state65 -> k
    org.eclipse.jgit.util.sha1.SHA1Java$State hIn -> l
    org.eclipse.jgit.util.sha1.SHA1Java$State hTmp -> m
    void <clinit>() -> <clinit>
    void <init>() -> <init>
    org.eclipse.jgit.util.sha1.SHA1 setDetectCollision(boolean) -> setDetectCollision
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    void compress(byte[],int) -> a
    void initBlock(byte[],int) -> b
    void compress() -> a
    void recompress(int) -> a
    int s1(int,int,int,int,int) -> a
    int s2(int,int,int,int,int) -> b
    int s3(int,int,int,int,int) -> c
    int s4(int,int,int,int,int) -> d
    boolean eq(org.eclipse.jgit.util.sha1.SHA1Java$State,org.eclipse.jgit.util.sha1.SHA1Java$State) -> a
    void finish() -> b
    byte[] digest() -> digest
    org.eclipse.jgit.lib.ObjectId toObjectId() -> toObjectId
    void digest(org.eclipse.jgit.lib.MutableObjectId) -> digest
    boolean hasCollision() -> hasCollision
    org.eclipse.jgit.util.sha1.SHA1 reset() -> reset
org.eclipse.jgit.util.sha1.SHA1Java$State -> org.eclipse.jgit.util.sha1.b:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    void <init>() -> <init>
    void init() -> a
    void save(int,int,int,int,int) -> a
    org.eclipse.jgit.lib.ObjectId toObjectId() -> b
org.eclipse.jgit.util.sha1.SHA1Native -> org.eclipse.jgit.util.sha1.c:
    java.security.MessageDigest md -> a
    void <init>() -> <init>
    void update(byte) -> update
    void update(byte[]) -> update
    void update(byte[],int,int) -> update
    byte[] digest() -> digest
    org.eclipse.jgit.lib.ObjectId toObjectId() -> toObjectId
    void digest(org.eclipse.jgit.lib.MutableObjectId) -> digest
    org.eclipse.jgit.util.sha1.SHA1 reset() -> reset
    org.eclipse.jgit.util.sha1.SHA1 setDetectCollision(boolean) -> setDetectCollision
    boolean hasCollision() -> hasCollision
org.eclipse.jgit.util.sha1.Sha1CollisionException -> org.eclipse.jgit.util.sha1.Sha1CollisionException:
    long serialVersionUID -> serialVersionUID
    void <init>(org.eclipse.jgit.lib.ObjectId) -> <init>
org.eclipse.jgit.util.sha1.UbcCheck -> org.eclipse.jgit.util.sha1.d:
    org.eclipse.jgit.util.sha1.UbcCheck$DvInfo[] DV -> a
    void <clinit>() -> <clinit>
    int check(int[]) -> a
org.eclipse.jgit.util.sha1.UbcCheck$DvInfo -> org.eclipse.jgit.util.sha1.e:
    int testt -> a
    int maskb -> b
    int[] dm -> c
    void <init>(int,int,int[]) -> <init>
org.example.LocalGitCommitStressTest -> org.example.LocalGitCommitStressTest:
    void <init>() -> <init>
    void main(java.lang.String[]) -> main
    void resetRepository(java.lang.String) -> resetRepository
    void deleteDirectory(java.io.File) -> deleteDirectory
    void runGitCommitOperations(java.lang.String,int) -> runGitCommitOperations
    org.eclipse.jgit.lib.Repository openRepository(java.lang.String) -> openRepository
    void createNewFileAndCommit(java.io.File,org.eclipse.jgit.lib.Repository) -> createNewFileAndCommit
    void mergeBranchIntoMain(java.lang.String,org.eclipse.jgit.lib.Repository) -> mergeBranchIntoMain
org.slf4j.ILoggerFactory -> org.slf4j.ILoggerFactory:
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
org.slf4j.IMarkerFactory -> org.slf4j.IMarkerFactory:
    org.slf4j.Marker getMarker(java.lang.String) -> getMarker
    boolean exists(java.lang.String) -> exists
    boolean detachMarker(java.lang.String) -> detachMarker
    org.slf4j.Marker getDetachedMarker(java.lang.String) -> getDetachedMarker
org.slf4j.Logger -> org.slf4j.Logger:
    java.lang.String ROOT_LOGGER_NAME -> ROOT_LOGGER_NAME
    java.lang.String getName() -> getName
    org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level) -> makeLoggingEventBuilder
    boolean isTraceEnabled() -> isTraceEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.String,java.lang.Throwable) -> trace
    boolean isTraceEnabled(org.slf4j.Marker) -> isTraceEnabled
    org.slf4j.spi.LoggingEventBuilder atTrace() -> atTrace
    void trace(org.slf4j.Marker,java.lang.String) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled() -> isDebugEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    boolean isDebugEnabled(org.slf4j.Marker) -> isDebugEnabled
    void debug(org.slf4j.Marker,java.lang.String) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> debug
    org.slf4j.spi.LoggingEventBuilder atDebug() -> atDebug
    boolean isInfoEnabled() -> isInfoEnabled
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isInfoEnabled(org.slf4j.Marker) -> isInfoEnabled
    void info(org.slf4j.Marker,java.lang.String) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> info
    org.slf4j.spi.LoggingEventBuilder atInfo() -> atInfo
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    boolean isWarnEnabled(org.slf4j.Marker) -> isWarnEnabled
    void warn(org.slf4j.Marker,java.lang.String) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> warn
    org.slf4j.spi.LoggingEventBuilder atWarn() -> atWarn
    boolean isErrorEnabled() -> isErrorEnabled
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    boolean isErrorEnabled(org.slf4j.Marker) -> isErrorEnabled
    void error(org.slf4j.Marker,java.lang.String) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> error
    org.slf4j.spi.LoggingEventBuilder atError() -> atError
org.slf4j.LoggerFactory -> org.slf4j.LoggerFactory:
    java.lang.String CODES_PREFIX -> CODES_PREFIX
    java.lang.String NO_PROVIDERS_URL -> NO_PROVIDERS_URL
    java.lang.String IGNORED_BINDINGS_URL -> IGNORED_BINDINGS_URL
    java.lang.String NO_STATICLOGGERBINDER_URL -> NO_STATICLOGGERBINDER_URL
    java.lang.String MULTIPLE_BINDINGS_URL -> MULTIPLE_BINDINGS_URL
    java.lang.String NULL_LF_URL -> NULL_LF_URL
    java.lang.String VERSION_MISMATCH -> VERSION_MISMATCH
    java.lang.String SUBSTITUTE_LOGGER_URL -> SUBSTITUTE_LOGGER_URL
    java.lang.String LOGGER_NAME_MISMATCH_URL -> LOGGER_NAME_MISMATCH_URL
    java.lang.String REPLAY_URL -> REPLAY_URL
    java.lang.String UNSUCCESSFUL_INIT_URL -> UNSUCCESSFUL_INIT_URL
    java.lang.String UNSUCCESSFUL_INIT_MSG -> UNSUCCESSFUL_INIT_MSG
    int UNINITIALIZED -> UNINITIALIZED
    int ONGOING_INITIALIZATION -> ONGOING_INITIALIZATION
    int FAILED_INITIALIZATION -> FAILED_INITIALIZATION
    int SUCCESSFUL_INITIALIZATION -> SUCCESSFUL_INITIALIZATION
    int NOP_FALLBACK_INITIALIZATION -> NOP_FALLBACK_INITIALIZATION
    int INITIALIZATION_STATE -> INITIALIZATION_STATE
    org.slf4j.helpers.SubstituteServiceProvider SUBST_PROVIDER -> SUBST_PROVIDER
    org.slf4j.helpers.NOPServiceProvider NOP_FALLBACK_FACTORY -> NOP_FALLBACK_FACTORY
    java.lang.String DETECT_LOGGER_NAME_MISMATCH_PROPERTY -> DETECT_LOGGER_NAME_MISMATCH_PROPERTY
    java.lang.String JAVA_VENDOR_PROPERTY -> JAVA_VENDOR_PROPERTY
    boolean DETECT_LOGGER_NAME_MISMATCH -> DETECT_LOGGER_NAME_MISMATCH
    org.slf4j.spi.SLF4JServiceProvider PROVIDER -> PROVIDER
    java.lang.String[] API_COMPATIBILITY_LIST -> API_COMPATIBILITY_LIST
    java.lang.String STATIC_LOGGER_BINDER_PATH -> STATIC_LOGGER_BINDER_PATH
    java.util.List findServiceProviders() -> findServiceProviders
    void <init>() -> <init>
    void reset() -> reset
    void performInitialization() -> performInitialization
    void bind() -> bind
    void reportIgnoredStaticLoggerBinders(java.util.Set) -> reportIgnoredStaticLoggerBinders
    java.util.Set findPossibleStaticLoggerBinderPathSet() -> findPossibleStaticLoggerBinderPathSet
    void fixSubstituteLoggers() -> fixSubstituteLoggers
    void failedBinding(java.lang.Throwable) -> failedBinding
    void replayEvents() -> replayEvents
    void emitReplayOrSubstituionWarning(org.slf4j.event.SubstituteLoggingEvent,int) -> emitReplayOrSubstituionWarning
    void replaySingleEvent(org.slf4j.event.SubstituteLoggingEvent) -> replaySingleEvent
    void emitSubstitutionWarning() -> emitSubstitutionWarning
    void emitReplayWarning(int) -> emitReplayWarning
    void versionSanityCheck() -> versionSanityCheck
    boolean isAmbiguousProviderList(java.util.List) -> isAmbiguousProviderList
    void reportMultipleBindingAmbiguity(java.util.List) -> reportMultipleBindingAmbiguity
    void reportActualBinding(java.util.List) -> reportActualBinding
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
    org.slf4j.Logger getLogger(java.lang.Class) -> getLogger
    boolean nonMatchingClasses(java.lang.Class,java.lang.Class) -> nonMatchingClasses
    org.slf4j.ILoggerFactory getILoggerFactory() -> getILoggerFactory
    org.slf4j.spi.SLF4JServiceProvider getProvider() -> getProvider
    void <clinit>() -> <clinit>
org.slf4j.LoggerFactoryFriend -> org.slf4j.LoggerFactoryFriend:
    void <init>() -> <init>
    void reset() -> reset
    void setDetectLoggerNameMismatch(boolean) -> setDetectLoggerNameMismatch
org.slf4j.MDC -> org.slf4j.MDC:
    java.lang.String NULL_MDCA_URL -> NULL_MDCA_URL
    java.lang.String NO_STATIC_MDC_BINDER_URL -> NO_STATIC_MDC_BINDER_URL
    org.slf4j.spi.MDCAdapter mdcAdapter -> mdcAdapter
    void <init>() -> <init>
    void put(java.lang.String,java.lang.String) -> put
    org.slf4j.MDC$MDCCloseable putCloseable(java.lang.String,java.lang.String) -> putCloseable
    java.lang.String get(java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
    org.slf4j.spi.MDCAdapter getMDCAdapter() -> getMDCAdapter
    void <clinit>() -> <clinit>
org.slf4j.MDC$1 -> org.slf4j.MDC$1:
org.slf4j.MDC$MDCCloseable -> org.slf4j.MDC$MDCCloseable:
    java.lang.String key -> key
    void <init>(java.lang.String) -> <init>
    void close() -> close
    void <init>(java.lang.String,org.slf4j.MDC$1) -> <init>
org.slf4j.Marker -> org.slf4j.Marker:
    java.lang.String ANY_MARKER -> ANY_MARKER
    java.lang.String ANY_NON_NULL_MARKER -> ANY_NON_NULL_MARKER
    java.lang.String getName() -> getName
    void add(org.slf4j.Marker) -> add
    boolean remove(org.slf4j.Marker) -> remove
    boolean hasChildren() -> hasChildren
    boolean hasReferences() -> hasReferences
    java.util.Iterator iterator() -> iterator
    boolean contains(org.slf4j.Marker) -> contains
    boolean contains(java.lang.String) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.slf4j.MarkerFactory -> org.slf4j.MarkerFactory:
    org.slf4j.IMarkerFactory MARKER_FACTORY -> MARKER_FACTORY
    void <init>() -> <init>
    org.slf4j.Marker getMarker(java.lang.String) -> getMarker
    org.slf4j.Marker getDetachedMarker(java.lang.String) -> getDetachedMarker
    org.slf4j.IMarkerFactory getIMarkerFactory() -> getIMarkerFactory
    void <clinit>() -> <clinit>
org.slf4j.event.DefaultLoggingEvent -> org.slf4j.event.DefaultLoggingEvent:
    org.slf4j.Logger logger -> logger
    org.slf4j.event.Level level -> level
    java.lang.String message -> message
    java.util.List markers -> markers
    java.util.List arguments -> arguments
    java.util.List keyValuePairs -> keyValuePairs
    java.lang.Throwable throwable -> throwable
    java.lang.String threadName -> threadName
    long timeStamp -> timeStamp
    void <init>(org.slf4j.event.Level,org.slf4j.Logger) -> <init>
    void addMarker(org.slf4j.Marker) -> addMarker
    java.util.List getMarkers() -> getMarkers
    void addArgument(java.lang.Object) -> addArgument
    void addArguments(java.lang.Object[]) -> addArguments
    java.util.List getNonNullArguments() -> getNonNullArguments
    java.util.List getArguments() -> getArguments
    java.lang.Object[] getArgumentArray() -> getArgumentArray
    void addKeyValue(java.lang.String,java.lang.Object) -> addKeyValue
    java.util.List getNonnullKeyValuePairs() -> getNonnullKeyValuePairs
    java.util.List getKeyValuePairs() -> getKeyValuePairs
    void setThrowable(java.lang.Throwable) -> setThrowable
    org.slf4j.event.Level getLevel() -> getLevel
    java.lang.String getLoggerName() -> getLoggerName
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    java.lang.Throwable getThrowable() -> getThrowable
    java.lang.String getThreadName() -> getThreadName
    long getTimeStamp() -> getTimeStamp
org.slf4j.event.EventConstants -> org.slf4j.event.EventConstants:
    int ERROR_INT -> ERROR_INT
    int WARN_INT -> WARN_INT
    int INFO_INT -> INFO_INT
    int DEBUG_INT -> DEBUG_INT
    int TRACE_INT -> TRACE_INT
    java.lang.String NA_SUBST -> NA_SUBST
    void <init>() -> <init>
org.slf4j.event.EventRecodingLogger -> org.slf4j.event.EventRecodingLogger:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    org.slf4j.helpers.SubstituteLogger logger -> logger
    java.util.Queue eventQueue -> eventQueue
    boolean RECORD_ALL_EVENTS -> RECORD_ALL_EVENTS
    void <init>(org.slf4j.helpers.SubstituteLogger,java.util.Queue) -> <init>
    java.lang.String getName() -> getName
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    void handleNormalizedLoggingCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable) -> handleNormalizedLoggingCall
    java.lang.String getFullyQualifiedCallerName() -> getFullyQualifiedCallerName
org.slf4j.event.KeyValuePair -> org.slf4j.event.KeyValuePair:
    java.lang.String key -> key
    java.lang.Object value -> value
    void <init>(java.lang.String,java.lang.Object) -> <init>
org.slf4j.event.Level -> org.slf4j.event.Level:
    org.slf4j.event.Level ERROR -> ERROR
    org.slf4j.event.Level WARN -> WARN
    org.slf4j.event.Level INFO -> INFO
    org.slf4j.event.Level DEBUG -> DEBUG
    org.slf4j.event.Level TRACE -> TRACE
    int levelInt -> levelInt
    java.lang.String levelStr -> levelStr
    org.slf4j.event.Level[] $VALUES -> $VALUES
    org.slf4j.event.Level[] values() -> values
    org.slf4j.event.Level valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    int toInt() -> toInt
    org.slf4j.event.Level intToLevel(int) -> intToLevel
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.slf4j.event.LoggingEvent -> org.slf4j.event.LoggingEvent:
    org.slf4j.event.Level getLevel() -> getLevel
    java.lang.String getLoggerName() -> getLoggerName
    java.lang.String getMessage() -> getMessage
    java.util.List getArguments() -> getArguments
    java.lang.Object[] getArgumentArray() -> getArgumentArray
    java.util.List getMarkers() -> getMarkers
    java.util.List getKeyValuePairs() -> getKeyValuePairs
    java.lang.Throwable getThrowable() -> getThrowable
    long getTimeStamp() -> getTimeStamp
    java.lang.String getThreadName() -> getThreadName
org.slf4j.event.LoggingEventAware -> org.slf4j.event.LoggingEventAware:
    void log(org.slf4j.event.LoggingEvent) -> log
org.slf4j.event.SubstituteLoggingEvent -> org.slf4j.event.SubstituteLoggingEvent:
    org.slf4j.event.Level level -> level
    java.util.List markers -> markers
    java.lang.String loggerName -> loggerName
    org.slf4j.helpers.SubstituteLogger logger -> logger
    java.lang.String threadName -> threadName
    java.lang.String message -> message
    java.lang.Object[] argArray -> argArray
    java.util.List keyValuePairList -> keyValuePairList
    long timeStamp -> timeStamp
    java.lang.Throwable throwable -> throwable
    void <init>() -> <init>
    org.slf4j.event.Level getLevel() -> getLevel
    void setLevel(org.slf4j.event.Level) -> setLevel
    java.util.List getMarkers() -> getMarkers
    void addMarker(org.slf4j.Marker) -> addMarker
    java.lang.String getLoggerName() -> getLoggerName
    void setLoggerName(java.lang.String) -> setLoggerName
    org.slf4j.helpers.SubstituteLogger getLogger() -> getLogger
    void setLogger(org.slf4j.helpers.SubstituteLogger) -> setLogger
    java.lang.String getMessage() -> getMessage
    void setMessage(java.lang.String) -> setMessage
    java.lang.Object[] getArgumentArray() -> getArgumentArray
    void setArgumentArray(java.lang.Object[]) -> setArgumentArray
    java.util.List getArguments() -> getArguments
    long getTimeStamp() -> getTimeStamp
    void setTimeStamp(long) -> setTimeStamp
    java.lang.String getThreadName() -> getThreadName
    void setThreadName(java.lang.String) -> setThreadName
    java.lang.Throwable getThrowable() -> getThrowable
    void setThrowable(java.lang.Throwable) -> setThrowable
    java.util.List getKeyValuePairs() -> getKeyValuePairs
org.slf4j.helpers.AbstractLogger -> org.slf4j.helpers.AbstractLogger:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    void <init>() -> <init>
    java.lang.String getName() -> getName
    java.lang.Object readResolve() -> readResolve
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.String,java.lang.Throwable) -> trace
    void trace(org.slf4j.Marker,java.lang.String) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> trace
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    void debug(org.slf4j.Marker,java.lang.String) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> debug
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    void info(org.slf4j.Marker,java.lang.String) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> info
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    void warn(org.slf4j.Marker,java.lang.String) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> warn
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void error(org.slf4j.Marker,java.lang.String) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> error
    void handle_0ArgsCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> handle_0ArgsCall
    void handle_1ArgsCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object) -> handle_1ArgsCall
    void handle2ArgsCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> handle2ArgsCall
    void handleArgArrayCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> handleArgArrayCall
    java.lang.String getFullyQualifiedCallerName() -> getFullyQualifiedCallerName
    void handleNormalizedLoggingCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable) -> handleNormalizedLoggingCall
org.slf4j.helpers.BasicMDCAdapter -> org.slf4j.helpers.BasicMDCAdapter:
    java.lang.InheritableThreadLocal inheritableThreadLocal -> inheritableThreadLocal
    void <init>() -> <init>
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Set getKeys() -> getKeys
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
org.slf4j.helpers.BasicMDCAdapter$1 -> org.slf4j.helpers.BasicMDCAdapter$1:
    org.slf4j.helpers.BasicMDCAdapter this$0 -> this$0
    void <init>(org.slf4j.helpers.BasicMDCAdapter) -> <init>
    java.util.Map childValue(java.util.Map) -> childValue
    java.lang.Object childValue(java.lang.Object) -> childValue
org.slf4j.helpers.BasicMarker -> org.slf4j.helpers.BasicMarker:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.util.List referenceList -> referenceList
    java.lang.String OPEN -> OPEN
    java.lang.String CLOSE -> CLOSE
    java.lang.String SEP -> SEP
    void <init>(java.lang.String) -> <init>
    java.lang.String getName() -> getName
    void add(org.slf4j.Marker) -> add
    boolean hasReferences() -> hasReferences
    boolean hasChildren() -> hasChildren
    java.util.Iterator iterator() -> iterator
    boolean remove(org.slf4j.Marker) -> remove
    boolean contains(org.slf4j.Marker) -> contains
    boolean contains(java.lang.String) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.slf4j.helpers.BasicMarkerFactory -> org.slf4j.helpers.BasicMarkerFactory:
    java.util.concurrent.ConcurrentMap markerMap -> markerMap
    void <init>() -> <init>
    org.slf4j.Marker getMarker(java.lang.String) -> getMarker
    boolean exists(java.lang.String) -> exists
    boolean detachMarker(java.lang.String) -> detachMarker
    org.slf4j.Marker getDetachedMarker(java.lang.String) -> getDetachedMarker
org.slf4j.helpers.FormattingTuple -> org.slf4j.helpers.FormattingTuple:
    org.slf4j.helpers.FormattingTuple NULL -> NULL
    java.lang.String message -> message
    java.lang.Throwable throwable -> throwable
    java.lang.Object[] argArray -> argArray
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.Object[] getArgArray() -> getArgArray
    java.lang.Throwable getThrowable() -> getThrowable
    void <clinit>() -> <clinit>
org.slf4j.helpers.LegacyAbstractLogger -> org.slf4j.helpers.LegacyAbstractLogger:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean isTraceEnabled(org.slf4j.Marker) -> isTraceEnabled
    boolean isDebugEnabled(org.slf4j.Marker) -> isDebugEnabled
    boolean isInfoEnabled(org.slf4j.Marker) -> isInfoEnabled
    boolean isWarnEnabled(org.slf4j.Marker) -> isWarnEnabled
    boolean isErrorEnabled(org.slf4j.Marker) -> isErrorEnabled
org.slf4j.helpers.MarkerIgnoringBase -> org.slf4j.helpers.MarkerIgnoringBase:
    long serialVersionUID -> serialVersionUID
    void <init>() -> <init>
    boolean isTraceEnabled(org.slf4j.Marker) -> isTraceEnabled
    void trace(org.slf4j.Marker,java.lang.String) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled(org.slf4j.Marker) -> isDebugEnabled
    void debug(org.slf4j.Marker,java.lang.String) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> debug
    boolean isInfoEnabled(org.slf4j.Marker) -> isInfoEnabled
    void info(org.slf4j.Marker,java.lang.String) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> info
    boolean isWarnEnabled(org.slf4j.Marker) -> isWarnEnabled
    void warn(org.slf4j.Marker,java.lang.String) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> warn
    boolean isErrorEnabled(org.slf4j.Marker) -> isErrorEnabled
    void error(org.slf4j.Marker,java.lang.String) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> error
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
org.slf4j.helpers.MessageFormatter -> org.slf4j.helpers.MessageFormatter:
    char DELIM_START -> DELIM_START
    char DELIM_STOP -> DELIM_STOP
    java.lang.String DELIM_STR -> DELIM_STR
    char ESCAPE_CHAR -> ESCAPE_CHAR
    void <init>() -> <init>
    org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object) -> format
    org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object) -> format
    org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[]) -> arrayFormat
    java.lang.String basicArrayFormat(java.lang.String,java.lang.Object[]) -> basicArrayFormat
    java.lang.String basicArrayFormat(org.slf4j.helpers.NormalizedParameters) -> basicArrayFormat
    org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable) -> arrayFormat
    boolean isEscapedDelimeter(java.lang.String,int) -> isEscapedDelimeter
    boolean isDoubleEscaped(java.lang.String,int) -> isDoubleEscaped
    void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map) -> deeplyAppendParameter
    void safeObjectAppend(java.lang.StringBuilder,java.lang.Object) -> safeObjectAppend
    void objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map) -> objectArrayAppend
    void booleanArrayAppend(java.lang.StringBuilder,boolean[]) -> booleanArrayAppend
    void byteArrayAppend(java.lang.StringBuilder,byte[]) -> byteArrayAppend
    void charArrayAppend(java.lang.StringBuilder,char[]) -> charArrayAppend
    void shortArrayAppend(java.lang.StringBuilder,short[]) -> shortArrayAppend
    void intArrayAppend(java.lang.StringBuilder,int[]) -> intArrayAppend
    void longArrayAppend(java.lang.StringBuilder,long[]) -> longArrayAppend
    void floatArrayAppend(java.lang.StringBuilder,float[]) -> floatArrayAppend
    void doubleArrayAppend(java.lang.StringBuilder,double[]) -> doubleArrayAppend
    java.lang.Throwable getThrowableCandidate(java.lang.Object[]) -> getThrowableCandidate
    java.lang.Object[] trimmedCopy(java.lang.Object[]) -> trimmedCopy
org.slf4j.helpers.NOPLogger -> org.slf4j.helpers.NOPLogger:
    long serialVersionUID -> serialVersionUID
    org.slf4j.helpers.NOPLogger NOP_LOGGER -> NOP_LOGGER
    void <init>() -> <init>
    java.lang.String getName() -> getName
    boolean isTraceEnabled() -> isTraceEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled() -> isDebugEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    boolean isInfoEnabled() -> isInfoEnabled
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    boolean isErrorEnabled() -> isErrorEnabled
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    void <clinit>() -> <clinit>
org.slf4j.helpers.NOPLoggerFactory -> org.slf4j.helpers.NOPLoggerFactory:
    void <init>() -> <init>
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
org.slf4j.helpers.NOPMDCAdapter -> org.slf4j.helpers.NOPMDCAdapter:
    void <init>() -> <init>
    void clear() -> clear
    java.lang.String get(java.lang.String) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
org.slf4j.helpers.NOPServiceProvider -> org.slf4j.helpers.NOPServiceProvider:
    java.lang.String REQUESTED_API_VERSION -> REQUESTED_API_VERSION
    org.slf4j.ILoggerFactory loggerFactory -> loggerFactory
    org.slf4j.IMarkerFactory markerFactory -> markerFactory
    org.slf4j.spi.MDCAdapter mdcAdapter -> mdcAdapter
    void <init>() -> <init>
    org.slf4j.ILoggerFactory getLoggerFactory() -> getLoggerFactory
    org.slf4j.IMarkerFactory getMarkerFactory() -> getMarkerFactory
    org.slf4j.spi.MDCAdapter getMDCAdapter() -> getMDCAdapter
    java.lang.String getRequesteApiVersion() -> getRequesteApiVersion
    void initialize() -> initialize
    void <clinit>() -> <clinit>
org.slf4j.helpers.NamedLoggerBase -> org.slf4j.helpers.NamedLoggerBase:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    void <init>() -> <init>
    java.lang.String getName() -> getName
    java.lang.Object readResolve() -> readResolve
org.slf4j.helpers.NormalizedParameters -> org.slf4j.helpers.NormalizedParameters:
    java.lang.String message -> message
    java.lang.Object[] arguments -> arguments
    java.lang.Throwable throwable -> throwable
    void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable) -> <init>
    void <init>(java.lang.String,java.lang.Object[]) -> <init>
    java.lang.String getMessage() -> getMessage
    java.lang.Object[] getArguments() -> getArguments
    java.lang.Throwable getThrowable() -> getThrowable
    java.lang.Throwable getThrowableCandidate(java.lang.Object[]) -> getThrowableCandidate
    java.lang.Object[] trimmedCopy(java.lang.Object[]) -> trimmedCopy
    org.slf4j.helpers.NormalizedParameters normalize(java.lang.String,java.lang.Object[],java.lang.Throwable) -> normalize
    org.slf4j.helpers.NormalizedParameters normalize(org.slf4j.event.LoggingEvent) -> normalize
org.slf4j.helpers.SubstituteLogger -> org.slf4j.helpers.SubstituteLogger:
    java.lang.String name -> name
    org.slf4j.Logger _delegate -> _delegate
    java.lang.Boolean delegateEventAware -> delegateEventAware
    java.lang.reflect.Method logMethodCache -> logMethodCache
    org.slf4j.event.EventRecodingLogger eventRecodingLogger -> eventRecodingLogger
    java.util.Queue eventQueue -> eventQueue
    boolean createdPostInitialization -> createdPostInitialization
    void <init>(java.lang.String,java.util.Queue,boolean) -> <init>
    java.lang.String getName() -> getName
    boolean isTraceEnabled() -> isTraceEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.String,java.lang.Throwable) -> trace
    boolean isTraceEnabled(org.slf4j.Marker) -> isTraceEnabled
    void trace(org.slf4j.Marker,java.lang.String) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled() -> isDebugEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    boolean isDebugEnabled(org.slf4j.Marker) -> isDebugEnabled
    void debug(org.slf4j.Marker,java.lang.String) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> debug
    boolean isInfoEnabled() -> isInfoEnabled
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isInfoEnabled(org.slf4j.Marker) -> isInfoEnabled
    void info(org.slf4j.Marker,java.lang.String) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> info
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    boolean isWarnEnabled(org.slf4j.Marker) -> isWarnEnabled
    void warn(org.slf4j.Marker,java.lang.String) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> warn
    boolean isErrorEnabled() -> isErrorEnabled
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    boolean isErrorEnabled(org.slf4j.Marker) -> isErrorEnabled
    void error(org.slf4j.Marker,java.lang.String) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> error
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.slf4j.Logger delegate() -> delegate
    org.slf4j.Logger getEventRecordingLogger() -> getEventRecordingLogger
    void setDelegate(org.slf4j.Logger) -> setDelegate
    boolean isDelegateEventAware() -> isDelegateEventAware
    void log(org.slf4j.event.LoggingEvent) -> log
    boolean isDelegateNull() -> isDelegateNull
    boolean isDelegateNOP() -> isDelegateNOP
org.slf4j.helpers.SubstituteLoggerFactory -> org.slf4j.helpers.SubstituteLoggerFactory:
    boolean postInitialization -> postInitialization
    java.util.Map loggers -> loggers
    java.util.concurrent.LinkedBlockingQueue eventQueue -> eventQueue
    void <init>() -> <init>
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
    java.util.List getLoggerNames() -> getLoggerNames
    java.util.List getLoggers() -> getLoggers
    java.util.concurrent.LinkedBlockingQueue getEventQueue() -> getEventQueue
    void postInitialization() -> postInitialization
    void clear() -> clear
org.slf4j.helpers.SubstituteServiceProvider -> org.slf4j.helpers.SubstituteServiceProvider:
    org.slf4j.helpers.SubstituteLoggerFactory loggerFactory -> loggerFactory
    org.slf4j.IMarkerFactory markerFactory -> markerFactory
    org.slf4j.spi.MDCAdapter mdcAdapter -> mdcAdapter
    void <init>() -> <init>
    org.slf4j.ILoggerFactory getLoggerFactory() -> getLoggerFactory
    org.slf4j.helpers.SubstituteLoggerFactory getSubstituteLoggerFactory() -> getSubstituteLoggerFactory
    org.slf4j.IMarkerFactory getMarkerFactory() -> getMarkerFactory
    org.slf4j.spi.MDCAdapter getMDCAdapter() -> getMDCAdapter
    java.lang.String getRequesteApiVersion() -> getRequesteApiVersion
    void initialize() -> initialize
org.slf4j.helpers.Util -> org.slf4j.helpers.Util:
    org.slf4j.helpers.Util$ClassContextSecurityManager SECURITY_MANAGER -> SECURITY_MANAGER
    boolean SECURITY_MANAGER_CREATION_ALREADY_ATTEMPTED -> SECURITY_MANAGER_CREATION_ALREADY_ATTEMPTED
    void <init>() -> <init>
    java.lang.String safeGetSystemProperty(java.lang.String) -> safeGetSystemProperty
    boolean safeGetBooleanSystemProperty(java.lang.String) -> safeGetBooleanSystemProperty
    org.slf4j.helpers.Util$ClassContextSecurityManager getSecurityManager() -> getSecurityManager
    org.slf4j.helpers.Util$ClassContextSecurityManager safeCreateSecurityManager() -> safeCreateSecurityManager
    java.lang.Class getCallingClass() -> getCallingClass
    void report(java.lang.String,java.lang.Throwable) -> report
    void report(java.lang.String) -> report
    void <clinit>() -> <clinit>
org.slf4j.helpers.Util$1 -> org.slf4j.helpers.Util$1:
org.slf4j.helpers.Util$ClassContextSecurityManager -> org.slf4j.helpers.Util$ClassContextSecurityManager:
    void <init>() -> <init>
    java.lang.Class[] getClassContext() -> getClassContext
    void <init>(org.slf4j.helpers.Util$1) -> <init>
org.slf4j.simple.OutputChoice -> org.slf4j.simple.OutputChoice:
    org.slf4j.simple.OutputChoice$OutputChoiceType outputChoiceType -> outputChoiceType
    java.io.PrintStream targetPrintStream -> targetPrintStream
    void <init>(org.slf4j.simple.OutputChoice$OutputChoiceType) -> <init>
    void <init>(java.io.PrintStream) -> <init>
    java.io.PrintStream getTargetPrintStream() -> getTargetPrintStream
org.slf4j.simple.OutputChoice$1 -> org.slf4j.simple.OutputChoice$1:
    int[] $SwitchMap$org$slf4j$simple$OutputChoice$OutputChoiceType -> $SwitchMap$org$slf4j$simple$OutputChoice$OutputChoiceType
    void <clinit>() -> <clinit>
org.slf4j.simple.OutputChoice$OutputChoiceType -> org.slf4j.simple.OutputChoice$OutputChoiceType:
    org.slf4j.simple.OutputChoice$OutputChoiceType SYS_OUT -> SYS_OUT
    org.slf4j.simple.OutputChoice$OutputChoiceType CACHED_SYS_OUT -> CACHED_SYS_OUT
    org.slf4j.simple.OutputChoice$OutputChoiceType SYS_ERR -> SYS_ERR
    org.slf4j.simple.OutputChoice$OutputChoiceType CACHED_SYS_ERR -> CACHED_SYS_ERR
    org.slf4j.simple.OutputChoice$OutputChoiceType FILE -> FILE
    org.slf4j.simple.OutputChoice$OutputChoiceType[] $VALUES -> $VALUES
    org.slf4j.simple.OutputChoice$OutputChoiceType[] values() -> values
    org.slf4j.simple.OutputChoice$OutputChoiceType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.slf4j.simple.SimpleLogger -> org.slf4j.simple.SimpleLogger:
    long serialVersionUID -> serialVersionUID
    long START_TIME -> START_TIME
    int LOG_LEVEL_TRACE -> LOG_LEVEL_TRACE
    int LOG_LEVEL_DEBUG -> LOG_LEVEL_DEBUG
    int LOG_LEVEL_INFO -> LOG_LEVEL_INFO
    int LOG_LEVEL_WARN -> LOG_LEVEL_WARN
    int LOG_LEVEL_ERROR -> LOG_LEVEL_ERROR
    char SP -> SP
    int LOG_LEVEL_OFF -> LOG_LEVEL_OFF
    boolean INITIALIZED -> INITIALIZED
    org.slf4j.simple.SimpleLoggerConfiguration CONFIG_PARAMS -> CONFIG_PARAMS
    int currentLogLevel -> currentLogLevel
    java.lang.String shortLogName -> shortLogName
    java.lang.String SYSTEM_PREFIX -> SYSTEM_PREFIX
    java.lang.String LOG_KEY_PREFIX -> LOG_KEY_PREFIX
    java.lang.String CACHE_OUTPUT_STREAM_STRING_KEY -> CACHE_OUTPUT_STREAM_STRING_KEY
    java.lang.String WARN_LEVEL_STRING_KEY -> WARN_LEVEL_STRING_KEY
    java.lang.String LEVEL_IN_BRACKETS_KEY -> LEVEL_IN_BRACKETS_KEY
    java.lang.String LOG_FILE_KEY -> LOG_FILE_KEY
    java.lang.String SHOW_SHORT_LOG_NAME_KEY -> SHOW_SHORT_LOG_NAME_KEY
    java.lang.String SHOW_LOG_NAME_KEY -> SHOW_LOG_NAME_KEY
    java.lang.String SHOW_THREAD_NAME_KEY -> SHOW_THREAD_NAME_KEY
    java.lang.String DATE_TIME_FORMAT_KEY -> DATE_TIME_FORMAT_KEY
    java.lang.String SHOW_DATE_TIME_KEY -> SHOW_DATE_TIME_KEY
    java.lang.String DEFAULT_LOG_LEVEL_KEY -> DEFAULT_LOG_LEVEL_KEY
    void lazyInit() -> lazyInit
    void init() -> init
    void <init>(java.lang.String) -> <init>
    java.lang.String recursivelyComputeLevelString() -> recursivelyComputeLevelString
    void write(java.lang.StringBuilder,java.lang.Throwable) -> write
    void writeThrowable(java.lang.Throwable,java.io.PrintStream) -> writeThrowable
    java.lang.String getFormattedDate() -> getFormattedDate
    java.lang.String computeShortName() -> computeShortName
    boolean isLevelEnabled(int) -> isLevelEnabled
    boolean isTraceEnabled() -> isTraceEnabled
    boolean isDebugEnabled() -> isDebugEnabled
    boolean isInfoEnabled() -> isInfoEnabled
    boolean isWarnEnabled() -> isWarnEnabled
    boolean isErrorEnabled() -> isErrorEnabled
    void handleNormalizedLoggingCall(org.slf4j.event.Level,org.slf4j.Marker,java.lang.String,java.lang.Object[],java.lang.Throwable) -> handleNormalizedLoggingCall
    void innerHandleNormalizedLoggingCall(org.slf4j.event.Level,java.util.List,java.lang.String,java.lang.Object[],java.lang.Throwable) -> innerHandleNormalizedLoggingCall
    void log(org.slf4j.event.LoggingEvent) -> log
    java.lang.String getFullyQualifiedCallerName() -> getFullyQualifiedCallerName
    void <clinit>() -> <clinit>
org.slf4j.simple.SimpleLoggerConfiguration -> org.slf4j.simple.SimpleLoggerConfiguration:
    java.lang.String CONFIGURATION_FILE -> CONFIGURATION_FILE
    int DEFAULT_LOG_LEVEL_DEFAULT -> DEFAULT_LOG_LEVEL_DEFAULT
    int defaultLogLevel -> defaultLogLevel
    boolean SHOW_DATE_TIME_DEFAULT -> SHOW_DATE_TIME_DEFAULT
    boolean showDateTime -> showDateTime
    java.lang.String DATE_TIME_FORMAT_STR_DEFAULT -> DATE_TIME_FORMAT_STR_DEFAULT
    java.lang.String dateTimeFormatStr -> dateTimeFormatStr
    java.text.DateFormat dateFormatter -> dateFormatter
    boolean SHOW_THREAD_NAME_DEFAULT -> SHOW_THREAD_NAME_DEFAULT
    boolean showThreadName -> showThreadName
    boolean SHOW_LOG_NAME_DEFAULT -> SHOW_LOG_NAME_DEFAULT
    boolean showLogName -> showLogName
    boolean SHOW_SHORT_LOG_NAME_DEFAULT -> SHOW_SHORT_LOG_NAME_DEFAULT
    boolean showShortLogName -> showShortLogName
    boolean LEVEL_IN_BRACKETS_DEFAULT -> LEVEL_IN_BRACKETS_DEFAULT
    boolean levelInBrackets -> levelInBrackets
    java.lang.String LOG_FILE_DEFAULT -> LOG_FILE_DEFAULT
    java.lang.String logFile -> logFile
    org.slf4j.simple.OutputChoice outputChoice -> outputChoice
    boolean CACHE_OUTPUT_STREAM_DEFAULT -> CACHE_OUTPUT_STREAM_DEFAULT
    boolean cacheOutputStream -> cacheOutputStream
    java.lang.String WARN_LEVELS_STRING_DEFAULT -> WARN_LEVELS_STRING_DEFAULT
    java.lang.String warnLevelString -> warnLevelString
    java.util.Properties properties -> properties
    void <init>() -> <init>
    void init() -> init
    void loadProperties() -> loadProperties
    java.lang.String getStringProperty(java.lang.String,java.lang.String) -> getStringProperty
    boolean getBooleanProperty(java.lang.String,boolean) -> getBooleanProperty
    java.lang.String getStringProperty(java.lang.String) -> getStringProperty
    int stringToLevel(java.lang.String) -> stringToLevel
    org.slf4j.simple.OutputChoice computeOutputChoice(java.lang.String,boolean) -> computeOutputChoice
    void <clinit>() -> <clinit>
org.slf4j.simple.SimpleLoggerConfiguration$1 -> org.slf4j.simple.SimpleLoggerConfiguration$1:
    org.slf4j.simple.SimpleLoggerConfiguration this$0 -> this$0
    void <init>(org.slf4j.simple.SimpleLoggerConfiguration) -> <init>
    java.io.InputStream run() -> run
    java.lang.Object run() -> run
org.slf4j.simple.SimpleLoggerFactory -> org.slf4j.simple.SimpleLoggerFactory:
    java.util.concurrent.ConcurrentMap loggerMap -> loggerMap
    void <init>() -> <init>
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
    void reset() -> reset
org.slf4j.simple.SimpleServiceProvider -> org.slf4j.simple.SimpleServiceProvider:
    java.lang.String REQUESTED_API_VERSION -> REQUESTED_API_VERSION
    org.slf4j.ILoggerFactory loggerFactory -> loggerFactory
    org.slf4j.IMarkerFactory markerFactory -> markerFactory
    org.slf4j.spi.MDCAdapter mdcAdapter -> mdcAdapter
    void <init>() -> <init>
    org.slf4j.ILoggerFactory getLoggerFactory() -> getLoggerFactory
    org.slf4j.IMarkerFactory getMarkerFactory() -> getMarkerFactory
    org.slf4j.spi.MDCAdapter getMDCAdapter() -> getMDCAdapter
    java.lang.String getRequesteApiVersion() -> getRequesteApiVersion
    void initialize() -> initialize
    void <clinit>() -> <clinit>
org.slf4j.spi.DefaultLoggingEventBuilder -> org.slf4j.spi.DefaultLoggingEventBuilder:
    org.slf4j.event.DefaultLoggingEvent loggingEvent -> loggingEvent
    org.slf4j.Logger logger -> logger
    int[] $SWITCH_TABLE$org$slf4j$event$Level -> $SWITCH_TABLE$org$slf4j$event$Level
    void <init>(org.slf4j.Logger,org.slf4j.event.Level) -> <init>
    org.slf4j.spi.LoggingEventBuilder addMarker(org.slf4j.Marker) -> addMarker
    org.slf4j.spi.LoggingEventBuilder setCause(java.lang.Throwable) -> setCause
    org.slf4j.spi.LoggingEventBuilder addArgument(java.lang.Object) -> addArgument
    org.slf4j.spi.LoggingEventBuilder addArgument(java.util.function.Supplier) -> addArgument
    void log(java.lang.String) -> log
    void log(java.lang.String,java.lang.Object) -> log
    void log(java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(java.lang.String,java.lang.Object[]) -> log
    void innerLog(org.slf4j.event.LoggingEvent) -> innerLog
    void logViaPublicLoggerAPI(org.slf4j.event.LoggingEvent) -> logViaPublicLoggerAPI
    java.lang.String mergeMarkersAndKeyValuePairs(org.slf4j.event.LoggingEvent,java.lang.String) -> mergeMarkersAndKeyValuePairs
    void log(java.util.function.Supplier) -> log
    org.slf4j.spi.LoggingEventBuilder addKeyValue(java.lang.String,java.lang.Object) -> addKeyValue
    org.slf4j.spi.LoggingEventBuilder addKeyValue(java.lang.String,java.util.function.Supplier) -> addKeyValue
    int[] $SWITCH_TABLE$org$slf4j$event$Level() -> $SWITCH_TABLE$org$slf4j$event$Level
org.slf4j.spi.DefaultLoggingEventBuilder$1 -> org.slf4j.spi.DefaultLoggingEventBuilder$1:
    int[] $SwitchMap$org$slf4j$event$Level -> $SwitchMap$org$slf4j$event$Level
    void <clinit>() -> <clinit>
org.slf4j.spi.LocationAwareLogger -> org.slf4j.spi.LocationAwareLogger:
    int TRACE_INT -> TRACE_INT
    int DEBUG_INT -> DEBUG_INT
    int INFO_INT -> INFO_INT
    int WARN_INT -> WARN_INT
    int ERROR_INT -> ERROR_INT
    void log(org.slf4j.Marker,java.lang.String,int,java.lang.String,java.lang.Object[],java.lang.Throwable) -> log
org.slf4j.spi.LoggerFactoryBinder -> org.slf4j.spi.LoggerFactoryBinder:
    org.slf4j.ILoggerFactory getLoggerFactory() -> getLoggerFactory
    java.lang.String getLoggerFactoryClassStr() -> getLoggerFactoryClassStr
org.slf4j.spi.LoggingEventAware -> org.slf4j.spi.LoggingEventAware:
    void log(org.slf4j.event.LoggingEvent) -> log
org.slf4j.spi.LoggingEventBuilder -> org.slf4j.spi.LoggingEventBuilder:
    org.slf4j.spi.LoggingEventBuilder setCause(java.lang.Throwable) -> setCause
    org.slf4j.spi.LoggingEventBuilder addMarker(org.slf4j.Marker) -> addMarker
    org.slf4j.spi.LoggingEventBuilder addArgument(java.lang.Object) -> addArgument
    org.slf4j.spi.LoggingEventBuilder addArgument(java.util.function.Supplier) -> addArgument
    org.slf4j.spi.LoggingEventBuilder addKeyValue(java.lang.String,java.lang.Object) -> addKeyValue
    org.slf4j.spi.LoggingEventBuilder addKeyValue(java.lang.String,java.util.function.Supplier) -> addKeyValue
    void log(java.lang.String) -> log
    void log(java.lang.String,java.lang.Object) -> log
    void log(java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(java.lang.String,java.lang.Object[]) -> log
    void log(java.util.function.Supplier) -> log
org.slf4j.spi.MDCAdapter -> org.slf4j.spi.MDCAdapter:
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
org.slf4j.spi.MarkerFactoryBinder -> org.slf4j.spi.MarkerFactoryBinder:
    org.slf4j.IMarkerFactory getMarkerFactory() -> getMarkerFactory
    java.lang.String getMarkerFactoryClassStr() -> getMarkerFactoryClassStr
org.slf4j.spi.NOPLoggingEventBuilder -> org.slf4j.spi.NOPLoggingEventBuilder:
    org.slf4j.spi.NOPLoggingEventBuilder SINGLETON -> SINGLETON
    void <init>() -> <init>
    org.slf4j.spi.LoggingEventBuilder singleton() -> singleton
    org.slf4j.spi.LoggingEventBuilder addMarker(org.slf4j.Marker) -> addMarker
    org.slf4j.spi.LoggingEventBuilder addArgument(java.lang.Object) -> addArgument
    org.slf4j.spi.LoggingEventBuilder addArgument(java.util.function.Supplier) -> addArgument
    org.slf4j.spi.LoggingEventBuilder addKeyValue(java.lang.String,java.lang.Object) -> addKeyValue
    org.slf4j.spi.LoggingEventBuilder addKeyValue(java.lang.String,java.util.function.Supplier) -> addKeyValue
    org.slf4j.spi.LoggingEventBuilder setCause(java.lang.Throwable) -> setCause
    void log(java.lang.String) -> log
    void log(java.util.function.Supplier) -> log
    void log(java.lang.String,java.lang.Object) -> log
    void log(java.lang.String,java.lang.Object,java.lang.Object) -> log
    void log(java.lang.String,java.lang.Object[]) -> log
    void <clinit>() -> <clinit>
org.slf4j.spi.SLF4JServiceProvider -> org.slf4j.spi.SLF4JServiceProvider:
    org.slf4j.ILoggerFactory getLoggerFactory() -> getLoggerFactory
    org.slf4j.IMarkerFactory getMarkerFactory() -> getMarkerFactory
    org.slf4j.spi.MDCAdapter getMDCAdapter() -> getMDCAdapter
    java.lang.String getRequesteApiVersion() -> getRequesteApiVersion
    void initialize() -> initialize
