com.github.jaiimageio.impl.common.BogusColorSpace -> com.github.jaiimageio.impl.a.a:
    void <init>(int) -> <init>
    float[] toRGB(float[]) -> toRGB
    float[] fromRGB(float[]) -> fromRGB
    float[] toCIEXYZ(float[]) -> toCIEXYZ
    float[] fromCIEXYZ(float[]) -> fromCIEXYZ
com.github.jaiimageio.impl.common.I18NImpl -> com.github.jaiimageio.impl.a.b:
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> a
com.github.jaiimageio.impl.common.ImageUtil -> com.github.jaiimageio.impl.a.c:
    javax.imageio.stream.ImageOutputStream output_ -> a
    byte[] buffer_ -> b
    int index_ -> c
    int bitsLeft_ -> d
    boolean blocks_ -> e
    byte[] getPackedBinaryData(java.awt.image.Raster,java.awt.Rectangle) -> a
    void setPackedBinaryData(byte[],java.awt.image.WritableRaster,java.awt.Rectangle) -> a
    boolean isBinary(java.awt.image.SampleModel) -> a
    java.awt.image.ColorModel createColorModel(java.awt.color.ColorSpace,java.awt.image.SampleModel) -> a
    boolean isIndicesForGrayscale(byte[],byte[],byte[]) -> a
    java.lang.String convertObjectToString(java.lang.Object) -> a
    void canEncodeImage(javax.imageio.ImageWriter,javax.imageio.ImageTypeSpecifier) -> a
    void canEncodeImage$404940c6(com.github.jaiimageio.impl.plugins.pnm.PNMImageWriter,java.awt.image.ColorModel,java.awt.image.SampleModel) -> a
    boolean imageIsContiguous(java.awt.image.RenderedImage) -> a
    boolean isNonStandardICCColorSpace(java.awt.color.ColorSpace) -> a
    java.util.ArrayList getJDKImageReaderWriterSPI$1d0f999f$8a53000(java.lang.String,boolean) -> a
    void processOnRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class,java.lang.String,javax.imageio.spi.ImageReaderWriterSpi,int,int) -> a
    int readMultiByteInteger(javax.imageio.stream.ImageInputStream) -> a
    void <init>(javax.imageio.stream.ImageOutputStream,boolean) -> <init>
    void flush() -> a
    void writeBits(int,int) -> a
com.github.jaiimageio.impl.common.LZWCompressor -> com.github.jaiimageio.impl.a.d:
    int codeSize_ -> a
    int clearCode_ -> b
    int endOfInfo_ -> c
    int numBits_ -> d
    int limit_ -> e
    short prefix_ -> f
    com.github.jaiimageio.impl.common.ImageUtil bf_$5c4c0ceb -> g
    com.github.jaiimageio.impl.common.LZWStringTable lzss_ -> h
    boolean tiffFudge_ -> i
    void <init>(javax.imageio.stream.ImageOutputStream,int,boolean) -> <init>
    void compress(byte[],int,int) -> a
    void flush() -> a
com.github.jaiimageio.impl.common.LZWStringTable -> com.github.jaiimageio.impl.a.e:
    byte[] strChr_ -> a
    short[] strNxt_ -> b
    short[] strHsh_ -> c
    short numStrings_ -> d
    int[] strLen_ -> e
    void <init>() -> <init>
    int AddCharString(short,byte) -> a
    void ClearTable(int) -> a
    int Hash(short,byte) -> b
com.github.jaiimageio.impl.common.PackageUtil -> com.github.jaiimageio.impl.a.f:
    java.lang.String version -> a
    java.lang.String vendor -> b
    java.lang.String specTitle -> c
    void <init>() -> <init>
    java.lang.String getVersion() -> a
    java.lang.String getVendor() -> b
    java.lang.String getSpecificationTitle() -> c
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.common.PaletteBuilder -> com.github.jaiimageio.impl.a.g:
    java.awt.image.RenderedImage src -> a
    java.awt.image.ColorModel srcColorModel -> b
    java.awt.image.Raster srcRaster -> c
    int requiredSize -> d
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode root -> e
    int numNodes -> f
    int maxNodes -> g
    int currSize -> h
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode[] reduceList -> i
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode[] palette -> j
    int transparency -> k
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode transColor -> l
    java.awt.image.BufferedImage createIndexedImage$2daa4fe1(java.awt.image.RenderedImage) -> a
    void <init>(java.awt.image.RenderedImage) -> <init>
    void <init>(java.awt.image.RenderedImage,byte) -> <init>
    java.awt.Color getSrcColor(int,int) -> a
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode insertNode(com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode,java.awt.Color,int) -> a
    int findPaletteEntry(com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode,int,byte[],byte[],byte[]) -> a
    int getBranchIndex(java.awt.Color,int) -> a
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode freeTree(com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode) -> a
com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode -> com.github.jaiimageio.impl.a.h:
    boolean isLeaf -> a
    int childCount -> b
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode[] children -> c
    int colorCount -> d
    long red -> e
    long blue -> f
    long green -> g
    int paletteIndex -> h
    int level -> i
    com.github.jaiimageio.impl.common.PaletteBuilder$ColorNode nextReducible -> j
    void <init>() -> <init>
    int getLeafChildCount() -> a
com.github.jaiimageio.impl.common.SimpleCMYKColorSpace -> com.github.jaiimageio.impl.a.i:
    com.github.jaiimageio.impl.common.SimpleCMYKColorSpace theInstance$5a129746 -> a
    java.awt.color.ColorSpace csRGB -> b
    com.github.jaiimageio.impl.common.SimpleCMYKColorSpace getInstance$541cb4e7() -> a
    void <init>() -> <init>
    boolean equals(java.lang.Object) -> equals
    float[] toRGB(float[]) -> toRGB
    float[] fromRGB(float[]) -> fromRGB
    float[] toCIEXYZ(float[]) -> toCIEXYZ
    float[] fromCIEXYZ(float[]) -> fromCIEXYZ
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.common.SimpleRenderedImage -> com.github.jaiimageio.impl.a.j:
    int minX -> a
    int minY -> b
    int width -> c
    int height -> d
    int tileWidth -> e
    int tileHeight -> f
    int tileGridXOffset -> g
    int tileGridYOffset -> h
    java.awt.image.SampleModel sampleModel -> i
    java.awt.image.ColorModel colorModel -> j
    java.util.Hashtable properties -> k
    void <init>() -> <init>
    int getMinX() -> getMinX
    int getMinY() -> getMinY
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.awt.Rectangle getBounds() -> a
    int getTileWidth() -> getTileWidth
    int getTileHeight() -> getTileHeight
    int getTileGridXOffset() -> getTileGridXOffset
    int getTileGridYOffset() -> getTileGridYOffset
    int getMinTileX() -> getMinTileX
    int getNumXTiles() -> getNumXTiles
    int getMinTileY() -> getMinTileY
    int getNumYTiles() -> getNumYTiles
    java.awt.image.SampleModel getSampleModel() -> getSampleModel
    java.awt.image.ColorModel getColorModel() -> getColorModel
    java.lang.Object getProperty(java.lang.String) -> getProperty
    java.lang.String[] getPropertyNames() -> getPropertyNames
    int XToTileX(int,int,int) -> a
    int YToTileY(int,int,int) -> b
    int XToTileX(int) -> a
    int YToTileY(int) -> b
    java.util.Vector getSources() -> getSources
    java.awt.image.Raster getData() -> getData
    java.awt.image.Raster getData(java.awt.Rectangle) -> getData
    java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster) -> copyData
com.github.jaiimageio.impl.common.SingleTileRenderedImage -> com.github.jaiimageio.impl.a.k:
    java.awt.image.Raster ras -> k
    void <init>(java.awt.image.Raster,java.awt.image.ColorModel) -> <init>
    java.awt.image.Raster getTile(int,int) -> getTile
com.github.jaiimageio.impl.plugins.bmp.BMPConstants -> com.github.jaiimageio.impl.plugins.bmp.a:
    java.lang.String[] compressionTypeNames -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.bmp.BMPImageReader -> com.github.jaiimageio.impl.plugins.bmp.b:
    long bitmapFileSize -> b
    long bitmapOffset -> c
    long compression -> d
    long imageSize -> e
    byte[] palette -> f
    int imageType -> g
    int numBands -> h
    boolean isBottomUp -> i
    int bitsPerPixel -> j
    int redMask -> k
    int greenMask -> l
    int blueMask -> m
    int alphaMask -> n
    java.awt.image.SampleModel sampleModel -> o
    java.awt.image.SampleModel originalSampleModel -> p
    java.awt.image.ColorModel colorModel -> q
    java.awt.image.ColorModel originalColorModel -> r
    javax.imageio.stream.ImageInputStream iis -> s
    boolean gotHeader -> t
    long imageDataOffset -> u
    int width -> v
    int height -> w
    java.awt.Rectangle destinationRegion -> x
    java.awt.Rectangle sourceRegion -> y
    com.github.jaiimageio.impl.plugins.bmp.BMPMetadata metadata -> z
    java.awt.image.BufferedImage bi -> A
    boolean noTransform -> B
    boolean seleBand -> C
    int scaleX -> D
    int scaleY -> E
    int[] sourceBands -> F
    int[] destBands -> G
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageReaderSpi) -> <init>
    void setInput(java.lang.Object,boolean,boolean) -> setInput
    int getNumImages(boolean) -> getNumImages
    int getWidth(int) -> getWidth
    int getHeight(int) -> getHeight
    void checkIndex(int) -> a
    void readHeader() -> a
    java.util.Iterator getImageTypes(int) -> getImageTypes
    javax.imageio.ImageReadParam getDefaultReadParam() -> getDefaultReadParam
    javax.imageio.metadata.IIOMetadata getImageMetadata(int) -> getImageMetadata
    javax.imageio.metadata.IIOMetadata getStreamMetadata() -> getStreamMetadata
    boolean isRandomAccessEasy(int) -> isRandomAccessEasy
    java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam) -> read
    boolean canReadRaster() -> canReadRaster
    java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam) -> readRaster
    void resetHeaderInfo() -> b
    void reset() -> reset
    void read1Bit(byte[]) -> a
    void read4Bit(byte[]) -> b
    void read8Bit(byte[]) -> c
    void read24Bit(byte[]) -> d
    void read16Bit(short[]) -> a
    void read32Bit(int[]) -> a
    void readRLE8(byte[]) -> e
    void decodeRLE8$7ea373e3(int,byte[],byte[]) -> a
    void readRLE4(byte[]) -> f
    void decodeRLE4$7ea373e3(int,byte[],byte[]) -> b
    void access$100(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader,float) -> a
    void access$200(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[]) -> a
    void access$300(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader,java.awt.image.BufferedImage) -> a
    void access$400(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[]) -> a
    void access$500(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader,java.lang.String) -> a
com.github.jaiimageio.impl.plugins.bmp.BMPImageReader$1 -> com.github.jaiimageio.impl.plugins.bmp.c:
    com.github.jaiimageio.impl.plugins.bmp.BMPImageReader this$0 -> a
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader) -> <init>
    void imageProgress(javax.imageio.ImageReader,float) -> imageProgress
com.github.jaiimageio.impl.plugins.bmp.BMPImageReader$2 -> com.github.jaiimageio.impl.plugins.bmp.d:
    com.github.jaiimageio.impl.plugins.bmp.BMPImageReader this$0 -> a
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader) -> <init>
    void imageUpdate(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[]) -> imageUpdate
    void passComplete(javax.imageio.ImageReader,java.awt.image.BufferedImage) -> passComplete
    void passStarted(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[]) -> passStarted
    void thumbnailPassComplete(javax.imageio.ImageReader,java.awt.image.BufferedImage) -> thumbnailPassComplete
    void thumbnailPassStarted(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int,int[]) -> thumbnailPassStarted
    void thumbnailUpdate(javax.imageio.ImageReader,java.awt.image.BufferedImage,int,int,int,int,int,int,int[]) -> thumbnailUpdate
com.github.jaiimageio.impl.plugins.bmp.BMPImageReader$3 -> com.github.jaiimageio.impl.plugins.bmp.e:
    com.github.jaiimageio.impl.plugins.bmp.BMPImageReader this$0 -> a
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageReader) -> <init>
    void warningOccurred(javax.imageio.ImageReader,java.lang.String) -> warningOccurred
com.github.jaiimageio.impl.plugins.bmp.BMPImageReader$EmbeddedProgressAdapter -> com.github.jaiimageio.impl.plugins.bmp.f:
    void <init>(byte) -> <init>
    void imageComplete(javax.imageio.ImageReader) -> imageComplete
    void imageProgress(javax.imageio.ImageReader,float) -> imageProgress
    void imageStarted(javax.imageio.ImageReader,int) -> imageStarted
    void thumbnailComplete(javax.imageio.ImageReader) -> thumbnailComplete
    void thumbnailProgress(javax.imageio.ImageReader,float) -> thumbnailProgress
    void thumbnailStarted(javax.imageio.ImageReader,int,int) -> thumbnailStarted
    void sequenceComplete(javax.imageio.ImageReader) -> sequenceComplete
    void sequenceStarted(javax.imageio.ImageReader,int) -> sequenceStarted
    void readAborted(javax.imageio.ImageReader) -> readAborted
    void <init>() -> <init>
com.github.jaiimageio.impl.plugins.bmp.BMPImageReaderSpi -> com.github.jaiimageio.impl.plugins.bmp.BMPImageReaderSpi:
    java.lang.String[] writerSpiNames -> writerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] extensions -> extensions
    java.lang.String[] mimeTypes -> mimeTypes
    boolean registered -> registered
    void <init>() -> <init>
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    java.lang.String getDescription(java.util.Locale) -> getDescription
    boolean canDecodeInput(java.lang.Object) -> canDecodeInput
    javax.imageio.ImageReader createReaderInstance(java.lang.Object) -> createReaderInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter -> com.github.jaiimageio.impl.plugins.bmp.g:
    javax.imageio.stream.ImageOutputStream stream -> b
    java.io.ByteArrayOutputStream embedded_stream -> c
    int compressionType -> d
    int w -> e
    int h -> f
    int compImageSize -> g
    int[] bitMasks -> h
    int[] bitPos -> i
    byte[] bpixels -> j
    short[] spixels -> k
    int[] ipixels -> l
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageWriterSpi) -> <init>
    void setOutput(java.lang.Object) -> setOutput
    javax.imageio.ImageWriteParam getDefaultWriteParam() -> getDefaultWriteParam
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    boolean canWriteRasters() -> canWriteRasters
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    void encodeRLE8(byte[],int) -> a
    void encodeRLE4(byte[],int) -> b
    void incCompImageSize(int) -> a
    boolean isEven(int) -> b
    void writeSize(int,int) -> a
    void reset() -> reset
    int getCompressionType(java.lang.String) -> a
    int firstLowBit(int) -> c
    int getPreferredCompressionType(java.awt.image.ColorModel,java.awt.image.SampleModel) -> a
    int getPreferredCompressionType(javax.imageio.ImageTypeSpecifier) -> a
    void writeMaskToPalette(int,int,byte[],byte[],byte[],byte[]) -> a
    void access$100(com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter,float) -> a
    void access$200(com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter,int,java.lang.String) -> a
com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter$1 -> com.github.jaiimageio.impl.plugins.bmp.h:
    com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter this$0 -> a
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter) -> <init>
    void imageProgress(javax.imageio.ImageWriter,float) -> imageProgress
com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter$2 -> com.github.jaiimageio.impl.plugins.bmp.i:
    com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter this$0 -> a
    void <init>(com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter) -> <init>
    void warningOccurred(javax.imageio.ImageWriter,int,java.lang.String) -> warningOccurred
com.github.jaiimageio.impl.plugins.bmp.BMPImageWriter$IIOWriteProgressAdapter -> com.github.jaiimageio.impl.plugins.bmp.j:
    void <init>(byte) -> <init>
    void imageComplete(javax.imageio.ImageWriter) -> imageComplete
    void imageProgress(javax.imageio.ImageWriter,float) -> imageProgress
    void imageStarted(javax.imageio.ImageWriter,int) -> imageStarted
    void thumbnailComplete(javax.imageio.ImageWriter) -> thumbnailComplete
    void thumbnailProgress(javax.imageio.ImageWriter,float) -> thumbnailProgress
    void thumbnailStarted(javax.imageio.ImageWriter,int,int) -> thumbnailStarted
    void writeAborted(javax.imageio.ImageWriter) -> writeAborted
    void <init>() -> <init>
com.github.jaiimageio.impl.plugins.bmp.BMPImageWriterSpi -> com.github.jaiimageio.impl.plugins.bmp.BMPImageWriterSpi:
    java.lang.String[] readerSpiNames -> readerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] extensions -> extensions
    java.lang.String[] mimeTypes -> mimeTypes
    boolean registered -> registered
    void <init>() -> <init>
    java.lang.String getDescription(java.util.Locale) -> getDescription
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.bmp.BMPMetadata -> com.github.jaiimageio.impl.plugins.bmp.k:
    java.lang.String bmpVersion -> b
    int width -> c
    int height -> d
    short bitsPerPixel -> e
    int compression -> f
    int imageSize -> g
    int xPixelsPerMeter -> h
    int yPixelsPerMeter -> i
    int colorsUsed -> j
    int colorsImportant -> k
    int redMask -> l
    int greenMask -> m
    int blueMask -> n
    int alphaMask -> o
    int colorSpace -> p
    double redX -> q
    double redY -> r
    double redZ -> s
    double greenX -> t
    double greenY -> u
    double greenZ -> v
    double blueX -> w
    double blueY -> x
    double blueZ -> y
    int gammaRed -> z
    int gammaGreen -> A
    int gammaBlue -> B
    int intent -> C
    byte[] palette -> D
    int paletteSize -> E
    int red -> F
    int green -> G
    int blue -> H
    java.util.ArrayList comments$7865b31 -> I
    void <init>() -> <init>
    void <init>(javax.imageio.metadata.IIOMetadata) -> <init>
    boolean isReadOnly() -> isReadOnly
    java.lang.Object clone() -> clone
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    javax.imageio.metadata.IIOMetadataNode getStandardChromaNode() -> getStandardChromaNode
    javax.imageio.metadata.IIOMetadataNode getStandardCompressionNode() -> getStandardCompressionNode
    javax.imageio.metadata.IIOMetadataNode getStandardDataNode() -> getStandardDataNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
    javax.imageio.metadata.IIOMetadataNode getStandardDocumentNode() -> getStandardDocumentNode
    javax.imageio.metadata.IIOMetadataNode getStandardTextNode() -> getStandardTextNode
    javax.imageio.metadata.IIOMetadataNode getStandardTransparencyNode() -> getStandardTransparencyNode
    void fatal(org.w3c.dom.Node,java.lang.String) -> a
    int getIntAttribute(org.w3c.dom.Node,java.lang.String) -> b
    double getDoubleAttribute(org.w3c.dom.Node,java.lang.String) -> c
    java.lang.String getAttribute$3f64eee2$1aa45e98(org.w3c.dom.Node,java.lang.String) -> d
    void initialize(java.awt.image.ColorModel,java.awt.image.SampleModel,javax.imageio.ImageWriteParam) -> a
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void reset() -> reset
    java.lang.String countBits(int) -> a
    void addXYZPoints(javax.imageio.metadata.IIOMetadataNode,java.lang.String,double,double,double) -> a
    javax.imageio.metadata.IIOMetadataNode addChildNode$75926a65(javax.imageio.metadata.IIOMetadataNode,java.lang.String,java.io.Serializable) -> a
    java.lang.Object getObjectValue(org.w3c.dom.Node) -> a
    java.lang.Integer getIntegerValue(org.w3c.dom.Node) -> b
    java.lang.Double getDoubleValue(org.w3c.dom.Node) -> c
com.github.jaiimageio.impl.plugins.bmp.I18N -> com.github.jaiimageio.impl.plugins.bmp.l:
    java.lang.String getString(java.lang.String) -> b
com.github.jaiimageio.impl.plugins.gif.GIFImageMetadata -> com.github.jaiimageio.impl.plugins.gif.a:
    java.lang.String[] disposalMethodNames -> a
    int imageLeftPosition -> b
    int imageTopPosition -> c
    int imageWidth -> d
    int imageHeight -> e
    boolean interlaceFlag -> f
    boolean sortFlag -> g
    byte[] localColorTable -> h
    int disposalMethod -> i
    boolean userInputFlag -> j
    boolean transparentColorFlag -> k
    int delayTime -> l
    int transparentColorIndex -> m
    boolean hasPlainTextExtension -> n
    int textGridLeft -> o
    int textGridTop -> p
    int textGridWidth -> q
    int textGridHeight -> r
    int characterCellWidth -> s
    int characterCellHeight -> t
    int textForegroundColor -> u
    int textBackgroundColor -> v
    byte[] text -> w
    java.util.ArrayList applicationIDs$7865b31 -> x
    java.util.ArrayList authenticationCodes$7865b31 -> y
    java.util.ArrayList applicationData$7865b31 -> z
    java.util.ArrayList comments$7865b31 -> A
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean isReadOnly() -> isReadOnly
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    java.lang.String toISO8859(byte[]) -> a
    javax.imageio.metadata.IIOMetadataNode getStandardChromaNode() -> getStandardChromaNode
    javax.imageio.metadata.IIOMetadataNode getStandardCompressionNode() -> getStandardCompressionNode
    javax.imageio.metadata.IIOMetadataNode getStandardDataNode() -> getStandardDataNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
    javax.imageio.metadata.IIOMetadataNode getStandardTextNode() -> getStandardTextNode
    javax.imageio.metadata.IIOMetadataNode getStandardTransparencyNode() -> getStandardTransparencyNode
    void setFromTree(java.lang.String,org.w3c.dom.Node) -> setFromTree
    void mergeNativeTree(org.w3c.dom.Node) -> a
    void mergeStandardTree(org.w3c.dom.Node) -> b
    void reset() -> reset
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.gif.GIFImageWriteParam -> com.github.jaiimageio.impl.plugins.gif.b:
    void <init>(java.util.Locale) -> <init>
    void setCompressionMode(int) -> setCompressionMode
com.github.jaiimageio.impl.plugins.gif.GIFImageWriter -> com.github.jaiimageio.impl.plugins.gif.c:
    javax.imageio.stream.ImageOutputStream stream -> a
    boolean isWritingSequence -> b
    boolean wroteSequenceHeader -> c
    com.github.jaiimageio.impl.plugins.gif.GIFWritableStreamMetadata theStreamMetadata -> d
    int imageIndex -> e
    int getNumBits(int) -> a
    void computeRegions(java.awt.Rectangle,java.awt.Dimension,javax.imageio.ImageWriteParam) -> a
    byte[] createColorTable(java.awt.image.ColorModel,java.awt.image.SampleModel) -> a
    void <init>(com.github.jaiimageio.impl.plugins.gif.GIFImageWriterSpi) -> <init>
    boolean canWriteSequence() -> canWriteSequence
    void convertMetadata(java.lang.String,javax.imageio.metadata.IIOMetadata,javax.imageio.metadata.IIOMetadata) -> a
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    void endWriteSequence() -> endWriteSequence
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.ImageWriteParam getDefaultWriteParam() -> getDefaultWriteParam
    void prepareWriteSequence(javax.imageio.metadata.IIOMetadata) -> prepareWriteSequence
    void reset() -> reset
    void resetLocal() -> a
    void setOutput(java.lang.Object) -> setOutput
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    void writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> writeToSequence
    boolean needToCreateIndex(java.awt.image.RenderedImage) -> a
    void write$56597ae4(boolean,boolean,com.github.jaiimageio.impl.plugins.gif.GIFWritableStreamMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> a
    void writeImage(java.awt.image.RenderedImage,com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata,javax.imageio.ImageWriteParam,byte[],java.awt.Rectangle,java.awt.Dimension) -> a
    void writeRows(java.awt.image.RenderedImage,com.github.jaiimageio.impl.common.LZWCompressor,int,int,int,int,int,int,int,int,int,int,int) -> a
    void writeRowsOpt(byte[],int,int,com.github.jaiimageio.impl.common.LZWCompressor,int,int,int,int,int,int) -> a
    void writeRasterData(java.awt.image.RenderedImage,java.awt.Rectangle,java.awt.Dimension,javax.imageio.ImageWriteParam,boolean) -> a
    void writeHeader(java.lang.String,int,int,int,int,int,boolean,int,byte[]) -> a
    void writeHeader$4d54cfe4(com.github.jaiimageio.impl.plugins.gif.GIFWritableStreamMetadata,int) -> a
    void writeGraphicControlExtension(int,boolean,boolean,int,int) -> a
    void writeGraphicControlExtension(com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata) -> a
    void writeBlocks(byte[]) -> a
    void writePlainTextExtension(com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata) -> b
    void writeApplicationExtension(com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata) -> c
    void writeCommentExtension(com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata) -> d
    void writeImageDescriptor(int,int,int,int,boolean,boolean,int,byte[]) -> a
    void writeImageDescriptor(com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata,int) -> a
    void writeTrailer() -> b
com.github.jaiimageio.impl.plugins.gif.GIFImageWriterSpi -> com.github.jaiimageio.impl.plugins.gif.GIFImageWriterSpi:
    java.lang.String vendorName -> vendorName
    java.lang.String version -> version
    java.lang.String[] names -> names
    java.lang.String[] suffixes -> suffixes
    java.lang.String[] MIMETypes -> MIMETypes
    java.lang.String writerClassName -> writerClassName
    java.lang.String[] readerSpiNames -> readerSpiNames
    boolean registered -> registered
    void <init>() -> <init>
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    java.lang.String getDescription(java.util.Locale) -> getDescription
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.gif.GIFMetadata -> com.github.jaiimageio.impl.plugins.gif.d:
    void fatal(org.w3c.dom.Node,java.lang.String) -> a
    java.lang.String getStringAttribute(org.w3c.dom.Node,java.lang.String,java.lang.String,boolean,java.lang.String[]) -> a
    int getIntAttribute$5c6ee8a(org.w3c.dom.Node,java.lang.String,int,boolean,int,int) -> a
    int getIntAttribute$7d0c455b(org.w3c.dom.Node,java.lang.String,int,int) -> a
    float getFloatAttribute(org.w3c.dom.Node,java.lang.String) -> b
    boolean getBooleanAttribute$6751f330(org.w3c.dom.Node,java.lang.String) -> c
    java.lang.String getAttribute(org.w3c.dom.Node,java.lang.String,java.lang.String,boolean) -> a
    java.lang.String getAttribute(org.w3c.dom.Node,java.lang.String) -> d
    void <init>(java.lang.String,java.lang.String) -> <init>
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    byte[] getColorTable(org.w3c.dom.Node,java.lang.String,boolean,int) -> a
    void mergeNativeTree(org.w3c.dom.Node) -> a
    void mergeStandardTree(org.w3c.dom.Node) -> b
com.github.jaiimageio.impl.plugins.gif.GIFStreamMetadata -> com.github.jaiimageio.impl.plugins.gif.e:
    java.lang.String[] versionStrings -> a
    java.lang.String version -> b
    int logicalScreenWidth -> c
    int logicalScreenHeight -> d
    int colorResolution -> e
    int pixelAspectRatio -> f
    int backgroundColorIndex -> g
    boolean sortFlag -> h
    byte[] globalColorTable -> i
    void <init>(java.lang.String,java.lang.String) -> <init>
    boolean isReadOnly() -> isReadOnly
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    javax.imageio.metadata.IIOMetadataNode getStandardChromaNode() -> getStandardChromaNode
    javax.imageio.metadata.IIOMetadataNode getStandardCompressionNode() -> getStandardCompressionNode
    javax.imageio.metadata.IIOMetadataNode getStandardDataNode() -> getStandardDataNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
    javax.imageio.metadata.IIOMetadataNode getStandardDocumentNode() -> getStandardDocumentNode
    javax.imageio.metadata.IIOMetadataNode getStandardTextNode() -> getStandardTextNode
    javax.imageio.metadata.IIOMetadataNode getStandardTransparencyNode() -> getStandardTransparencyNode
    void setFromTree(java.lang.String,org.w3c.dom.Node) -> setFromTree
    void mergeNativeTree(org.w3c.dom.Node) -> a
    void mergeStandardTree(org.w3c.dom.Node) -> b
    void reset() -> reset
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.gif.GIFWritableImageMetadata -> com.github.jaiimageio.impl.plugins.gif.f:
    void <init>() -> <init>
    boolean isReadOnly() -> isReadOnly
    void reset() -> reset
    byte[] fromISO8859(java.lang.String) -> a
    void mergeNativeTree(org.w3c.dom.Node) -> a
    void mergeStandardTree(org.w3c.dom.Node) -> b
    void setFromTree(java.lang.String,org.w3c.dom.Node) -> setFromTree
com.github.jaiimageio.impl.plugins.gif.GIFWritableStreamMetadata -> com.github.jaiimageio.impl.plugins.gif.g:
    void <init>() -> <init>
    boolean isReadOnly() -> isReadOnly
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void reset() -> reset
    void mergeNativeTree(org.w3c.dom.Node) -> a
    void mergeStandardTree(org.w3c.dom.Node) -> b
    void setFromTree(java.lang.String,org.w3c.dom.Node) -> setFromTree
com.github.jaiimageio.impl.plugins.pcx.PCXImageReader -> com.github.jaiimageio.impl.plugins.pcx.a:
    javax.imageio.stream.ImageInputStream iis -> a
    int width -> b
    int height -> c
    boolean gotHeader -> d
    byte manufacturer -> e
    byte encoding -> f
    short xmax -> g
    short ymax -> h
    byte[] smallPalette -> i
    byte[] largePalette -> j
    byte colorPlanes -> k
    short bytesPerLine -> l
    short paletteType -> m
    com.github.jaiimageio.impl.plugins.pcx.PCXMetadata metadata -> n
    java.awt.image.SampleModel sampleModel -> o
    java.awt.image.SampleModel originalSampleModel -> p
    java.awt.image.ColorModel colorModel -> q
    java.awt.image.ColorModel originalColorModel -> r
    java.awt.Rectangle destinationRegion -> s
    java.awt.Rectangle sourceRegion -> t
    java.awt.image.BufferedImage bi -> u
    boolean noTransform -> v
    boolean seleBand -> w
    int scaleX -> x
    int scaleY -> y
    int[] sourceBands -> z
    int[] destBands -> A
    void <init>(com.github.jaiimageio.impl.plugins.pcx.PCXImageReaderSpi) -> <init>
    void setInput(java.lang.Object,boolean,boolean) -> setInput
    int getHeight(int) -> getHeight
    javax.imageio.metadata.IIOMetadata getImageMetadata(int) -> getImageMetadata
    java.util.Iterator getImageTypes(int) -> getImageTypes
    int getNumImages(boolean) -> getNumImages
    javax.imageio.metadata.IIOMetadata getStreamMetadata() -> getStreamMetadata
    int getWidth(int) -> getWidth
    java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam) -> read
    void readScanLine(byte[]) -> a
    void checkIndex(int) -> a
    void readHeader() -> a
com.github.jaiimageio.impl.plugins.pcx.PCXImageReaderSpi -> com.github.jaiimageio.impl.plugins.pcx.PCXImageReaderSpi:
    java.lang.String[] writerSpiNames -> writerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] extensions -> extensions
    java.lang.String[] mimeTypes -> mimeTypes
    boolean registered -> registered
    void <init>() -> <init>
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    java.lang.String getDescription(java.util.Locale) -> getDescription
    boolean canDecodeInput(java.lang.Object) -> canDecodeInput
    javax.imageio.ImageReader createReaderInstance(java.lang.Object) -> createReaderInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.pcx.PCXImageWriter -> com.github.jaiimageio.impl.plugins.pcx.b:
    javax.imageio.stream.ImageOutputStream ios -> a
    java.awt.Rectangle sourceRegion -> b
    java.awt.Rectangle destinationRegion -> c
    int colorPlanes -> d
    int bytesPerLine -> e
    java.awt.image.Raster inputRaster -> f
    int scaleX -> g
    int scaleY -> h
    void <init>(com.github.jaiimageio.impl.plugins.pcx.PCXImageWriterSpi) -> <init>
    void setOutput(java.lang.Object) -> setOutput
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    void writeRLE(int,int) -> a
com.github.jaiimageio.impl.plugins.pcx.PCXImageWriterSpi -> com.github.jaiimageio.impl.plugins.pcx.PCXImageWriterSpi:
    java.lang.String[] readerSpiNames -> readerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] extensions -> extensions
    java.lang.String[] mimeTypes -> mimeTypes
    boolean registered -> registered
    void <init>() -> <init>
    java.lang.String getDescription(java.util.Locale) -> getDescription
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.pcx.PCXMetadata -> com.github.jaiimageio.impl.plugins.pcx.c:
    short version -> a
    byte bitsPerPixel -> b
    short xmin -> c
    short ymin -> d
    int vdpi -> e
    int hdpi -> f
    int hsize -> g
    int vsize -> h
    void <init>() -> <init>
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    boolean isReadOnly() -> isReadOnly
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void reset() -> reset
    javax.imageio.metadata.IIOMetadataNode getStandardDocumentNode() -> getStandardDocumentNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
    java.lang.String getAttribute(org.w3c.dom.Node,java.lang.String) -> a
com.github.jaiimageio.impl.plugins.pnm.I18N -> com.github.jaiimageio.impl.plugins.pnm.a:
    java.lang.String getString(java.lang.String) -> b
com.github.jaiimageio.impl.plugins.pnm.PNMImageReader -> com.github.jaiimageio.impl.plugins.pnm.b:
    byte[] lineSeparator -> a
    int variant -> b
    int maxValue -> c
    javax.imageio.stream.ImageInputStream iis -> d
    boolean gotHeader -> e
    long imageDataOffset -> f
    int width -> g
    int height -> h
    java.lang.String aLine -> i
    java.util.StringTokenizer token -> j
    com.github.jaiimageio.impl.plugins.pnm.PNMMetadata metadata -> k
    void <init>(com.github.jaiimageio.impl.plugins.pnm.PNMImageReaderSpi) -> <init>
    void setInput(java.lang.Object,boolean,boolean) -> setInput
    int getNumImages(boolean) -> getNumImages
    int getWidth(int) -> getWidth
    int getHeight(int) -> getHeight
    void checkIndex(int) -> a
    void readHeader() -> a
    java.util.Iterator getImageTypes(int) -> getImageTypes
    javax.imageio.ImageReadParam getDefaultReadParam() -> getDefaultReadParam
    javax.imageio.metadata.IIOMetadata getImageMetadata(int) -> getImageMetadata
    javax.imageio.metadata.IIOMetadata getStreamMetadata() -> getStreamMetadata
    boolean isRandomAccessEasy(int) -> isRandomAccessEasy
    java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam) -> read
    boolean canReadRaster() -> canReadRaster
    java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam) -> readRaster
    void reset() -> reset
    boolean isRaw(int) -> b
    int readInteger(javax.imageio.stream.ImageInputStream) -> a
    void skipInteger(javax.imageio.stream.ImageInputStream,int) -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.pnm.PNMImageReaderSpi -> com.github.jaiimageio.impl.plugins.pnm.PNMImageReaderSpi:
    java.lang.String[] writerSpiNames -> writerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] entensions -> entensions
    java.lang.String[] mimeType -> mimeType
    boolean registered -> registered
    void <init>() -> <init>
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    java.lang.String getDescription(java.util.Locale) -> getDescription
    boolean canDecodeInput(java.lang.Object) -> canDecodeInput
    javax.imageio.ImageReader createReaderInstance(java.lang.Object) -> createReaderInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.pnm.PNMImageWriter -> com.github.jaiimageio.impl.plugins.pnm.c:
    byte[] lineSeparator -> a
    int variant -> b
    int maxValue -> c
    javax.imageio.stream.ImageOutputStream stream -> d
    void <init>(com.github.jaiimageio.impl.plugins.pnm.PNMImageWriterSpi) -> <init>
    void setOutput(java.lang.Object) -> setOutput
    javax.imageio.ImageWriteParam getDefaultWriteParam() -> getDefaultWriteParam
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    boolean canWriteRasters() -> canWriteRasters
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    void reset() -> reset
    void writeInteger(javax.imageio.stream.ImageOutputStream,int) -> a
    boolean isRaw(int) -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.pnm.PNMImageWriterSpi -> com.github.jaiimageio.impl.plugins.pnm.PNMImageWriterSpi:
    java.lang.String[] readerSpiNames -> readerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] entensions -> entensions
    java.lang.String[] mimeType -> mimeType
    boolean registered -> registered
    void <init>() -> <init>
    java.lang.String getDescription(java.util.Locale) -> getDescription
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.pnm.PNMMetadata -> com.github.jaiimageio.impl.plugins.pnm.d:
    int maxSample -> a
    int width -> b
    int height -> c
    int variant -> d
    java.util.ArrayList comments -> e
    int maxSampleSize -> f
    void <init>() -> <init>
    void <init>(javax.imageio.metadata.IIOMetadata) -> <init>
    void <init>(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> <init>
    void initialize(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> a
    java.lang.Object clone() -> clone
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    javax.imageio.metadata.IIOMetadataNode getStandardChromaNode() -> getStandardChromaNode
    javax.imageio.metadata.IIOMetadataNode getStandardDataNode() -> getStandardDataNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
    javax.imageio.metadata.IIOMetadataNode getStandardTextNode() -> getStandardTextNode
    boolean isReadOnly() -> isReadOnly
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void setFromTree(java.lang.String,org.w3c.dom.Node) -> setFromTree
    void reset() -> reset
    java.lang.String getFormatName() -> e
    java.lang.String getVariant() -> a
    void setVariant(int) -> a
    void setWidth(int) -> b
    void setHeight(int) -> c
    int getMaxBitDepth() -> b
    int getMaxValue() -> c
    void setMaxBitDepth(int) -> d
    void addComment(java.lang.String) -> a
    java.util.Iterator getComments() -> d
    void mergeNativeTree(org.w3c.dom.Node) -> a
    void mergeStandardTree(org.w3c.dom.Node) -> b
    java.lang.String getAttribute$930366(org.w3c.dom.Node,java.lang.String) -> a
com.github.jaiimageio.impl.plugins.raw.I18N -> com.github.jaiimageio.impl.plugins.raw.a:
    java.lang.String getString(java.lang.String) -> b
com.github.jaiimageio.impl.plugins.raw.RawImageReader -> com.github.jaiimageio.impl.plugins.raw.b:
    void <init>(com.github.jaiimageio.impl.plugins.raw.RawImageReaderSpi) -> <init>
    void setInput(java.lang.Object,boolean,boolean) -> setInput
    int getNumImages(boolean) -> getNumImages
    int getWidth(int) -> getWidth
    int getHeight(int) -> getHeight
    int getTileWidth(int) -> getTileWidth
    int getTileHeight(int) -> getTileHeight
    void checkIndex(int) -> a
    java.util.Iterator getImageTypes(int) -> getImageTypes
    javax.imageio.ImageReadParam getDefaultReadParam() -> getDefaultReadParam
    javax.imageio.metadata.IIOMetadata getImageMetadata(int) -> getImageMetadata
    javax.imageio.metadata.IIOMetadata getStreamMetadata() -> getStreamMetadata
    boolean isRandomAccessEasy(int) -> isRandomAccessEasy
    java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam) -> read
    java.awt.image.RenderedImage readAsRenderedImage(int,javax.imageio.ImageReadParam) -> readAsRenderedImage
    java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam) -> readRaster
    boolean canReadRaster() -> canReadRaster
    void reset() -> reset
    boolean getAbortRequest() -> a
com.github.jaiimageio.impl.plugins.raw.RawImageReaderSpi -> com.github.jaiimageio.impl.plugins.raw.RawImageReaderSpi:
    java.lang.String[] writerSpiNames -> writerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] entensions -> entensions
    java.lang.String[] mimeType -> mimeType
    boolean registered -> registered
    void <init>() -> <init>
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    java.lang.String getDescription(java.util.Locale) -> getDescription
    boolean canDecodeInput(java.lang.Object) -> canDecodeInput
    javax.imageio.ImageReader createReaderInstance(java.lang.Object) -> createReaderInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.raw.RawImageWriteParam -> com.github.jaiimageio.impl.plugins.raw.c:
    void <init>(java.util.Locale) -> <init>
com.github.jaiimageio.impl.plugins.raw.RawImageWriter -> com.github.jaiimageio.impl.plugins.raw.d:
    javax.imageio.stream.ImageOutputStream stream -> a
    int imageIndex -> b
    int tileWidth -> c
    int tileHeight -> d
    int tileXOffset -> e
    int tileYOffset -> f
    int scaleX -> g
    int scaleY -> h
    int xOffset -> i
    int yOffset -> j
    int[] sourceBands -> k
    int numBands -> l
    java.awt.image.RenderedImage input -> m
    java.awt.image.Raster inputRaster -> n
    java.awt.Rectangle destinationRegion -> o
    java.awt.image.SampleModel sampleModel -> p
    boolean noTransform -> q
    boolean noSubband -> r
    boolean writeRaster -> s
    boolean optimal -> t
    int pxlStride -> u
    int lineStride -> v
    int bandStride -> w
    void <init>(com.github.jaiimageio.impl.plugins.raw.RawImageWriterSpi) -> <init>
    void setOutput(java.lang.Object) -> setOutput
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    boolean canWriteRasters() -> canWriteRasters
    javax.imageio.ImageWriteParam getDefaultWriteParam() -> getDefaultWriteParam
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    int mapToSourceX(int) -> a
    int mapToSourceY(int) -> b
    int getMinTileX() -> a
    int getMaxTileX() -> b
    int getMinTileY() -> c
    int getMaxTileY() -> d
    int ToTile(int,int,int) -> a
    void reset() -> reset
com.github.jaiimageio.impl.plugins.raw.RawImageWriterSpi -> com.github.jaiimageio.impl.plugins.raw.RawImageWriterSpi:
    java.lang.String[] readerSpiNames -> readerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] entensions -> entensions
    java.lang.String[] mimeType -> mimeType
    boolean registered -> registered
    void <init>() -> <init>
    java.lang.String getDescription(java.util.Locale) -> getDescription
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.raw.RawRenderedImage -> com.github.jaiimageio.impl.plugins.raw.e:
    com.github.jaiimageio.impl.plugins.raw.RawImageReader reader -> k
    void <init>(com.github.jaiimageio.impl.plugins.raw.RawImageReader) -> <init>
    java.awt.image.Raster getTile(int,int) -> getTile
    void readAsRaster(java.awt.image.WritableRaster) -> a
    int clip$4868d301$255f288(int) -> a
com.github.jaiimageio.impl.plugins.tiff.EmptyImage -> com.github.jaiimageio.impl.plugins.tiff.a:
    void <init>(int,int,int,int,java.awt.image.SampleModel,java.awt.image.ColorModel) -> <init>
    java.awt.image.Raster getTile(int,int) -> getTile
com.github.jaiimageio.impl.plugins.tiff.I18N -> com.github.jaiimageio.impl.plugins.tiff.b:
    java.lang.String getString(java.lang.String) -> b
com.github.jaiimageio.impl.plugins.tiff.TIFFBaseJPEGCompressor -> com.github.jaiimageio.impl.plugins.tiff.c:
    javax.imageio.ImageWriteParam param -> e
    javax.imageio.plugins.jpeg.JPEGImageWriteParam JPEGParam -> a
    javax.imageio.ImageWriter JPEGWriter -> b
    boolean writeAbbreviatedStream -> c
    javax.imageio.metadata.IIOMetadata JPEGStreamMetadata -> d
    javax.imageio.metadata.IIOMetadata JPEGImageMetadata -> f
    boolean usingCodecLib -> j
    com.github.jaiimageio.impl.plugins.tiff.TIFFBaseJPEGCompressor$IIOByteArrayOutputStream baos -> k
    java.util.List getAllNodes(javax.imageio.metadata.IIOMetadataNode,java.util.List) -> a
    void <init>(java.lang.String,int,javax.imageio.ImageWriteParam) -> <init>
    void initJPEGWriter(boolean,boolean) -> a
    javax.imageio.metadata.IIOMetadata getImageMetadata(boolean) -> a
    int encode(byte[],int,int,int,int[],int) -> a
    void finalize() -> finalize
com.github.jaiimageio.impl.plugins.tiff.TIFFBaseJPEGCompressor$IIOByteArrayOutputStream -> com.github.jaiimageio.impl.plugins.tiff.d:
    void <init>() -> <init>
    void writeTo(javax.imageio.stream.ImageOutputStream) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFCIELabColorConverter -> com.github.jaiimageio.impl.plugins.tiff.e:
    float THRESHOLD -> a
    void <init>() -> <init>
    float clamp(float) -> a
    float clamp2(float) -> b
    void fromRGB(float,float,float,float[]) -> a
    void toRGB(float,float,float,float[]) -> b
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFDeflateCompressor -> com.github.jaiimageio.impl.plugins.tiff.f:
    void <init>(javax.imageio.ImageWriteParam,int) -> <init>
com.github.jaiimageio.impl.plugins.tiff.TIFFDeflateDecompressor -> com.github.jaiimageio.impl.plugins.tiff.g:
    java.util.zip.Inflater inflater -> a
    int predictor -> b
    void <init>(int) -> <init>
    void decodeRaw(byte[],int,int,int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFDeflater -> com.github.jaiimageio.impl.plugins.tiff.h:
    java.util.zip.Deflater deflater -> a
    int predictor -> b
    void <init>(java.lang.String,int,javax.imageio.ImageWriteParam,int) -> <init>
    int encode(byte[],int,int,int,int[],int) -> a
    void dispose() -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFEXIFJPEGCompressor -> com.github.jaiimageio.impl.plugins.tiff.i:
    void <init>(javax.imageio.ImageWriteParam) -> <init>
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFFaxCompressor -> com.github.jaiimageio.impl.plugins.tiff.j:
    byte[] byteTable -> j
    int[] termCodesBlack -> k
    int[] termCodesWhite -> l
    int[] makeupCodesBlack -> m
    int[] makeupCodesWhite -> n
    int[] passMode -> o
    int[] vertMode -> p
    int[] horzMode -> q
    int[][] termCodes -> r
    int[][] makeupCodes -> s
    int[][] pass -> a
    int[][] vert -> b
    int[][] horz -> c
    boolean inverseFill -> d
    int bits -> e
    int ndex -> f
    void <init>(java.lang.String,int) -> <init>
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
    int nextState(byte[],int,int,int) -> a
    void initBitBuf() -> b
    int add1DBits(byte[],int,int,int) -> b
    int add2DBits(byte[],int,int[][],int) -> a
    int addEOL(boolean,boolean,boolean,byte[],int) -> a
    int encode1D(byte[],int,int,int,byte[],int) -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFFaxDecompressor -> com.github.jaiimageio.impl.plugins.tiff.k:
    int fillOrder -> b
    int compression -> c
    int t4Options -> t
    int oneD -> u
    byte[] data -> v
    int bitPointer -> w
    int bytePointer -> x
    byte[] buffer -> y
    int w -> z
    int h -> A
    int bitsPerScanline -> B
    int lineBitNum -> C
    int changingElemSize -> D
    int[] prevChangingElems -> E
    int[] currChangingElems -> F
    int lastChangingElement -> G
    int[] table1 -> H
    int[] table2 -> I
    byte[] flipTable -> a
    short[] white -> J
    short[] additionalMakeup -> K
    short[] initBlack -> L
    short[] twoBitBlack -> M
    short[] black -> N
    byte[] twoDCodes -> O
    void <init>() -> <init>
    void beginDecoding() -> a
    void decodeRaw(byte[],int,int,int) -> a
    void decodeNextScanline(int) -> s
    void decodeT6() -> c
    void setToBlack(int,int) -> a
    int decodeWhiteCodeWord() -> d
    int decodeBlackCodeWord() -> e
    int findNextLine() -> f
    void getNextChangingElement(int,boolean,int[]) -> a
    int nextNBits(int) -> t
    int nextLesserThan8Bits(int) -> u
    void updatePointer(int) -> v
    void warning(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFFieldNode -> com.github.jaiimageio.impl.plugins.tiff.l:
    boolean isIFD -> a
    java.lang.Boolean isInitialized -> b
    com.github.jaiimageio.plugins.tiff.TIFFField field -> c
    void <init>(com.github.jaiimageio.plugins.tiff.TIFFField) -> <init>
    void initialize() -> a
    org.w3c.dom.Node appendChild(org.w3c.dom.Node) -> appendChild
    boolean hasChildNodes() -> hasChildNodes
    int getLength() -> getLength
    org.w3c.dom.Node getFirstChild() -> getFirstChild
    org.w3c.dom.Node getLastChild() -> getLastChild
    org.w3c.dom.Node getPreviousSibling() -> getPreviousSibling
    org.w3c.dom.Node getNextSibling() -> getNextSibling
    org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node) -> insertBefore
    org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node) -> replaceChild
    org.w3c.dom.Node removeChild(org.w3c.dom.Node) -> removeChild
    org.w3c.dom.Node cloneNode(boolean) -> cloneNode
com.github.jaiimageio.impl.plugins.tiff.TIFFFillOrder -> com.github.jaiimageio.impl.plugins.tiff.m:
    int[] reverseTable -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFIFD -> com.github.jaiimageio.impl.plugins.tiff.n:
    long stripOrTileByteCountsPosition -> a
    long stripOrTileOffsetsPosition -> b
    long lastPosition -> c
    com.github.jaiimageio.plugins.tiff.TIFFTag getTag(int,java.util.List) -> a
    com.github.jaiimageio.plugins.tiff.TIFFTag getTag$75138907(java.lang.String,java.util.ArrayList) -> a
    void writeTIFFFieldToStream(com.github.jaiimageio.plugins.tiff.TIFFField,javax.imageio.stream.ImageOutputStream) -> a
    void <init>(java.util.List,com.github.jaiimageio.plugins.tiff.TIFFTag) -> <init>
    void <init>(java.util.List) -> <init>
    java.util.Iterator iterator() -> a
    void initialize(javax.imageio.stream.ImageInputStream,boolean) -> a
    void writeToStream(javax.imageio.stream.ImageOutputStream) -> a
    long getStripOrTileByteCountsPosition() -> b
    long getStripOrTileOffsetsPosition() -> c
    long getLastPosition() -> d
    com.github.jaiimageio.impl.plugins.tiff.TIFFIFD getShallowClone() -> e
com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata -> com.github.jaiimageio.impl.plugins.tiff.o:
    java.util.List tagSets -> b
    com.github.jaiimageio.impl.plugins.tiff.TIFFIFD rootIFD -> a
    java.lang.String[] colorSpaceNames -> c
    java.lang.String[] orientationNames -> d
    void <init>(java.util.List) -> <init>
    void <init>(com.github.jaiimageio.impl.plugins.tiff.TIFFIFD) -> <init>
    boolean isReadOnly() -> isReadOnly
    javax.imageio.metadata.IIOMetadataNode getIFDAsTree$ef548c2(com.github.jaiimageio.impl.plugins.tiff.TIFFIFD,java.lang.String,int) -> a
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    javax.imageio.metadata.IIOMetadataNode getStandardChromaNode() -> getStandardChromaNode
    javax.imageio.metadata.IIOMetadataNode getStandardCompressionNode() -> getStandardCompressionNode
    java.lang.String repeat$7a1ba7c4(java.lang.String) -> a
    javax.imageio.metadata.IIOMetadataNode getStandardDataNode() -> getStandardDataNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
    javax.imageio.metadata.IIOMetadataNode getStandardDocumentNode() -> getStandardDocumentNode
    javax.imageio.metadata.IIOMetadataNode getStandardTextNode() -> getStandardTextNode
    javax.imageio.metadata.IIOMetadataNode getStandardTransparencyNode() -> getStandardTransparencyNode
    void fatal(org.w3c.dom.Node,java.lang.String) -> a
    java.lang.String getAttribute(org.w3c.dom.Node,java.lang.String) -> b
    org.w3c.dom.Node getChildNode(org.w3c.dom.Node,java.lang.String) -> c
    com.github.jaiimageio.impl.plugins.tiff.TIFFIFD parseIFD(org.w3c.dom.Node) -> a
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void reset() -> reset
    com.github.jaiimageio.plugins.tiff.TIFFField getTIFFField(int) -> a
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata getShallowClone() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFImageReader -> com.github.jaiimageio.impl.plugins.tiff.p:
    javax.imageio.stream.ImageInputStream stream -> b
    boolean gotHeader -> c
    javax.imageio.ImageReadParam imageReadParam -> d
    com.github.jaiimageio.impl.plugins.tiff.TIFFStreamMetadata streamMetadata -> e
    int currIndex -> f
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata imageMetadata -> a
    java.util.ArrayList imageStartPosition$7865b31 -> g
    int numImages -> h
    java.util.HashMap imageTypeMap -> i
    java.awt.image.BufferedImage theImage -> j
    int width -> k
    int height -> l
    int numBands -> m
    int tileOrStripWidth -> n
    int tileOrStripHeight -> o
    int planarConfiguration -> p
    int compression -> q
    int photometricInterpretation -> r
    int samplesPerPixel -> s
    int[] sampleFormat -> t
    int[] bitsPerSample -> u
    int[] extraSamples -> v
    char[] colorMap -> w
    int sourceXOffset -> x
    int sourceYOffset -> y
    int srcXSubsampling -> z
    int srcYSubsampling -> A
    int dstWidth -> B
    int dstHeight -> C
    int dstMinX -> D
    int dstMinY -> E
    int dstXOffset -> F
    int dstYOffset -> G
    int tilesAcross -> H
    int tilesDown -> I
    int pixelsRead -> J
    int pixelsToRead -> K
    int[] sourceBands -> L
    int[] destinationBands -> M
    com.github.jaiimageio.plugins.tiff.TIFFDecompressor decompressor -> N
    void <init>(com.github.jaiimageio.impl.plugins.tiff.TIFFImageReaderSpi) -> <init>
    void setInput(java.lang.Object,boolean,boolean) -> setInput
    void readHeader() -> a
    int locateImage(int) -> a
    int getNumImages(boolean) -> getNumImages
    javax.imageio.metadata.IIOMetadata getStreamMetadata() -> getStreamMetadata
    void seekToImage(int) -> b
    int getTileOrStripWidth() -> b
    int getTileOrStripHeight() -> c
    long getTileOrStripOffset(int) -> c
    int getCompression() -> d
    int getWidth(int) -> getWidth
    int getHeight(int) -> getHeight
    java.util.Iterator getImageTypes(int) -> getImageTypes
    javax.imageio.metadata.IIOMetadata getImageMetadata(int) -> getImageMetadata
    boolean isRandomAccessEasy(int) -> isRandomAccessEasy
    boolean hasThumbnails(int) -> hasThumbnails
    int getNumThumbnails(int) -> getNumThumbnails
    javax.imageio.ImageReadParam getDefaultReadParam() -> getDefaultReadParam
    boolean isImageTiled(int) -> isImageTiled
    int getTileWidth(int) -> getTileWidth
    int getTileHeight(int) -> getTileHeight
    java.awt.image.BufferedImage readTile(int,int,int) -> readTile
    boolean canReadRaster() -> canReadRaster
    java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam) -> readRaster
    int ifloor(int,int) -> a
    int iceil(int,int) -> b
    void prepareRead(int,javax.imageio.ImageReadParam) -> a
    java.awt.image.RenderedImage readAsRenderedImage(int,javax.imageio.ImageReadParam) -> readAsRenderedImage
    void decodeTile(int,int,int) -> a
    void reportProgress() -> e
    java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam) -> read
    void reset() -> reset
    void resetLocal() -> f
    void forwardWarningMessage(java.lang.String) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFImageReaderSpi -> com.github.jaiimageio.impl.plugins.tiff.TIFFImageReaderSpi:
    java.lang.String[] names -> names
    java.lang.String[] suffixes -> suffixes
    java.lang.String[] MIMETypes -> MIMETypes
    java.lang.String readerClassName -> readerClassName
    java.lang.String[] writerSpiNames -> writerSpiNames
    boolean registered -> registered
    void <init>() -> <init>
    java.lang.String getDescription(java.util.Locale) -> getDescription
    boolean canDecodeInput(java.lang.Object) -> canDecodeInput
    javax.imageio.ImageReader createReaderInstance(java.lang.Object) -> createReaderInstance
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFImageWriter -> com.github.jaiimageio.impl.plugins.tiff.q:
    java.lang.String[] TIFFCompressionTypes -> a
    java.lang.String[] compressionTypes -> b
    boolean[] isCompressionLossless -> c
    int[] compressionNumbers -> d
    javax.imageio.stream.ImageOutputStream stream -> f
    long headerPosition -> g
    java.awt.image.RenderedImage image -> h
    javax.imageio.ImageTypeSpecifier imageType -> e
    java.nio.ByteOrder byteOrder -> i
    javax.imageio.ImageWriteParam param -> j
    com.github.jaiimageio.plugins.tiff.TIFFCompressor compressor -> k
    com.github.jaiimageio.plugins.tiff.TIFFColorConverter colorConverter -> l
    com.github.jaiimageio.impl.plugins.tiff.TIFFStreamMetadata streamMetadata -> m
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata imageMetadata -> n
    int sourceXOffset -> o
    int sourceYOffset -> p
    int sourceWidth -> q
    int sourceHeight -> r
    int[] sourceBands -> s
    int periodX -> t
    int periodY -> u
    int bitDepth -> v
    int numBands -> w
    int tileWidth -> x
    int tileLength -> y
    int tilesAcross -> z
    int tilesDown -> A
    int[] sampleSize -> B
    int scalingBitDepth -> C
    boolean isRescaling -> D
    boolean isBilevel -> E
    boolean isImageSimple -> F
    boolean isInverted -> G
    boolean isTiled -> H
    int nativePhotometricInterpretation -> I
    int photometricInterpretation -> J
    char[] bitsPerSample -> K
    int sampleFormat -> L
    byte[][] scale -> M
    byte[] scale0 -> N
    byte[][] scaleh -> O
    byte[][] scalel -> P
    int compression -> Q
    int predictor -> R
    int totalPixels -> S
    int pixelsDone -> T
    long nextIFDPointerPos -> U
    long nextSpace -> V
    boolean isWritingSequence -> W
    boolean isInsertingEmpty -> X
    boolean isWritingEmpty -> Y
    java.lang.Object replacePixelsLock -> Z
    int replacePixelsIndex -> aa
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata replacePixelsMetadata -> ab
    long[] replacePixelsTileOffsets -> ac
    long[] replacePixelsByteCounts -> ad
    long replacePixelsOffsetsPosition -> ae
    long replacePixelsByteCountsPosition -> af
    java.awt.Rectangle replacePixelsRegion -> ag
    boolean inReplacePixelsNest -> ah
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageReader reader -> ai
    int XToTileX(int,int,int) -> a
    int YToTileY(int,int,int) -> b
    void <init>(javax.imageio.spi.ImageWriterSpi) -> <init>
    javax.imageio.ImageWriteParam getDefaultWriteParam() -> getDefaultWriteParam
    void setOutput(java.lang.Object) -> setOutput
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata convertStandardImageMetadata(javax.imageio.metadata.IIOMetadata) -> a
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata convertNativeImageMetadata(javax.imageio.metadata.IIOMetadata) -> b
    void setupMetadata(java.awt.image.ColorModel,java.awt.image.SampleModel,int,int) -> a
    int writeTile(java.awt.Rectangle,com.github.jaiimageio.plugins.tiff.TIFFCompressor) -> a
    void initializeScaleTables(int[]) -> a
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    void writeHeader() -> a
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam,boolean,boolean) -> a
    boolean canWriteSequence() -> canWriteSequence
    void prepareWriteSequence(javax.imageio.metadata.IIOMetadata) -> prepareWriteSequence
    void writeToSequence(javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> writeToSequence
    void endWriteSequence() -> endWriteSequence
    boolean canInsertImage(int) -> canInsertImage
    void locateIFD(int,long[],long[]) -> a
    void writeInsert(int,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> writeInsert
    void insert(int,javax.imageio.IIOImage,javax.imageio.ImageWriteParam,boolean) -> a
    boolean isEncodingEmpty() -> b
    boolean canInsertEmpty(int) -> canInsertEmpty
    boolean canWriteEmpty() -> canWriteEmpty
    void checkParamsEmpty(javax.imageio.ImageTypeSpecifier,int,int,java.util.List) -> a
    void prepareInsertEmpty(int,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List,javax.imageio.ImageWriteParam) -> prepareInsertEmpty
    void prepareWriteEmpty(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,int,int,javax.imageio.metadata.IIOMetadata,java.util.List,javax.imageio.ImageWriteParam) -> prepareWriteEmpty
    void endInsertEmpty() -> endInsertEmpty
    void endWriteEmpty() -> endWriteEmpty
    com.github.jaiimageio.impl.plugins.tiff.TIFFIFD readIFD(int) -> a
    boolean canReplacePixels(int) -> canReplacePixels
    void prepareReplacePixels(int,java.awt.Rectangle) -> prepareReplacePixels
    void replacePixels(java.awt.image.RenderedImage,javax.imageio.ImageWriteParam) -> replacePixels
    void replacePixels(java.awt.image.Raster,javax.imageio.ImageWriteParam) -> replacePixels
    void endReplacePixels() -> endReplacePixels
    void reset() -> reset
    void dispose() -> dispose
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFImageWriterSpi -> com.github.jaiimageio.impl.plugins.tiff.TIFFImageWriterSpi:
    java.lang.String[] names -> names
    java.lang.String[] suffixes -> suffixes
    java.lang.String[] MIMETypes -> MIMETypes
    java.lang.String writerClassName -> writerClassName
    java.lang.String[] readerSpiNames -> readerSpiNames
    boolean registered -> registered
    void <init>() -> <init>
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    java.lang.String getDescription(java.util.Locale) -> getDescription
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFJPEGCompressor -> com.github.jaiimageio.impl.plugins.tiff.r:
    javax.imageio.ImageReader getJPEGTablesReader() -> b
    void <init>(javax.imageio.ImageWriteParam) -> <init>
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFJPEGCompressor$JPEGSPIFilter -> com.github.jaiimageio.impl.plugins.tiff.s:
    void <init>() -> <init>
    boolean filter(java.lang.Object) -> filter
com.github.jaiimageio.impl.plugins.tiff.TIFFJPEGDecompressor -> com.github.jaiimageio.impl.plugins.tiff.t:
    javax.imageio.ImageReader JPEGReader -> a
    javax.imageio.ImageReadParam JPEGParam -> b
    boolean hasJPEGTables -> t
    byte[] tables -> c
    byte[] data -> u
    void <init>() -> <init>
    void beginDecoding() -> a
    void decodeRaw(byte[],int,int,int) -> a
    void finalize() -> finalize
com.github.jaiimageio.impl.plugins.tiff.TIFFLSBCompressor -> com.github.jaiimageio.impl.plugins.tiff.u:
    void <init>() -> <init>
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFLSBDecompressor -> com.github.jaiimageio.impl.plugins.tiff.v:
    byte[] flipTable -> a
    void <init>() -> <init>
    void decodeRaw(byte[],int,int,int) -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFLZWCompressor -> com.github.jaiimageio.impl.plugins.tiff.w:
    int predictor -> a
    void <init>(int) -> <init>
    void setStream(javax.imageio.stream.ImageOutputStream) -> a
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFLZWDecompressor -> com.github.jaiimageio.impl.plugins.tiff.x:
    int[] andTable -> a
    int predictor -> b
    byte[] srcData -> c
    byte[] dstData -> t
    int srcIndex -> u
    int dstIndex -> v
    byte[][] stringTable -> w
    int tableIndex -> x
    int bitsToGet -> y
    int nextData -> z
    int nextBits -> A
    boolean isLSB -> B
    void <init>(int) -> <init>
    void decodeRaw(byte[],int,int,int) -> a
    void initializeStringTable() -> c
    void writeString(byte[]) -> a
    int getNextCode() -> d
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFNullCompressor -> com.github.jaiimageio.impl.plugins.tiff.y:
    void <init>() -> <init>
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFNullDecompressor -> com.github.jaiimageio.impl.plugins.tiff.z:
    boolean isReadActiveOnly -> a
    int originalSrcMinX -> b
    int originalSrcMinY -> c
    int originalSrcWidth -> t
    int originalSrcHeight -> u
    void <init>() -> <init>
    void beginDecoding() -> a
    void decode() -> b
    void decodeRaw(byte[],int,int,int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFOldJPEGDecompressor -> com.github.jaiimageio.impl.plugins.tiff.A:
    boolean isInitialized -> t
    java.lang.Long JPEGStreamOffset -> u
    int SOFPosition -> v
    byte[] SOSMarker -> w
    int subsamplingX -> x
    int subsamplingY -> y
    void <init>() -> <init>
    void initialize() -> c
    void decodeRaw(byte[],int,int,int) -> a
    void finalize() -> finalize
com.github.jaiimageio.impl.plugins.tiff.TIFFPackBitsCompressor -> com.github.jaiimageio.impl.plugins.tiff.B:
    void <init>() -> <init>
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFPackBitsDecompressor -> com.github.jaiimageio.impl.plugins.tiff.C:
    void <init>() -> <init>
    int decode$3ccaca28(byte[],byte[],int) -> a
    void decodeRaw(byte[],int,int,int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFRLECompressor -> com.github.jaiimageio.impl.plugins.tiff.D:
    void <init>() -> <init>
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFRenderedImage -> com.github.jaiimageio.impl.plugins.tiff.E:
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageReader reader -> a
    int imageIndex -> b
    com.github.jaiimageio.plugins.tiff.TIFFImageReadParam tileParam$10378a8c -> c
    int subsampleX -> d
    int subsampleY -> e
    boolean isSubsampling -> f
    int width -> g
    int height -> h
    int tileWidth -> i
    int tileHeight -> j
    javax.imageio.ImageTypeSpecifier its -> k
    void <init>(com.github.jaiimageio.impl.plugins.tiff.TIFFImageReader,int,javax.imageio.ImageReadParam,int,int) -> <init>
    java.util.Vector getSources() -> getSources
    java.lang.Object getProperty(java.lang.String) -> getProperty
    java.lang.String[] getPropertyNames() -> getPropertyNames
    java.awt.image.ColorModel getColorModel() -> getColorModel
    java.awt.image.SampleModel getSampleModel() -> getSampleModel
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getMinX() -> getMinX
    int getMinY() -> getMinY
    int getNumXTiles() -> getNumXTiles
    int getNumYTiles() -> getNumYTiles
    int getMinTileX() -> getMinTileX
    int getMinTileY() -> getMinTileY
    int getTileWidth() -> getTileWidth
    int getTileHeight() -> getTileHeight
    int getTileGridXOffset() -> getTileGridXOffset
    int getTileGridYOffset() -> getTileGridYOffset
    java.awt.image.Raster getTile(int,int) -> getTile
    java.awt.image.Raster getData() -> getData
    java.awt.image.Raster getData(java.awt.Rectangle) -> getData
    java.awt.image.WritableRaster read(java.awt.Rectangle) -> a
    java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster) -> copyData
com.github.jaiimageio.impl.plugins.tiff.TIFFStreamMetadata -> com.github.jaiimageio.impl.plugins.tiff.F:
    java.lang.String bigEndianString -> b
    java.lang.String littleEndianString -> c
    java.nio.ByteOrder byteOrder -> a
    void <init>() -> <init>
    boolean isReadOnly() -> isReadOnly
    void fatal(org.w3c.dom.Node,java.lang.String) -> a
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void reset() -> reset
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.tiff.TIFFT4Compressor -> com.github.jaiimageio.impl.plugins.tiff.G:
    boolean is1DMode -> j
    boolean isEOLAligned -> k
    void <init>() -> <init>
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFT6Compressor -> com.github.jaiimageio.impl.plugins.tiff.H:
    void <init>() -> <init>
    int encodeT6(byte[],int,int,int,int,byte[]) -> a
    int encode(byte[],int,int,int,int[],int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFYCbCrColorConverter -> com.github.jaiimageio.impl.plugins.tiff.I:
    float LumaRed -> a
    float LumaGreen -> b
    float LumaBlue -> c
    float referenceBlackY -> d
    float referenceWhiteY -> e
    float referenceBlackCb -> f
    float referenceWhiteCb -> g
    float referenceBlackCr -> h
    float referenceWhiteCr -> i
    float codingRangeY -> j
    float codingRangeCbCr -> k
    void <init>(com.github.jaiimageio.impl.plugins.tiff.TIFFImageMetadata) -> <init>
    void fromRGB(float,float,float,float[]) -> a
    void toRGB(float,float,float,float[]) -> b
com.github.jaiimageio.impl.plugins.tiff.TIFFYCbCrDecompressor -> com.github.jaiimageio.impl.plugins.tiff.J:
    float LumaRed -> a
    float LumaGreen -> b
    float LumaBlue -> c
    float referenceBlackY -> t
    float referenceWhiteY -> u
    float referenceBlackCb -> v
    float referenceWhiteCb -> w
    float referenceBlackCr -> x
    float referenceWhiteCr -> y
    float codingRangeY -> z
    int[] iYTab -> A
    int[] iCbTab -> B
    int[] iCrTab -> C
    int[] iGYTab -> D
    int[] iGCbTab -> E
    int[] iGCrTab -> F
    int chromaSubsampleH -> G
    int chromaSubsampleV -> H
    boolean colorConvert -> I
    com.github.jaiimageio.plugins.tiff.TIFFDecompressor decompressor -> J
    java.awt.image.BufferedImage tmpImage -> K
    void <init>(com.github.jaiimageio.plugins.tiff.TIFFDecompressor,boolean) -> <init>
    void warning(java.lang.String) -> a
    void setReader(javax.imageio.ImageReader) -> a
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
    void setPhotometricInterpretation(int) -> a
    void setCompression(int) -> b
    void setPlanar(boolean) -> a
    void setSamplesPerPixel(int) -> c
    void setBitsPerSample(int[]) -> a
    void setSampleFormat(int[]) -> b
    void setExtraSamples(int[]) -> c
    void setColorMap(char[]) -> a
    void setStream(javax.imageio.stream.ImageInputStream) -> a
    void setOffset(long) -> a
    void setByteCount(int) -> d
    void setSrcMinX(int) -> e
    void setSrcMinY(int) -> f
    void setSrcWidth(int) -> g
    void setSrcHeight(int) -> h
    void setSourceBands(int[]) -> d
    void setDestinationBands(int[]) -> e
    void setImage(java.awt.image.BufferedImage) -> a
    void setDstMinX(int) -> i
    void setDstMinY(int) -> j
    void setDstWidth(int) -> k
    void setDstHeight(int) -> l
    void setActiveSrcMinX(int) -> m
    void setActiveSrcMinY(int) -> n
    void setActiveSrcWidth(int) -> o
    void setActiveSrcHeight(int) -> p
    byte clamp(int) -> s
    void beginDecoding() -> a
    void decodeRaw(byte[],int,int,int) -> a
com.github.jaiimageio.impl.plugins.tiff.TIFFZLibCompressor -> com.github.jaiimageio.impl.plugins.tiff.K:
    void <init>(javax.imageio.ImageWriteParam,int) -> <init>
com.github.jaiimageio.impl.plugins.wbmp.I18N -> com.github.jaiimageio.impl.plugins.wbmp.a:
    java.lang.String getString(java.lang.String) -> b
com.github.jaiimageio.impl.plugins.wbmp.WBMPImageReader -> com.github.jaiimageio.impl.plugins.wbmp.b:
    javax.imageio.stream.ImageInputStream iis -> a
    boolean gotHeader -> b
    long imageDataOffset -> c
    int width -> d
    int height -> e
    int wbmpType -> f
    com.github.jaiimageio.impl.plugins.wbmp.WBMPMetadata metadata -> g
    void <init>(com.github.jaiimageio.impl.plugins.wbmp.WBMPImageReaderSpi) -> <init>
    void setInput(java.lang.Object,boolean,boolean) -> setInput
    int getNumImages(boolean) -> getNumImages
    int getWidth(int) -> getWidth
    int getHeight(int) -> getHeight
    boolean isRandomAccessEasy(int) -> isRandomAccessEasy
    void checkIndex(int) -> a
    void readHeader() -> a
    java.util.Iterator getImageTypes(int) -> getImageTypes
    javax.imageio.ImageReadParam getDefaultReadParam() -> getDefaultReadParam
    javax.imageio.metadata.IIOMetadata getImageMetadata(int) -> getImageMetadata
    javax.imageio.metadata.IIOMetadata getStreamMetadata() -> getStreamMetadata
    java.awt.image.BufferedImage read(int,javax.imageio.ImageReadParam) -> read
    boolean canReadRaster() -> canReadRaster
    java.awt.image.Raster readRaster(int,javax.imageio.ImageReadParam) -> readRaster
    void reset() -> reset
com.github.jaiimageio.impl.plugins.wbmp.WBMPImageReaderSpi -> com.github.jaiimageio.impl.plugins.wbmp.WBMPImageReaderSpi:
    java.lang.String[] writerSpiNames -> writerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] entensions -> entensions
    java.lang.String[] mimeType -> mimeType
    boolean registered -> registered
    void <init>() -> <init>
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    java.lang.String getDescription(java.util.Locale) -> getDescription
    boolean canDecodeInput(java.lang.Object) -> canDecodeInput
    javax.imageio.ImageReader createReaderInstance(java.lang.Object) -> createReaderInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.wbmp.WBMPImageWriter -> com.github.jaiimageio.impl.plugins.wbmp.c:
    javax.imageio.stream.ImageOutputStream stream -> a
    byte[] intToMultiByte(int) -> a
    void <init>(com.github.jaiimageio.impl.plugins.wbmp.WBMPImageWriterSpi) -> <init>
    void setOutput(java.lang.Object) -> setOutput
    javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam) -> getDefaultStreamMetadata
    javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> getDefaultImageMetadata
    javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageWriteParam) -> convertStreamMetadata
    javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata,javax.imageio.ImageTypeSpecifier,javax.imageio.ImageWriteParam) -> convertImageMetadata
    boolean canWriteRasters() -> canWriteRasters
    void write(javax.imageio.metadata.IIOMetadata,javax.imageio.IIOImage,javax.imageio.ImageWriteParam) -> write
    void reset() -> reset
com.github.jaiimageio.impl.plugins.wbmp.WBMPImageWriterSpi -> com.github.jaiimageio.impl.plugins.wbmp.WBMPImageWriterSpi:
    java.lang.String[] readerSpiNames -> readerSpiNames
    java.lang.String[] formatNames -> formatNames
    java.lang.String[] entensions -> entensions
    java.lang.String[] mimeType -> mimeType
    boolean registered -> registered
    void <init>() -> <init>
    java.lang.String getDescription(java.util.Locale) -> getDescription
    void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class) -> onRegistration
    boolean canEncodeImage(javax.imageio.ImageTypeSpecifier) -> canEncodeImage
    javax.imageio.ImageWriter createWriterInstance(java.lang.Object) -> createWriterInstance
    void <clinit>() -> <clinit>
com.github.jaiimageio.impl.plugins.wbmp.WBMPMetadata -> com.github.jaiimageio.impl.plugins.wbmp.d:
    int wbmpType -> a
    int width -> b
    int height -> c
    void <init>() -> <init>
    boolean isReadOnly() -> isReadOnly
    org.w3c.dom.Node getAsTree(java.lang.String) -> getAsTree
    void setFromTree(java.lang.String,org.w3c.dom.Node) -> setFromTree
    void mergeTree(java.lang.String,org.w3c.dom.Node) -> mergeTree
    void reset() -> reset
    javax.imageio.metadata.IIOMetadataNode addChildNode$75926a65(javax.imageio.metadata.IIOMetadataNode,java.lang.String,java.lang.Integer) -> a
    javax.imageio.metadata.IIOMetadataNode getStandardChromaNode() -> getStandardChromaNode
    javax.imageio.metadata.IIOMetadataNode getStandardDataNode() -> getStandardDataNode
    javax.imageio.metadata.IIOMetadataNode getStandardDimensionNode() -> getStandardDimensionNode
com.github.jaiimageio.impl.stream.ChannelImageInputStreamSpi -> com.github.jaiimageio.impl.stream.ChannelImageInputStreamSpi:
    void <init>() -> <init>
    javax.imageio.stream.ImageInputStream createInputStreamInstance(java.lang.Object,boolean,java.io.File) -> createInputStreamInstance
    java.lang.String getDescription(java.util.Locale) -> getDescription
com.github.jaiimageio.impl.stream.ChannelImageOutputStreamSpi -> com.github.jaiimageio.impl.stream.ChannelImageOutputStreamSpi:
    void <init>() -> <init>
    javax.imageio.stream.ImageOutputStream createOutputStreamInstance(java.lang.Object,boolean,java.io.File) -> createOutputStreamInstance
    java.lang.String getDescription(java.util.Locale) -> getDescription
com.github.jaiimageio.plugins.bmp.BMPImageWriteParam -> com.github.jaiimageio.a.a.a:
    void <init>(byte) -> <init>
    void <init>() -> <init>
    void setCompressionType(java.lang.String) -> setCompressionType
com.github.jaiimageio.plugins.pnm.PNMImageWriteParam -> com.github.jaiimageio.a.b.a:
    boolean raw -> a
    void <init>() -> <init>
    boolean getRaw() -> a
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet -> com.github.jaiimageio.a.c.a:
    com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet theInstance -> a
    java.util.ArrayList tags$7865b31 -> b
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Artist -> com.github.jaiimageio.a.c.b:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$BitsPerSample -> com.github.jaiimageio.a.c.c:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$CellLength -> com.github.jaiimageio.a.c.d:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$CellWidth -> com.github.jaiimageio.a.c.e:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ColorMap -> com.github.jaiimageio.a.c.f:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Compression -> com.github.jaiimageio.a.c.g:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Copyright -> com.github.jaiimageio.a.c.h:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$DateTime -> com.github.jaiimageio.a.c.i:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$DocumentName -> com.github.jaiimageio.a.c.j:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$DotRange -> com.github.jaiimageio.a.c.k:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ExtraSamples -> com.github.jaiimageio.a.c.l:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$FillOrder -> com.github.jaiimageio.a.c.m:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$FreeByteCounts -> com.github.jaiimageio.a.c.n:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$FreeOffsets -> com.github.jaiimageio.a.c.o:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$GrayResponseCurve -> com.github.jaiimageio.a.c.p:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$GrayResponseUnit -> com.github.jaiimageio.a.c.q:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$HalftoneHints -> com.github.jaiimageio.a.c.r:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$HostComputer -> com.github.jaiimageio.a.c.s:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ICCProfile -> com.github.jaiimageio.a.c.t:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ImageDescription -> com.github.jaiimageio.a.c.u:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ImageLength -> com.github.jaiimageio.a.c.v:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ImageWidth -> com.github.jaiimageio.a.c.w:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$InkNames -> com.github.jaiimageio.a.c.x:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$InkSet -> com.github.jaiimageio.a.c.y:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGACTables -> com.github.jaiimageio.a.c.z:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGDCTables -> com.github.jaiimageio.a.c.A:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGInterchangeFormat -> com.github.jaiimageio.a.c.B:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGInterchangeFormatLength -> com.github.jaiimageio.a.c.C:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGLosslessPredictors -> com.github.jaiimageio.a.c.D:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGPointTransforms -> com.github.jaiimageio.a.c.E:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGProc -> com.github.jaiimageio.a.c.F:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGQTables -> com.github.jaiimageio.a.c.G:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGRestartInterval -> com.github.jaiimageio.a.c.H:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$JPEGTables -> com.github.jaiimageio.a.c.I:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Make -> com.github.jaiimageio.a.c.J:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$MaxSampleValue -> com.github.jaiimageio.a.c.K:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$MinSampleValue -> com.github.jaiimageio.a.c.L:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Model -> com.github.jaiimageio.a.c.M:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$NewSubfileType -> com.github.jaiimageio.a.c.N:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$NumberOfInks -> com.github.jaiimageio.a.c.O:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Orientation -> com.github.jaiimageio.a.c.P:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$PageName -> com.github.jaiimageio.a.c.Q:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$PageNumber -> com.github.jaiimageio.a.c.R:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$PhotometricInterpretation -> com.github.jaiimageio.a.c.S:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$PlanarConfiguration -> com.github.jaiimageio.a.c.T:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Predictor -> com.github.jaiimageio.a.c.U:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$PrimaryChromaticities -> com.github.jaiimageio.a.c.V:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ReferenceBlackWhite -> com.github.jaiimageio.a.c.W:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$ResolutionUnit -> com.github.jaiimageio.a.c.X:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$RowsPerStrip -> com.github.jaiimageio.a.c.Y:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$SMaxSampleValue -> com.github.jaiimageio.a.c.Z:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$SMinSampleValue -> com.github.jaiimageio.a.c.aa:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$SampleFormat -> com.github.jaiimageio.a.c.ab:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$SamplesPerPixel -> com.github.jaiimageio.a.c.ac:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Software -> com.github.jaiimageio.a.c.ad:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$StripByteCounts -> com.github.jaiimageio.a.c.ae:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$StripOffsets -> com.github.jaiimageio.a.c.af:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$SubfileType -> com.github.jaiimageio.a.c.ag:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$T4Options -> com.github.jaiimageio.a.c.ah:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$T6Options -> com.github.jaiimageio.a.c.ai:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TargetPrinter -> com.github.jaiimageio.a.c.aj:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$Threshholding -> com.github.jaiimageio.a.c.ak:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TileByteCounts -> com.github.jaiimageio.a.c.al:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TileLength -> com.github.jaiimageio.a.c.am:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TileOffsets -> com.github.jaiimageio.a.c.an:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TileWidth -> com.github.jaiimageio.a.c.ao:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TransferFunction -> com.github.jaiimageio.a.c.ap:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$TransferRange -> com.github.jaiimageio.a.c.aq:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$WhitePoint -> com.github.jaiimageio.a.c.ar:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$XPosition -> com.github.jaiimageio.a.c.as:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$XResolution -> com.github.jaiimageio.a.c.at:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$YCbCrCoefficients -> com.github.jaiimageio.a.c.au:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$YCbCrPositioning -> com.github.jaiimageio.a.c.av:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$YCbCrSubSampling -> com.github.jaiimageio.a.c.aw:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$YPosition -> com.github.jaiimageio.a.c.ax:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.BaselineTIFFTagSet$YResolution -> com.github.jaiimageio.a.c.ay:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet -> com.github.jaiimageio.a.c.az:
    com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet theInstance -> c
    int DIFFERENTIAL_CORRECTION_NONE -> a
    int DIFFERENTIAL_CORRECTION_APPLIED -> b
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSAltitude -> com.github.jaiimageio.a.c.aA:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSAltitudeRef -> com.github.jaiimageio.a.c.aB:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSAreaInformation -> com.github.jaiimageio.a.c.aC:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDOP -> com.github.jaiimageio.a.c.aD:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDateStamp -> com.github.jaiimageio.a.c.aE:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestBearing -> com.github.jaiimageio.a.c.aF:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestBearingRef -> com.github.jaiimageio.a.c.aG:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestDistance -> com.github.jaiimageio.a.c.aH:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestDistanceRef -> com.github.jaiimageio.a.c.aI:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestLatitude -> com.github.jaiimageio.a.c.aJ:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestLatitudeRef -> com.github.jaiimageio.a.c.aK:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestLongitude -> com.github.jaiimageio.a.c.aL:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDestLongitudeRef -> com.github.jaiimageio.a.c.aM:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSDifferential -> com.github.jaiimageio.a.c.aN:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSImgDirection -> com.github.jaiimageio.a.c.aO:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSImgDirectionRef -> com.github.jaiimageio.a.c.aP:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSLatitude -> com.github.jaiimageio.a.c.aQ:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSLatitudeRef -> com.github.jaiimageio.a.c.aR:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSLongitude -> com.github.jaiimageio.a.c.aS:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSLongitudeRef -> com.github.jaiimageio.a.c.aT:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSMapDatum -> com.github.jaiimageio.a.c.aU:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSMeasureMode -> com.github.jaiimageio.a.c.aV:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSProcessingMethod -> com.github.jaiimageio.a.c.aW:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSSatellites -> com.github.jaiimageio.a.c.aX:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSSpeed -> com.github.jaiimageio.a.c.aY:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSSpeedRef -> com.github.jaiimageio.a.c.aZ:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSStatus -> com.github.jaiimageio.a.c.ba:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSTimeStamp -> com.github.jaiimageio.a.c.bb:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSTrack -> com.github.jaiimageio.a.c.bc:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSTrackRef -> com.github.jaiimageio.a.c.bd:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFGPSTagSet$GPSVersionID -> com.github.jaiimageio.a.c.be:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFInteroperabilityTagSet -> com.github.jaiimageio.a.c.bf:
    com.github.jaiimageio.plugins.tiff.EXIFInteroperabilityTagSet theInstance -> a
    java.util.ArrayList tags$7865b31 -> b
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.EXIFInteroperabilityTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.EXIFInteroperabilityTagSet$InteroperabilityIndex -> com.github.jaiimageio.a.c.bg:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFParentTIFFTagSet -> com.github.jaiimageio.a.c.bh:
    com.github.jaiimageio.plugins.tiff.EXIFParentTIFFTagSet theInstance -> a
    java.util.ArrayList tags$7865b31 -> b
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.EXIFParentTIFFTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.EXIFParentTIFFTagSet$EXIFIFDPointer -> com.github.jaiimageio.a.c.bi:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFParentTIFFTagSet$GPSInfoIFDPointer -> com.github.jaiimageio.a.c.bj:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet -> com.github.jaiimageio.a.c.bk:
    com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet theInstance -> b
    byte[] EXIF_VERSION_2_2 -> a
    java.util.ArrayList tags$7865b31 -> c
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ApertureValue -> com.github.jaiimageio.a.c.bl:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$BrightnessValue -> com.github.jaiimageio.a.c.bm:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$CFAPattern -> com.github.jaiimageio.a.c.bn:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ColorSpace -> com.github.jaiimageio.a.c.bo:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ComponentsConfiguration -> com.github.jaiimageio.a.c.bp:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$CompressedBitsPerPixel -> com.github.jaiimageio.a.c.bq:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$Contrast -> com.github.jaiimageio.a.c.br:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$CustomRendered -> com.github.jaiimageio.a.c.bs:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$DateTimeDigitized -> com.github.jaiimageio.a.c.bt:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$DateTimeOriginal -> com.github.jaiimageio.a.c.bu:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$DeviceSettingDescription -> com.github.jaiimageio.a.c.bv:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$DigitalZoomRatio -> com.github.jaiimageio.a.c.bw:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$EXIFVersion -> com.github.jaiimageio.a.c.bx:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ExposureBiasValue -> com.github.jaiimageio.a.c.by:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ExposureIndex -> com.github.jaiimageio.a.c.bz:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ExposureMode -> com.github.jaiimageio.a.c.bA:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ExposureProgram -> com.github.jaiimageio.a.c.bB:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ExposureTime -> com.github.jaiimageio.a.c.bC:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FNumber -> com.github.jaiimageio.a.c.bD:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FileSource -> com.github.jaiimageio.a.c.bE:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$Flash -> com.github.jaiimageio.a.c.bF:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FlashEnergy -> com.github.jaiimageio.a.c.bG:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FlashPixVersion -> com.github.jaiimageio.a.c.bH:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FocalLength -> com.github.jaiimageio.a.c.bI:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FocalLengthIn35mmFilm -> com.github.jaiimageio.a.c.bJ:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FocalPlaneResolutionUnit -> com.github.jaiimageio.a.c.bK:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FocalPlaneXResolution -> com.github.jaiimageio.a.c.bL:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$FocalPlaneYResolution -> com.github.jaiimageio.a.c.bM:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$GainControl -> com.github.jaiimageio.a.c.bN:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ISOSpeedRatings -> com.github.jaiimageio.a.c.bO:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ImageUniqueID -> com.github.jaiimageio.a.c.bP:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$InteroperabilityIFD -> com.github.jaiimageio.a.c.bQ:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$LightSource -> com.github.jaiimageio.a.c.bR:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$MakerNote -> com.github.jaiimageio.a.c.bS:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$MaxApertureValue -> com.github.jaiimageio.a.c.bT:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$MeteringMode -> com.github.jaiimageio.a.c.bU:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$OECF -> com.github.jaiimageio.a.c.bV:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$PixelXDimension -> com.github.jaiimageio.a.c.bW:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$PixelYDimension -> com.github.jaiimageio.a.c.bX:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$RelatedSoundFile -> com.github.jaiimageio.a.c.bY:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$Saturation -> com.github.jaiimageio.a.c.bZ:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SceneCaptureType -> com.github.jaiimageio.a.c.ca:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SceneType -> com.github.jaiimageio.a.c.cb:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SensingMethod -> com.github.jaiimageio.a.c.cc:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$Sharpness -> com.github.jaiimageio.a.c.cd:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$ShutterSpeedValue -> com.github.jaiimageio.a.c.ce:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SpatialFrequencyResponse -> com.github.jaiimageio.a.c.cf:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SpectralSensitivity -> com.github.jaiimageio.a.c.cg:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubSecTime -> com.github.jaiimageio.a.c.ch:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubSecTimeDigitized -> com.github.jaiimageio.a.c.ci:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubSecTimeOriginal -> com.github.jaiimageio.a.c.cj:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubjectArea -> com.github.jaiimageio.a.c.ck:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubjectDistance -> com.github.jaiimageio.a.c.cl:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubjectDistanceRange -> com.github.jaiimageio.a.c.cm:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$SubjectLocation -> com.github.jaiimageio.a.c.cn:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$UserComment -> com.github.jaiimageio.a.c.co:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.EXIFTIFFTagSet$WhiteBalance -> com.github.jaiimageio.a.c.cp:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet -> com.github.jaiimageio.a.c.cq:
    com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet theInstance -> a
    java.util.ArrayList tags$7865b31 -> b
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet$BadFaxLines -> com.github.jaiimageio.a.c.cr:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet$CleanFaxData -> com.github.jaiimageio.a.c.cs:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.FaxTIFFTagSet$ConsecutiveBadFaxLines -> com.github.jaiimageio.a.c.ct:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet -> com.github.jaiimageio.a.c.cu:
    com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet theInstance -> a
    java.util.ArrayList tags$7865b31 -> b
    void <init>() -> <init>
    com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet getInstance() -> a
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet$GeoAsciiParams -> com.github.jaiimageio.a.c.cv:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet$GeoDoubleParams -> com.github.jaiimageio.a.c.cw:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet$GeoKeyDirectory -> com.github.jaiimageio.a.c.cx:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet$ModelPixelScale -> com.github.jaiimageio.a.c.cy:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet$ModelTiePoint -> com.github.jaiimageio.a.c.cz:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.GeoTIFFTagSet$ModelTransformation -> com.github.jaiimageio.a.c.cA:
    void <init>() -> <init>
com.github.jaiimageio.plugins.tiff.TIFFColorConverter -> com.github.jaiimageio.a.c.cB:
    void <init>() -> <init>
    void fromRGB(float,float,float,float[]) -> a
    void toRGB(float,float,float,float[]) -> b
com.github.jaiimageio.plugins.tiff.TIFFCompressor -> com.github.jaiimageio.a.c.cC:
    com.github.jaiimageio.impl.plugins.tiff.TIFFImageWriter writer$24f15320 -> g
    javax.imageio.metadata.IIOMetadata metadata -> h
    java.lang.String compressionType -> a
    int compressionTagValue -> b
    javax.imageio.stream.ImageOutputStream stream -> i
    void <init>(java.lang.String,int) -> <init>
    java.lang.String getCompressionType() -> c
    int getCompressionTagValue() -> d
    void setStream(javax.imageio.stream.ImageOutputStream) -> a
    void setWriter$371c1ebb(com.github.jaiimageio.impl.plugins.tiff.TIFFImageWriter) -> a
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
    int encode(byte[],int,int,int,int[],int) -> a
    void dispose() -> a
com.github.jaiimageio.plugins.tiff.TIFFDecompressor -> com.github.jaiimageio.a.c.cD:
    javax.imageio.ImageReader reader -> d
    javax.imageio.metadata.IIOMetadata metadata -> e
    int photometricInterpretation -> a
    int compression -> b
    boolean planar -> c
    int samplesPerPixel -> f
    int[] bitsPerSample -> g
    int[] sampleFormat -> t
    int[] extraSamples -> u
    char[] colorMap -> v
    javax.imageio.stream.ImageInputStream stream -> h
    long offset -> i
    int byteCount -> j
    int srcMinX -> k
    int srcMinY -> l
    int srcWidth -> m
    int srcHeight -> n
    int subsampleX -> w
    int subsampleY -> x
    int[] sourceBands -> y
    int[] destinationBands -> z
    java.awt.image.BufferedImage rawImage -> o
    java.awt.image.BufferedImage image -> A
    int dstMinX -> B
    int dstMinY -> C
    int dstWidth -> D
    int dstHeight -> E
    int activeSrcMinX -> p
    int activeSrcMinY -> q
    int activeSrcWidth -> r
    int activeSrcHeight -> s
    com.github.jaiimageio.plugins.tiff.TIFFColorConverter colorConverter -> F
    boolean isBilevel -> G
    boolean isContiguous -> H
    boolean isImageSimple -> I
    boolean adjustBitDepths -> J
    int[][] bitDepthScale -> K
    boolean isFirstBitDepthTable -> L
    boolean planarCache -> M
    int[] destBitsPerSampleCache -> N
    int[] sourceBandsCache -> O
    int[] bitsPerSampleCache -> P
    int[] destinationBandsCache -> Q
    void <init>() -> <init>
    java.awt.image.PixelInterleavedSampleModel createInterleavedSM$138378a3(int,int) -> a
    java.awt.image.ComponentColorModel createComponentCM$757c24e8(java.awt.color.ColorSpace,int,int,boolean,boolean) -> a
    int createMask(int[],int) -> a
    int getDataTypeFromNumBits(int,boolean) -> a
    boolean areIntArraysEqual(int[],int[]) -> a
    int getBitsPerPixel(java.awt.image.SampleModel) -> a
    boolean areSampleSizesEqual(java.awt.image.SampleModel) -> b
    void reformatData(byte[],int,int,short[],int[],int,int) -> a
    javax.imageio.ImageTypeSpecifier getRawImageTypeSpecifier(int,int,int,int[],int[],int[],char[]) -> a
    void setReader(javax.imageio.ImageReader) -> a
    void setMetadata(javax.imageio.metadata.IIOMetadata) -> a
    void setPhotometricInterpretation(int) -> a
    void setCompression(int) -> b
    void setPlanar(boolean) -> a
    void setSamplesPerPixel(int) -> c
    void setBitsPerSample(int[]) -> a
    void setSampleFormat(int[]) -> b
    void setExtraSamples(int[]) -> c
    void setColorMap(char[]) -> a
    void setStream(javax.imageio.stream.ImageInputStream) -> a
    void setOffset(long) -> a
    void setByteCount(int) -> d
    void setSrcMinX(int) -> e
    void setSrcMinY(int) -> f
    void setSrcWidth(int) -> g
    void setSrcHeight(int) -> h
    void setSubsampleX(int) -> q
    void setSubsampleY(int) -> r
    void setSourceBands(int[]) -> d
    void setDestinationBands(int[]) -> e
    void setImage(java.awt.image.BufferedImage) -> a
    void setDstMinX(int) -> i
    void setDstMinY(int) -> j
    void setDstWidth(int) -> k
    void setDstHeight(int) -> l
    void setActiveSrcMinX(int) -> m
    void setActiveSrcMinY(int) -> n
    void setActiveSrcWidth(int) -> o
    void setActiveSrcHeight(int) -> p
    void setColorConverter(com.github.jaiimageio.plugins.tiff.TIFFColorConverter) -> a
    void decodeRaw(byte[],int,int,int) -> a
    void beginDecoding() -> a
    void decode() -> b
com.github.jaiimageio.plugins.tiff.TIFFDirectory -> com.github.jaiimageio.a.c.cE:
    java.util.ArrayList tagSets$7865b31 -> a
    com.github.jaiimageio.plugins.tiff.TIFFTag parentTag -> b
    com.github.jaiimageio.plugins.tiff.TIFFField[] lowFields -> c
    int numLowFields -> d
    java.util.TreeMap highFields$5a983bf5 -> e
    void <init>(com.github.jaiimageio.plugins.tiff.TIFFTagSet[],com.github.jaiimageio.plugins.tiff.TIFFTag) -> <init>
    com.github.jaiimageio.plugins.tiff.TIFFTagSet[] getTagSets() -> f
    void addTagSet(com.github.jaiimageio.plugins.tiff.TIFFTagSet) -> a
    com.github.jaiimageio.plugins.tiff.TIFFTag getParentTag() -> g
    com.github.jaiimageio.plugins.tiff.TIFFTag getTag(int) -> a
    int getNumTIFFFields() -> h
    void addTIFFField(com.github.jaiimageio.plugins.tiff.TIFFField) -> a
    com.github.jaiimageio.plugins.tiff.TIFFField getTIFFField(int) -> b
    void removeTIFFField(int) -> c
    com.github.jaiimageio.plugins.tiff.TIFFField[] getTIFFFields() -> i
    void removeTIFFFields() -> j
    java.lang.Object clone() -> clone
com.github.jaiimageio.plugins.tiff.TIFFField -> com.github.jaiimageio.a.c.cF:
    java.lang.String[] typeNames -> a
    boolean[] isIntegral -> b
    com.github.jaiimageio.plugins.tiff.TIFFTag tag -> c
    int tagNumber -> d
    int type -> e
    int count -> f
    java.lang.Object data -> g
    void <init>() -> <init>
    java.lang.String getAttribute(org.w3c.dom.Node,java.lang.String) -> a
    com.github.jaiimageio.plugins.tiff.TIFFField createFromMetadataNode(com.github.jaiimageio.plugins.tiff.TIFFTagSet,org.w3c.dom.Node) -> a
    void <init>(com.github.jaiimageio.plugins.tiff.TIFFTag,int,int,java.lang.Object) -> <init>
    void <init>(com.github.jaiimageio.plugins.tiff.TIFFTag,int,byte) -> <init>
    void <init>(com.github.jaiimageio.plugins.tiff.TIFFTag,int) -> <init>
    com.github.jaiimageio.plugins.tiff.TIFFTag getTag() -> a
    int getTagNumber() -> b
    int getType() -> c
    java.lang.String getTypeName(int) -> a
    java.lang.Object createArrayForType(int,int) -> a
    com.github.jaiimageio.impl.plugins.tiff.TIFFFieldNode getAsNativeNode$2dceec8e() -> d
    boolean isIntegral() -> e
    int getCount() -> f
    java.lang.Object getData() -> g
    byte[] getAsBytes() -> h
    char[] getAsChars() -> i
    int[] getAsInts() -> j
    long[] getAsLongs() -> k
    int getAsInt(int) -> b
    long getAsLong(int) -> c
    float getAsFloat(int) -> d
    java.lang.String getAsString(int) -> e
    int[] getAsSRational(int) -> h
    long[] getAsRational(int) -> f
    java.lang.String getValueAsString(int) -> g
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.TIFFImageReadParam -> com.github.jaiimageio.a.c.cG:
    java.util.ArrayList allowedTagSets$7865b31 -> a
    com.github.jaiimageio.plugins.tiff.TIFFDecompressor decompressor -> b
    com.github.jaiimageio.plugins.tiff.TIFFColorConverter colorConverter -> c
    void <init>() -> <init>
    void addAllowedTagSet(com.github.jaiimageio.plugins.tiff.TIFFTagSet) -> a
    java.util.ArrayList getAllowedTagSets$5679c1ce() -> a
    void setTIFFDecompressor(com.github.jaiimageio.plugins.tiff.TIFFDecompressor) -> a
    com.github.jaiimageio.plugins.tiff.TIFFDecompressor getTIFFDecompressor() -> b
    void setColorConverter(com.github.jaiimageio.plugins.tiff.TIFFColorConverter) -> a
    com.github.jaiimageio.plugins.tiff.TIFFColorConverter getColorConverter() -> c
com.github.jaiimageio.plugins.tiff.TIFFImageWriteParam -> com.github.jaiimageio.a.c.cH:
    void <init>(java.util.Locale) -> <init>
    boolean isCompressionLossless() -> isCompressionLossless
    com.github.jaiimageio.plugins.tiff.TIFFCompressor getTIFFCompressor() -> a
    int getPhotometricInterpretation() -> b
com.github.jaiimageio.plugins.tiff.TIFFTag -> com.github.jaiimageio.a.c.cI:
    int[] sizeOfType -> c
    int number -> a
    java.lang.String name -> b
    int dataTypes -> d
    com.github.jaiimageio.plugins.tiff.TIFFTagSet tagSet -> e
    java.util.HashMap valueNames$5a983bf5 -> f
    void <init>(java.lang.String,int,int,com.github.jaiimageio.plugins.tiff.TIFFTagSet) -> <init>
    void <init>(java.lang.String,int,int) -> <init>
    int getSizeOfType(int) -> a
    java.lang.String getName() -> a
    int getNumber() -> b
    boolean isDataTypeOK(int) -> b
    com.github.jaiimageio.plugins.tiff.TIFFTagSet getTagSet() -> c
    boolean isIFDPointer() -> d
    boolean hasValueNames() -> e
    void addValueName(int,java.lang.String) -> a
    java.lang.String getValueName(int) -> c
    void <clinit>() -> <clinit>
com.github.jaiimageio.plugins.tiff.TIFFTagSet -> com.github.jaiimageio.a.c.cJ:
    java.util.TreeMap allowedTagsByNumber$65e4b368 -> a
    java.util.TreeMap allowedTagsByName$65e4b368 -> b
    void <init>() -> <init>
    void <init>(java.util.ArrayList) -> <init>
    com.github.jaiimageio.plugins.tiff.TIFFTag getTag(int) -> a
    com.github.jaiimageio.plugins.tiff.TIFFTag getTag(java.lang.String) -> a
    java.util.SortedSet getTagNumbers() -> b
com.github.jaiimageio.stream.FileChannelImageInputStream -> com.github.jaiimageio.b.a:
    java.nio.channels.FileChannel channel -> a
    java.nio.MappedByteBuffer mappedBuffer -> b
    long mappedPos -> c
    long mappedUpperBound -> d
    void <init>(java.nio.channels.FileChannel) -> <init>
    java.nio.MappedByteBuffer getMappedBuffer(int) -> a
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    void readFully(char[],int,int) -> readFully
    void readFully(short[],int,int) -> readFully
    void readFully(int[],int,int) -> readFully
    void readFully(long[],int,int) -> readFully
    void readFully(float[],int,int) -> readFully
    void readFully(double[],int,int) -> readFully
    long length() -> length
    void seek(long) -> seek
    void setByteOrder(java.nio.ByteOrder) -> setByteOrder
com.github.jaiimageio.stream.FileChannelImageOutputStream -> com.github.jaiimageio.b.b:
    java.nio.channels.FileChannel channel -> a
    java.nio.ByteBuffer byteBuffer -> b
    com.github.jaiimageio.stream.FileChannelImageInputStream readStream$61bb830 -> c
    void <init>(java.nio.channels.FileChannel) -> <init>
    com.github.jaiimageio.stream.FileChannelImageInputStream getImageInputStream$19496c51() -> a
    void flushBuffer() -> b
    int read() -> read
    int read(byte[],int,int) -> read
    void write(int) -> write
    void write(byte[],int,int) -> write
    void readFully(char[],int,int) -> readFully
    void readFully(short[],int,int) -> readFully
    void readFully(int[],int,int) -> readFully
    void readFully(long[],int,int) -> readFully
    void readFully(float[],int,int) -> readFully
    void readFully(double[],int,int) -> readFully
    void writeChars(char[],int,int) -> writeChars
    void writeShorts(short[],int,int) -> writeShorts
    void writeInts(int[],int,int) -> writeInts
    void writeLongs(long[],int,int) -> writeLongs
    void writeFloats(float[],int,int) -> writeFloats
    void writeDoubles(double[],int,int) -> writeDoubles
    void close() -> close
    long length() -> length
    void seek(long) -> seek
    void setByteOrder(java.nio.ByteOrder) -> setByteOrder
com.github.jaiimageio.stream.RawImageInputStream -> com.github.jaiimageio.b.c:
    void setByteOrder(java.nio.ByteOrder) -> setByteOrder
    java.nio.ByteOrder getByteOrder() -> getByteOrder
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void readBytes(javax.imageio.stream.IIOByteBuffer,int) -> readBytes
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    int readUnsignedShort() -> readUnsignedShort
    char readChar() -> readChar
    int readInt() -> readInt
    long readUnsignedInt() -> readUnsignedInt
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
    void readFully(byte[],int,int) -> readFully
    void readFully(byte[]) -> readFully
    void readFully(short[],int,int) -> readFully
    void readFully(char[],int,int) -> readFully
    void readFully(int[],int,int) -> readFully
    void readFully(long[],int,int) -> readFully
    void readFully(float[],int,int) -> readFully
    void readFully(double[],int,int) -> readFully
    long getStreamPosition() -> getStreamPosition
    int getBitOffset() -> getBitOffset
    void setBitOffset(int) -> setBitOffset
    int readBit() -> readBit
    long readBits(int) -> readBits
    long length() -> length
    int skipBytes(int) -> skipBytes
    long skipBytes(long) -> skipBytes
    void seek(long) -> seek
    void mark() -> mark
    void reset() -> reset
    void flushBefore(long) -> flushBefore
    void flush() -> flush
    long getFlushedPosition() -> getFlushedPosition
    boolean isCached() -> isCached
    boolean isCachedMemory() -> isCachedMemory
    boolean isCachedFile() -> isCachedFile
    void close() -> close
    void <clinit>() -> <clinit>
com.google.zxing.BarcodeFormat -> com.google.zxing.a:
    com.google.zxing.BarcodeFormat AZTEC -> a
    com.google.zxing.BarcodeFormat CODABAR -> b
    com.google.zxing.BarcodeFormat CODE_39 -> c
    com.google.zxing.BarcodeFormat CODE_93 -> d
    com.google.zxing.BarcodeFormat CODE_128 -> e
    com.google.zxing.BarcodeFormat DATA_MATRIX -> f
    com.google.zxing.BarcodeFormat EAN_8 -> g
    com.google.zxing.BarcodeFormat EAN_13 -> h
    com.google.zxing.BarcodeFormat ITF -> i
    com.google.zxing.BarcodeFormat MAXICODE -> j
    com.google.zxing.BarcodeFormat PDF_417 -> k
    com.google.zxing.BarcodeFormat QR_CODE -> l
    com.google.zxing.BarcodeFormat RSS_14 -> m
    com.google.zxing.BarcodeFormat RSS_EXPANDED -> n
    com.google.zxing.BarcodeFormat UPC_A -> o
    com.google.zxing.BarcodeFormat UPC_E -> p
    com.google.zxing.BarcodeFormat UPC_EAN_EXTENSION -> q
    com.google.zxing.BarcodeFormat[] $VALUES -> r
    com.google.zxing.BarcodeFormat[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.Binarizer -> com.google.zxing.b:
    com.google.zxing.LuminanceSource source -> source
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    com.google.zxing.LuminanceSource getLuminanceSource() -> getLuminanceSource
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> getBlackRow
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> createBinarizer
    int getWidth() -> getWidth
    int getHeight() -> getHeight
com.google.zxing.BinaryBitmap -> com.google.zxing.BinaryBitmap:
    com.google.zxing.Binarizer binarizer -> binarizer
    com.google.zxing.common.BitMatrix matrix -> matrix
    void <init>(com.google.zxing.Binarizer) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> getBlackRow
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    boolean isCropSupported() -> isCropSupported
    com.google.zxing.BinaryBitmap crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    com.google.zxing.BinaryBitmap rotateCounterClockwise() -> rotateCounterClockwise
    com.google.zxing.BinaryBitmap rotateCounterClockwise45() -> rotateCounterClockwise45
    java.lang.String toString() -> toString
com.google.zxing.ChecksumException -> com.google.zxing.c:
    com.google.zxing.ChecksumException INSTANCE -> c
    void <init>() -> <init>
    com.google.zxing.ChecksumException getChecksumInstance() -> a
    void <clinit>() -> <clinit>
com.google.zxing.DecodeHintType -> com.google.zxing.d:
    com.google.zxing.DecodeHintType OTHER -> l
    com.google.zxing.DecodeHintType PURE_BARCODE -> a
    com.google.zxing.DecodeHintType POSSIBLE_FORMATS -> b
    com.google.zxing.DecodeHintType TRY_HARDER -> c
    com.google.zxing.DecodeHintType CHARACTER_SET -> d
    com.google.zxing.DecodeHintType ALLOWED_LENGTHS -> e
    com.google.zxing.DecodeHintType ASSUME_CODE_39_CHECK_DIGIT -> f
    com.google.zxing.DecodeHintType ASSUME_GS1 -> g
    com.google.zxing.DecodeHintType RETURN_CODABAR_START_END -> h
    com.google.zxing.DecodeHintType NEED_RESULT_POINT_CALLBACK -> i
    com.google.zxing.DecodeHintType ALLOWED_EAN_EXTENSIONS -> j
    com.google.zxing.DecodeHintType ALSO_INVERTED -> k
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.Dimension -> com.google.zxing.e:
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.zxing.EncodeHintType -> com.google.zxing.EncodeHintType:
    com.google.zxing.EncodeHintType ERROR_CORRECTION -> ERROR_CORRECTION
    com.google.zxing.EncodeHintType CHARACTER_SET -> CHARACTER_SET
    com.google.zxing.EncodeHintType DATA_MATRIX_SHAPE -> DATA_MATRIX_SHAPE
    com.google.zxing.EncodeHintType DATA_MATRIX_COMPACT -> DATA_MATRIX_COMPACT
    com.google.zxing.EncodeHintType MIN_SIZE -> MIN_SIZE
    com.google.zxing.EncodeHintType MAX_SIZE -> MAX_SIZE
    com.google.zxing.EncodeHintType MARGIN -> MARGIN
    com.google.zxing.EncodeHintType PDF417_COMPACT -> PDF417_COMPACT
    com.google.zxing.EncodeHintType PDF417_COMPACTION -> PDF417_COMPACTION
    com.google.zxing.EncodeHintType PDF417_DIMENSIONS -> PDF417_DIMENSIONS
    com.google.zxing.EncodeHintType PDF417_AUTO_ECI -> PDF417_AUTO_ECI
    com.google.zxing.EncodeHintType AZTEC_LAYERS -> AZTEC_LAYERS
    com.google.zxing.EncodeHintType QR_VERSION -> QR_VERSION
    com.google.zxing.EncodeHintType QR_MASK_PATTERN -> QR_MASK_PATTERN
    com.google.zxing.EncodeHintType QR_COMPACT -> QR_COMPACT
    com.google.zxing.EncodeHintType GS1_FORMAT -> GS1_FORMAT
    com.google.zxing.EncodeHintType FORCE_CODE_SET -> FORCE_CODE_SET
    com.google.zxing.EncodeHintType FORCE_C40 -> FORCE_C40
    com.google.zxing.EncodeHintType CODE128_COMPACT -> CODE128_COMPACT
    com.google.zxing.EncodeHintType[] $VALUES -> $VALUES
    com.google.zxing.EncodeHintType[] values() -> values
    com.google.zxing.EncodeHintType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.FormatException -> com.google.zxing.f:
    com.google.zxing.FormatException INSTANCE -> c
    void <init>() -> <init>
    void <init>(com.google.zxing.common.reedsolomon.ReedSolomonException) -> <init>
    com.google.zxing.FormatException getFormatInstance() -> a
    com.google.zxing.FormatException getFormatInstance$67938040(com.google.zxing.common.reedsolomon.ReedSolomonException) -> a
    void <clinit>() -> <clinit>
com.google.zxing.InvertedLuminanceSource -> com.google.zxing.g:
    com.google.zxing.LuminanceSource delegate -> a
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    com.google.zxing.LuminanceSource crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    com.google.zxing.LuminanceSource invert() -> invert
    com.google.zxing.LuminanceSource rotateCounterClockwise() -> rotateCounterClockwise
    com.google.zxing.LuminanceSource rotateCounterClockwise45() -> rotateCounterClockwise45
com.google.zxing.LuminanceSource -> com.google.zxing.LuminanceSource:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    boolean isCropSupported() -> isCropSupported
    com.google.zxing.LuminanceSource crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    com.google.zxing.LuminanceSource invert() -> invert
    com.google.zxing.LuminanceSource rotateCounterClockwise() -> rotateCounterClockwise
    com.google.zxing.LuminanceSource rotateCounterClockwise45() -> rotateCounterClockwise45
    java.lang.String toString() -> toString
com.google.zxing.MultiFormatReader -> com.google.zxing.MultiFormatReader:
    com.google.zxing.Reader[] EMPTY_READER_ARRAY -> EMPTY_READER_ARRAY
    java.util.Map hints -> hints
    com.google.zxing.Reader[] readers -> readers
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap) -> decode
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    com.google.zxing.Result decodeWithState(com.google.zxing.BinaryBitmap) -> decodeWithState
    void setHints(java.util.Map) -> setHints
    void reset() -> reset
    com.google.zxing.Result decodeInternal(com.google.zxing.BinaryBitmap) -> decodeInternal
    void <clinit>() -> <clinit>
com.google.zxing.MultiFormatWriter -> com.google.zxing.MultiFormatWriter:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int) -> encode
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.MultiFormatWriter$1 -> com.google.zxing.h:
    int[] $SwitchMap$com$google$zxing$BarcodeFormat -> a
    void <clinit>() -> <clinit>
com.google.zxing.NotFoundException -> com.google.zxing.i:
    com.google.zxing.NotFoundException INSTANCE -> c
    void <init>() -> <init>
    com.google.zxing.NotFoundException getNotFoundInstance() -> a
    void <clinit>() -> <clinit>
com.google.zxing.Reader -> com.google.zxing.j:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
com.google.zxing.ReaderException -> com.google.zxing.k:
    boolean isStackTrace -> a
    java.lang.StackTraceElement[] NO_TRACE -> b
    void <init>() -> <init>
    void <init>(com.google.zxing.common.reedsolomon.ReedSolomonException) -> <init>
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    void <clinit>() -> <clinit>
com.google.zxing.Result -> com.google.zxing.l:
    java.lang.String text -> a
    byte[] rawBytes -> b
    com.google.zxing.ResultPoint[] resultPoints -> c
    com.google.zxing.BarcodeFormat format -> d
    java.util.Map resultMetadata -> e
    void <init>(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat) -> <init>
    void <init>(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat,byte) -> <init>
    void <init>(java.lang.String,byte[],com.google.zxing.ResultPoint[],com.google.zxing.BarcodeFormat,char) -> <init>
    java.lang.String getText() -> a
    byte[] getRawBytes() -> b
    com.google.zxing.ResultPoint[] getResultPoints() -> c
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> d
    java.util.Map getResultMetadata() -> e
    void putMetadata(com.google.zxing.ResultMetadataType,java.lang.Object) -> a
    void putAllMetadata(java.util.Map) -> a
    void addResultPoints(com.google.zxing.ResultPoint[]) -> a
    java.lang.String toString() -> toString
com.google.zxing.ResultMetadataType -> com.google.zxing.ResultMetadataType:
    com.google.zxing.ResultMetadataType OTHER -> OTHER
    com.google.zxing.ResultMetadataType ORIENTATION -> ORIENTATION
    com.google.zxing.ResultMetadataType BYTE_SEGMENTS -> BYTE_SEGMENTS
    com.google.zxing.ResultMetadataType ERROR_CORRECTION_LEVEL -> ERROR_CORRECTION_LEVEL
    com.google.zxing.ResultMetadataType ERRORS_CORRECTED -> ERRORS_CORRECTED
    com.google.zxing.ResultMetadataType ERASURES_CORRECTED -> ERASURES_CORRECTED
    com.google.zxing.ResultMetadataType ISSUE_NUMBER -> ISSUE_NUMBER
    com.google.zxing.ResultMetadataType SUGGESTED_PRICE -> SUGGESTED_PRICE
    com.google.zxing.ResultMetadataType POSSIBLE_COUNTRY -> POSSIBLE_COUNTRY
    com.google.zxing.ResultMetadataType UPC_EAN_EXTENSION -> UPC_EAN_EXTENSION
    com.google.zxing.ResultMetadataType PDF417_EXTRA_METADATA -> PDF417_EXTRA_METADATA
    com.google.zxing.ResultMetadataType STRUCTURED_APPEND_SEQUENCE -> STRUCTURED_APPEND_SEQUENCE
    com.google.zxing.ResultMetadataType STRUCTURED_APPEND_PARITY -> STRUCTURED_APPEND_PARITY
    com.google.zxing.ResultMetadataType SYMBOLOGY_IDENTIFIER -> SYMBOLOGY_IDENTIFIER
    com.google.zxing.ResultMetadataType[] $VALUES -> $VALUES
    com.google.zxing.ResultMetadataType[] values() -> values
    com.google.zxing.ResultMetadataType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.ResultPoint -> com.google.zxing.m:
    float x -> a
    float y -> b
    void <init>(float,float) -> <init>
    float getX() -> a
    float getY() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void orderBestPatterns$3215b9f1(com.google.zxing.qrcode.detector.FinderPattern[]) -> a
    float distance$6365da43(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> a
com.google.zxing.ResultPointCallback -> com.google.zxing.n:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    int length() -> a
    char charAt(int) -> a
    java.lang.CharSequence subSequence(int,int) -> a
    boolean isECI(int) -> b
    int getECIValue(int) -> c
com.google.zxing.WriterException -> com.google.zxing.WriterException:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
com.google.zxing.aztec.AztecDetectorResult -> com.google.zxing.a.a:
    boolean compact -> a
    int nbDatablocks -> b
    int nbLayers -> c
    int errorsCorrected -> d
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[],boolean,int,int,int) -> <init>
    int getNbLayers() -> a
    int getNbDatablocks() -> b
    boolean isCompact() -> c
    int getErrorsCorrected() -> d
com.google.zxing.aztec.AztecReader -> com.google.zxing.a.b:
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
com.google.zxing.aztec.decoder.Decoder -> com.google.zxing.a.a.a:
    java.lang.String[] UPPER_TABLE -> a
    java.lang.String[] LOWER_TABLE -> b
    java.lang.String[] MIXED_TABLE -> c
    java.lang.String[] PUNCT_TABLE -> d
    java.lang.String[] DIGIT_TABLE -> e
    java.nio.charset.Charset DEFAULT_ENCODING -> f
    com.google.zxing.aztec.AztecDetectorResult ddata -> g
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(com.google.zxing.aztec.AztecDetectorResult) -> a
    java.lang.String getEncodedData(boolean[]) -> a
    com.google.zxing.aztec.decoder.Decoder$CorrectedBitsResult correctBits(boolean[]) -> b
    int readCode(boolean[],int,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.aztec.decoder.Decoder$1 -> com.google.zxing.a.a.b:
    int[] $SwitchMap$com$google$zxing$aztec$decoder$Decoder$Table -> a
    void <clinit>() -> <clinit>
com.google.zxing.aztec.decoder.Decoder$CorrectedBitsResult -> com.google.zxing.a.a.c:
    boolean[] correctBits -> a
    int errorsCorrected -> b
    int ecLevel -> c
    void <init>(boolean[],int,int) -> <init>
    boolean[] access$000(com.google.zxing.aztec.decoder.Decoder$CorrectedBitsResult) -> a
    int access$100(com.google.zxing.aztec.decoder.Decoder$CorrectedBitsResult) -> b
    int access$200(com.google.zxing.aztec.decoder.Decoder$CorrectedBitsResult) -> c
com.google.zxing.aztec.decoder.Decoder$Table -> com.google.zxing.a.a.d:
    int UPPER$2679db95 -> a
    int LOWER$2679db95 -> b
    int MIXED$2679db95 -> c
    int DIGIT$2679db95 -> d
    int PUNCT$2679db95 -> e
    int BINARY$2679db95 -> f
    int[] $VALUES$171a8b50 -> g
    int[] values$17d9718f() -> a
    void <clinit>() -> <clinit>
com.google.zxing.aztec.detector.Detector -> com.google.zxing.a.b.a:
    int[] EXPECTED_CORNER_BITS -> a
    com.google.zxing.common.BitMatrix image -> b
    boolean compact -> c
    int nbLayers -> d
    int nbDataBlocks -> e
    int nbCenterLayers -> f
    int shift -> g
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.aztec.AztecDetectorResult detect(boolean) -> a
    com.google.zxing.aztec.detector.Detector$CorrectedParameter getCorrectedParameterData(long,boolean) -> a
    com.google.zxing.aztec.detector.Detector$Point getMatrixCenter() -> a
    int sampleLine(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> a
    int getColor(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> a
    com.google.zxing.aztec.detector.Detector$Point getFirstDifferent(com.google.zxing.aztec.detector.Detector$Point,boolean,int,int) -> a
    com.google.zxing.ResultPoint[] expandSquare(com.google.zxing.ResultPoint[],int,int) -> a
    boolean isValid(int,int) -> a
    boolean isValid(com.google.zxing.ResultPoint) -> a
    float distance(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> b
    float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    int getDimension() -> b
    void <clinit>() -> <clinit>
com.google.zxing.aztec.detector.Detector$CorrectedParameter -> com.google.zxing.a.b.b:
    int data -> a
    int errorsCorrected -> b
    void <init>(int,int) -> <init>
    int getData() -> a
    int getErrorsCorrected() -> b
com.google.zxing.aztec.detector.Detector$Point -> com.google.zxing.a.b.c:
    int x -> a
    int y -> b
    com.google.zxing.ResultPoint toResultPoint() -> a
    void <init>(int,int) -> <init>
    int getX() -> b
    int getY() -> c
    java.lang.String toString() -> toString
com.google.zxing.aztec.encoder.BinaryShiftToken -> com.google.zxing.a.c.a:
    int binaryShiftStart -> b
    int binaryShiftByteCount -> c
    void <init>(com.google.zxing.aztec.encoder.Token,int,int) -> <init>
    void appendTo(com.google.zxing.common.BitArray,byte[]) -> a
    java.lang.String toString() -> toString
com.google.zxing.aztec.encoder.Encoder -> com.google.zxing.a.c.b:
    int[] WORD_SIZE -> a
    com.google.zxing.pdf417.encoder.Dimensions encode$46f594e(java.lang.String,int,int,java.nio.charset.Charset) -> a
    void drawBullsEye(com.google.zxing.common.BitMatrix,int,int) -> a
    com.google.zxing.common.BitArray generateCheckWords(com.google.zxing.common.BitArray,int,int) -> a
    int[] bitsToWords(com.google.zxing.common.BitArray,int,int) -> b
    com.google.zxing.common.reedsolomon.GenericGF getGF(int) -> a
    com.google.zxing.common.BitArray stuffBits(com.google.zxing.common.BitArray,int) -> a
    int totalBitsInLayer(int,boolean) -> a
    void <clinit>() -> <clinit>
com.google.zxing.aztec.encoder.HighLevelEncoder -> com.google.zxing.a.c.c:
    java.lang.String[] MODE_NAMES -> a
    int[][] LATCH_TABLE -> b
    int[][] CHAR_MAP -> d
    int[][] SHIFT_TABLE -> c
    byte[] text -> e
    java.nio.charset.Charset charset -> f
    void <init>(byte[],java.nio.charset.Charset) -> <init>
    com.google.zxing.common.BitArray encode() -> a
    java.util.LinkedList simplifyStates$5aff0477(java.util.LinkedList) -> a
    void <clinit>() -> <clinit>
com.google.zxing.aztec.encoder.HighLevelEncoder$1 -> com.google.zxing.a.c.d:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.aztec.encoder.SimpleToken -> com.google.zxing.a.c.e:
    short value -> b
    short bitCount -> c
    void <init>(com.google.zxing.aztec.encoder.Token,int,int) -> <init>
    void appendTo(com.google.zxing.common.BitArray,byte[]) -> a
    java.lang.String toString() -> toString
com.google.zxing.aztec.encoder.State -> com.google.zxing.a.c.f:
    com.google.zxing.aztec.encoder.State INITIAL_STATE -> a
    int mode -> b
    com.google.zxing.aztec.encoder.Token token -> c
    int binaryShiftByteCount -> d
    int bitCount -> e
    int binaryShiftCost -> f
    void <init>(com.google.zxing.aztec.encoder.Token,int,int,int) -> <init>
    int getMode() -> a
    int getBinaryShiftByteCount() -> b
    int getBitCount() -> c
    com.google.zxing.aztec.encoder.State appendFLGn(int) -> a
    com.google.zxing.aztec.encoder.State latchAndAppend(int,int) -> a
    com.google.zxing.aztec.encoder.State shiftAndAppend(int,int) -> b
    com.google.zxing.aztec.encoder.State addBinaryShiftChar(int) -> b
    com.google.zxing.aztec.encoder.State endBinaryShift(int) -> c
    boolean isBetterThanOrEqualTo(com.google.zxing.aztec.encoder.State) -> a
    com.google.zxing.common.BitArray toBitArray(byte[]) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.zxing.aztec.encoder.Token -> com.google.zxing.a.c.g:
    com.google.zxing.aztec.encoder.SimpleToken EMPTY$6d0f8e72 -> a
    com.google.zxing.aztec.encoder.Token previous -> b
    void <init>(com.google.zxing.aztec.encoder.Token) -> <init>
    com.google.zxing.aztec.encoder.Token getPrevious() -> a
    com.google.zxing.aztec.encoder.SimpleToken add$48c2986d(int,int) -> a
    com.google.zxing.aztec.encoder.BinaryShiftToken addBinaryShift$48c2986d(int,int) -> b
    void appendTo(com.google.zxing.common.BitArray,byte[]) -> a
    void <clinit>() -> <clinit>
com.google.zxing.client.j2se.BufferedImageLuminanceSource -> com.google.zxing.b.a.a:
    java.awt.image.BufferedImage image -> a
    int left -> b
    int top -> c
    void <init>(java.awt.image.BufferedImage) -> <init>
    void <init>(java.awt.image.BufferedImage,int,int,int,int) -> <init>
    byte[] getRow(int,byte[]) -> getRow
    byte[] getMatrix() -> getMatrix
    boolean isCropSupported() -> isCropSupported
    com.google.zxing.LuminanceSource crop(int,int,int,int) -> crop
    boolean isRotateSupported() -> isRotateSupported
    com.google.zxing.LuminanceSource rotateCounterClockwise() -> rotateCounterClockwise
    com.google.zxing.LuminanceSource rotateCounterClockwise45() -> rotateCounterClockwise45
com.google.zxing.common.BitArray -> com.google.zxing.common.a:
    int[] EMPTY_BITS -> a
    int[] bits -> b
    int size -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int[],int) -> <init>
    int getSize() -> a
    int getSizeInBytes() -> b
    void ensureCapacity(int) -> e
    boolean get(int) -> a
    void set(int) -> b
    int getNextSet(int) -> c
    int getNextUnset(int) -> d
    void setBulk(int,int) -> a
    void clear() -> c
    boolean isRange$486912e3(int,int) -> b
    void appendBit(boolean) -> a
    void appendBits(int,int) -> c
    void appendBitArray(com.google.zxing.common.BitArray) -> a
    void xor(com.google.zxing.common.BitArray) -> b
    void toBytes$101cc16b(int,byte[],int) -> a
    int[] getBitArray() -> d
    void reverse() -> e
    int[] makeArray(int) -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
com.google.zxing.common.BitMatrix -> com.google.zxing.common.BitMatrix:
    int width -> width
    int height -> height
    int rowSize -> rowSize
    int[] bits -> bits
    void <init>(int) -> <init>
    void <init>(int,int) -> <init>
    void <init>(int,int,int,int[]) -> <init>
    com.google.zxing.common.BitMatrix parse(boolean[][]) -> parse
    com.google.zxing.common.BitMatrix parse(java.lang.String,java.lang.String,java.lang.String) -> parse
    boolean get(int,int) -> get
    void set(int,int) -> set
    void unset(int,int) -> unset
    void flip(int,int) -> flip
    void flip() -> flip
    void xor(com.google.zxing.common.BitMatrix) -> xor
    void clear() -> clear
    void setRegion(int,int,int,int) -> setRegion
    com.google.zxing.common.BitArray getRow(int,com.google.zxing.common.BitArray) -> getRow
    void setRow(int,com.google.zxing.common.BitArray) -> setRow
    void rotate(int) -> rotate
    void rotate180() -> rotate180
    void rotate90() -> rotate90
    int[] getEnclosingRectangle() -> getEnclosingRectangle
    int[] getTopLeftOnBit() -> getTopLeftOnBit
    int[] getBottomRightOnBit() -> getBottomRightOnBit
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getRowSize() -> getRowSize
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(java.lang.String,java.lang.String) -> toString
    java.lang.String toString(java.lang.String,java.lang.String,java.lang.String) -> toString
    java.lang.String buildToString(java.lang.String,java.lang.String,java.lang.String) -> buildToString
    com.google.zxing.common.BitMatrix clone() -> clone
    java.lang.Object clone() -> clone
com.google.zxing.common.CharacterSetECI -> com.google.zxing.common.b:
    com.google.zxing.common.CharacterSetECI Cp437 -> a
    com.google.zxing.common.CharacterSetECI ISO8859_1 -> b
    com.google.zxing.common.CharacterSetECI ISO8859_2 -> c
    com.google.zxing.common.CharacterSetECI ISO8859_3 -> d
    com.google.zxing.common.CharacterSetECI ISO8859_4 -> e
    com.google.zxing.common.CharacterSetECI ISO8859_5 -> f
    com.google.zxing.common.CharacterSetECI ISO8859_6 -> g
    com.google.zxing.common.CharacterSetECI ISO8859_7 -> h
    com.google.zxing.common.CharacterSetECI ISO8859_8 -> i
    com.google.zxing.common.CharacterSetECI ISO8859_9 -> j
    com.google.zxing.common.CharacterSetECI ISO8859_10 -> k
    com.google.zxing.common.CharacterSetECI ISO8859_11 -> l
    com.google.zxing.common.CharacterSetECI ISO8859_13 -> m
    com.google.zxing.common.CharacterSetECI ISO8859_14 -> n
    com.google.zxing.common.CharacterSetECI ISO8859_15 -> o
    com.google.zxing.common.CharacterSetECI ISO8859_16 -> p
    com.google.zxing.common.CharacterSetECI SJIS -> q
    com.google.zxing.common.CharacterSetECI Cp1250 -> r
    com.google.zxing.common.CharacterSetECI Cp1251 -> s
    com.google.zxing.common.CharacterSetECI Cp1252 -> t
    com.google.zxing.common.CharacterSetECI Cp1256 -> u
    com.google.zxing.common.CharacterSetECI UnicodeBigUnmarked -> v
    com.google.zxing.common.CharacterSetECI UTF8 -> w
    com.google.zxing.common.CharacterSetECI ASCII -> x
    com.google.zxing.common.CharacterSetECI Big5 -> y
    com.google.zxing.common.CharacterSetECI GB18030 -> z
    com.google.zxing.common.CharacterSetECI EUC_KR -> A
    java.util.HashMap VALUE_TO_ECI$5a983bf5 -> B
    java.util.HashMap NAME_TO_ECI$5a983bf5 -> C
    int[] values -> D
    java.lang.String[] otherEncodingNames -> E
    com.google.zxing.common.CharacterSetECI[] $VALUES -> F
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String[]) -> <init>
    void <init>(java.lang.String,int,int[],java.lang.String[]) -> <init>
    int getValue() -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECI(java.nio.charset.Charset) -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByValue(int) -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByName(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.zxing.common.DecoderResult -> com.google.zxing.common.c:
    byte[] rawBytes -> a
    int numBits -> b
    java.lang.String text -> c
    java.util.ArrayList byteSegments$7865b31 -> d
    java.lang.String ecLevel -> e
    java.lang.Integer errorsCorrected -> f
    java.lang.Integer erasures -> g
    java.lang.Object other -> h
    int structuredAppendParity -> i
    int structuredAppendSequenceNumber -> j
    int symbologyModifier -> k
    void <init>(byte[],java.lang.String,java.lang.String) -> <init>
    void <init>(byte[],java.lang.String,java.util.ArrayList,int) -> <init>
    void <init>(byte[],java.lang.String,java.util.ArrayList,java.lang.String,int,int,int) -> <init>
    byte[] getRawBytes() -> a
    int getNumBits() -> b
    void setNumBits(int) -> a
    java.lang.String getText() -> c
    java.util.ArrayList getByteSegments$5679c1ce() -> d
    java.lang.String getECLevel() -> e
    java.lang.Integer getErrorsCorrected() -> f
    void setErrorsCorrected(java.lang.Integer) -> a
    java.lang.Integer getErasures() -> g
    void setErasures(java.lang.Integer) -> b
    java.lang.Object getOther() -> h
    void setOther(java.lang.Object) -> a
    boolean hasStructuredAppend() -> i
    int getStructuredAppendParity() -> j
    int getStructuredAppendSequenceNumber() -> k
    int getSymbologyModifier() -> l
com.google.zxing.common.DefaultGridSampler -> com.google.zxing.common.d:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> a
com.google.zxing.common.DetectorResult -> com.google.zxing.common.e:
    com.google.zxing.common.BitMatrix bits -> a
    com.google.zxing.ResultPoint[] points -> b
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint[]) -> <init>
    com.google.zxing.common.BitMatrix getBits() -> e
    com.google.zxing.ResultPoint[] getPoints() -> f
com.google.zxing.common.ECIEncoderSet -> com.google.zxing.common.f:
    java.util.ArrayList ENCODERS$7865b31 -> a
    java.nio.charset.CharsetEncoder[] encoders -> b
    int priorityEncoderIndex -> c
    boolean $assertionsDisabled -> d
    void <init>(java.lang.String,java.nio.charset.Charset,int) -> <init>
    int length() -> a
    java.nio.charset.Charset getCharset(int) -> a
    int getECIValue(int) -> b
    int getPriorityEncoderIndex() -> b
    boolean canEncode(char,int) -> a
    byte[] encode(char,int) -> b
    byte[] encode(java.lang.String,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.common.ECIStringBuilder -> com.google.zxing.common.g:
    java.lang.StringBuilder currentBytes -> a
    java.lang.StringBuilder result -> b
    java.nio.charset.Charset currentCharset -> c
    void <init>() -> <init>
    void <init>(int) -> <init>
    void append(char) -> a
    void append(byte) -> a
    void append(java.lang.String) -> a
    void append(int) -> a
    void appendECI(int) -> b
    void encodeCurrentBytesIfAny() -> b
    void appendCharacters(java.lang.StringBuilder) -> a
    boolean isEmpty() -> a
    java.lang.String toString() -> toString
com.google.zxing.common.GlobalHistogramBinarizer -> com.google.zxing.common.h:
    int LUMINANCE_BITS -> LUMINANCE_BITS
    int LUMINANCE_SHIFT -> LUMINANCE_SHIFT
    int LUMINANCE_BUCKETS -> LUMINANCE_BUCKETS
    byte[] EMPTY -> EMPTY
    byte[] luminances -> luminances
    int[] buckets -> buckets
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> getBlackRow
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> createBinarizer
    void initArrays(int) -> initArrays
    int estimateBlackPoint(int[]) -> estimateBlackPoint
    void <clinit>() -> <clinit>
com.google.zxing.common.GridSampler -> com.google.zxing.common.i:
    com.google.zxing.common.DefaultGridSampler gridSampler$3abd6d8a -> a
    void <init>() -> <init>
    com.google.zxing.common.DefaultGridSampler getInstance$3c5bb5eb() -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> a
    void <clinit>() -> <clinit>
com.google.zxing.common.HybridBinarizer -> com.google.zxing.common.HybridBinarizer:
    int BLOCK_SIZE_POWER -> BLOCK_SIZE_POWER
    int BLOCK_SIZE -> BLOCK_SIZE
    int BLOCK_SIZE_MASK -> BLOCK_SIZE_MASK
    int MINIMUM_DIMENSION -> MINIMUM_DIMENSION
    int MIN_DYNAMIC_RANGE -> MIN_DYNAMIC_RANGE
    com.google.zxing.common.BitMatrix matrix -> matrix
    void <init>(com.google.zxing.LuminanceSource) -> <init>
    com.google.zxing.common.BitMatrix getBlackMatrix() -> getBlackMatrix
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> createBinarizer
    void calculateThresholdForBlock(byte[],int,int,int,int,int[][],com.google.zxing.common.BitMatrix) -> calculateThresholdForBlock
    int cap(int,int) -> cap
    void thresholdBlock(byte[],int,int,int,int,com.google.zxing.common.BitMatrix) -> thresholdBlock
    int[][] calculateBlackPoints(byte[],int,int,int,int) -> calculateBlackPoints
com.google.zxing.common.MinimalECIInput -> com.google.zxing.common.j:
    int[] bytes -> a
    int fnc1 -> b
    void <init>(java.lang.String,java.nio.charset.Charset,int) -> <init>
    int getFNC1Character() -> b
    int length() -> a
    boolean haveNCharacters(int,int) -> b
    char charAt(int) -> a
    java.lang.CharSequence subSequence(int,int) -> a
    boolean isECI(int) -> b
    boolean isFNC1(int) -> d
    int getECIValue(int) -> c
    java.lang.String toString() -> toString
    void addEdge(com.google.zxing.common.MinimalECIInput$InputEdge[][],int,com.google.zxing.common.MinimalECIInput$InputEdge) -> a
    void addEdges(java.lang.String,com.google.zxing.common.ECIEncoderSet,com.google.zxing.common.MinimalECIInput$InputEdge[][],int,com.google.zxing.common.MinimalECIInput$InputEdge,int) -> a
com.google.zxing.common.MinimalECIInput$1 -> com.google.zxing.common.k:
    byte[] bytes -> a
    int byteOffset -> b
    int bitOffset -> c
    void <init>(byte[]) -> <init>
    int getBitOffset() -> a
    int getByteOffset() -> b
    int readBits(int) -> a
    int available() -> c
    int round(float) -> a
    float distance(float,float,float,float) -> a
    float distance(int,int,int,int) -> a
    int sum(int[]) -> a
    int getRSSvalue(int[],int,boolean) -> a
    int combins(int,int) -> a
com.google.zxing.common.MinimalECIInput$InputEdge -> com.google.zxing.common.l:
    char c -> a
    int encoderIndex -> b
    com.google.zxing.common.MinimalECIInput$InputEdge previous -> c
    int cachedTotalSize -> d
    void <init>(char,com.google.zxing.common.ECIEncoderSet,int,com.google.zxing.common.MinimalECIInput$InputEdge,int) -> <init>
    boolean isFNC1() -> a
    int access$000(com.google.zxing.common.MinimalECIInput$InputEdge) -> a
    int access$100(com.google.zxing.common.MinimalECIInput$InputEdge) -> b
    void <init>(char,com.google.zxing.common.ECIEncoderSet,int,com.google.zxing.common.MinimalECIInput$InputEdge,int,byte) -> <init>
    char access$300(com.google.zxing.common.MinimalECIInput$InputEdge) -> c
    com.google.zxing.common.MinimalECIInput$InputEdge access$400(com.google.zxing.common.MinimalECIInput$InputEdge) -> d
com.google.zxing.common.PerspectiveTransform -> com.google.zxing.common.m:
    float a11 -> a
    float a12 -> b
    float a13 -> c
    float a21 -> d
    float a22 -> e
    float a23 -> f
    float a31 -> g
    float a32 -> h
    float a33 -> i
    void <init>(float,float,float,float,float,float,float,float,float) -> <init>
    com.google.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    void transformPoints(float[]) -> a
    com.google.zxing.common.PerspectiveTransform squareToQuadrilateral(float,float,float,float,float,float,float,float) -> a
com.google.zxing.common.StringUtils -> com.google.zxing.common.n:
    java.nio.charset.Charset PLATFORM_DEFAULT_ENCODING -> c
    java.nio.charset.Charset SHIFT_JIS_CHARSET -> a
    java.nio.charset.Charset GB2312_CHARSET -> b
    java.nio.charset.Charset EUC_JP -> d
    boolean ASSUME_SHIFT_JIS -> e
    java.nio.charset.Charset guessCharset(byte[],java.util.Map) -> a
    void <clinit>() -> <clinit>
com.google.zxing.common.detector.WhiteRectangleDetector -> com.google.zxing.common.a.a:
    com.google.zxing.common.BitMatrix image -> a
    int height -> b
    int width -> c
    int leftInit -> d
    int rightInit -> e
    int downInit -> f
    int upInit -> g
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    void <init>(com.google.zxing.common.BitMatrix,int,int,int) -> <init>
    com.google.zxing.ResultPoint[] detect() -> a
    com.google.zxing.ResultPoint getBlackPointOnSegment(float,float,float,float) -> a
    boolean containsBlackPoint(int,int,int,boolean) -> a
com.google.zxing.common.reedsolomon.GenericGF -> com.google.zxing.common.b.a:
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_12 -> a
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_10 -> b
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_6 -> c
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_PARAM -> d
    com.google.zxing.common.reedsolomon.GenericGF QR_CODE_FIELD_256 -> e
    com.google.zxing.common.reedsolomon.GenericGF DATA_MATRIX_FIELD_256 -> f
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_8 -> g
    com.google.zxing.common.reedsolomon.GenericGF MAXICODE_FIELD_64 -> h
    int[] expTable -> i
    int[] logTable -> j
    com.google.zxing.common.reedsolomon.GenericGFPoly zero -> k
    com.google.zxing.common.reedsolomon.GenericGFPoly one -> l
    int size -> m
    int primitive -> n
    int generatorBase -> o
    void <init>(int,int,int) -> <init>
    com.google.zxing.common.reedsolomon.GenericGFPoly getZero() -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly getOne() -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly buildMonomial(int,int) -> a
    int addOrSubtract(int,int) -> b
    int exp(int) -> a
    int log(int) -> b
    int inverse(int) -> c
    int multiply(int,int) -> c
    int getSize() -> c
    int getGeneratorBase() -> d
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.zxing.common.reedsolomon.GenericGFPoly -> com.google.zxing.common.b.b:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    int[] coefficients -> b
    void <init>(com.google.zxing.common.reedsolomon.GenericGF,int[]) -> <init>
    int[] getCoefficients() -> a
    int getDegree() -> b
    boolean isZero() -> c
    int getCoefficient(int) -> a
    int evaluateAt(int) -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly addOrSubtract(com.google.zxing.common.reedsolomon.GenericGFPoly) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(com.google.zxing.common.reedsolomon.GenericGFPoly) -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(int) -> c
    com.google.zxing.common.reedsolomon.GenericGFPoly multiplyByMonomial(int,int) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly[] divide(com.google.zxing.common.reedsolomon.GenericGFPoly) -> c
    java.lang.String toString() -> toString
com.google.zxing.common.reedsolomon.ReedSolomonDecoder -> com.google.zxing.common.b.c:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    void <init>(com.google.zxing.common.reedsolomon.GenericGF) -> <init>
    int decodeWithECCount(int[],int) -> a
com.google.zxing.common.reedsolomon.ReedSolomonEncoder -> com.google.zxing.common.b.d:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    java.util.ArrayList cachedGenerators$7865b31 -> b
    void <init>(com.google.zxing.common.reedsolomon.GenericGF) -> <init>
    void encode(int[],int) -> a
com.google.zxing.common.reedsolomon.ReedSolomonException -> com.google.zxing.common.b.e:
    void <init>(java.lang.String) -> <init>
com.google.zxing.datamatrix.DataMatrixReader -> com.google.zxing.c.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.datamatrix.decoder.Decoder decoder -> b
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.DataMatrixWriter -> com.google.zxing.c.b:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.datamatrix.decoder.DataBlock -> com.google.zxing.c.a.a:
    int numDataCodewords -> a
    byte[] codewords -> b
    void <init>(int,byte[]) -> <init>
    com.google.zxing.datamatrix.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.datamatrix.decoder.Version) -> a
    int getNumDataCodewords() -> a
    byte[] getCodewords() -> b
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser -> com.google.zxing.c.a.b:
    char[] C40_BASIC_SET_CHARS -> a
    char[] C40_SHIFT2_SET_CHARS -> b
    char[] TEXT_BASIC_SET_CHARS -> c
    char[] TEXT_SHIFT2_SET_CHARS -> d
    char[] TEXT_SHIFT3_SET_CHARS -> e
    com.google.zxing.common.DecoderResult decode(byte[]) -> a
    void parseTwoBytes(int,int,int[]) -> a
    int unrandomize255State(int,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$1 -> com.google.zxing.c.a.c:
    int[] $SwitchMap$com$google$zxing$datamatrix$decoder$DecodedBitStreamParser$Mode -> a
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.c.a.d:
    int PAD_ENCODE$6e85352 -> a
    int ASCII_ENCODE$6e85352 -> b
    int C40_ENCODE$6e85352 -> c
    int TEXT_ENCODE$6e85352 -> d
    int ANSIX12_ENCODE$6e85352 -> e
    int EDIFACT_ENCODE$6e85352 -> f
    int BASE256_ENCODE$6e85352 -> g
    int ECI_ENCODE$6e85352 -> h
    int[] $VALUES$3a3249a9 -> i
    int[] values$68f9f718() -> a
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.Decoder -> com.google.zxing.c.a.e:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> a
    int correctErrors(byte[],int) -> a
com.google.zxing.datamatrix.decoder.Version -> com.google.zxing.c.a.f:
    com.google.zxing.datamatrix.decoder.Version[] VERSIONS -> a
    int versionNumber -> b
    int symbolSizeRows -> c
    int symbolSizeColumns -> d
    int dataRegionSizeRows -> e
    int dataRegionSizeColumns -> f
    com.google.zxing.datamatrix.decoder.Version$ECBlocks ecBlocks -> g
    int totalCodewords -> h
    void <init>(int,int,int,int,int,com.google.zxing.datamatrix.decoder.Version$ECBlocks) -> <init>
    int getVersionNumber() -> a
    int getSymbolSizeRows() -> b
    int getSymbolSizeColumns() -> c
    int getDataRegionSizeRows() -> d
    int getDataRegionSizeColumns() -> e
    int getTotalCodewords() -> f
    com.google.zxing.datamatrix.decoder.Version$ECBlocks getECBlocks() -> g
    com.google.zxing.datamatrix.decoder.Version getVersionForDimensions(int,int) -> a
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.decoder.Version$1 -> com.google.zxing.c.a.g:
    com.google.zxing.common.BitMatrix mappingBitMatrix -> a
    com.google.zxing.common.BitMatrix readMappingMatrix -> b
    com.google.zxing.datamatrix.decoder.Version version -> c
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.datamatrix.decoder.Version getVersion() -> a
    byte[] readCodewords() -> b
    boolean readModule(int,int,int,int) -> a
    int readUtah(int,int,int,int) -> b
com.google.zxing.datamatrix.decoder.Version$ECB -> com.google.zxing.c.a.h:
    int count -> a
    int dataCodewords -> b
    void <init>(int,int) -> <init>
    int getCount() -> a
    int getDataCodewords() -> b
    void <init>(int,int,byte) -> <init>
com.google.zxing.datamatrix.decoder.Version$ECBlocks -> com.google.zxing.c.a.i:
    int ecCodewords -> a
    com.google.zxing.datamatrix.decoder.Version$ECB[] ecBlocks -> b
    void <init>(int,com.google.zxing.datamatrix.decoder.Version$ECB) -> <init>
    void <init>(com.google.zxing.datamatrix.decoder.Version$ECB,com.google.zxing.datamatrix.decoder.Version$ECB,byte) -> <init>
    int getECCodewords() -> a
    com.google.zxing.datamatrix.decoder.Version$ECB[] getECBlocks() -> b
    void <init>(int,com.google.zxing.datamatrix.decoder.Version$ECB,byte) -> <init>
    void <init>(com.google.zxing.datamatrix.decoder.Version$ECB,com.google.zxing.datamatrix.decoder.Version$ECB) -> <init>
com.google.zxing.datamatrix.detector.Detector -> com.google.zxing.c.b.a:
    com.google.zxing.common.BitMatrix image -> a
    com.google.zxing.common.detector.WhiteRectangleDetector rectangleDetector -> b
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.common.DetectorResult detect() -> a
    com.google.zxing.ResultPoint shiftPoint(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> a
    com.google.zxing.ResultPoint moveAway(com.google.zxing.ResultPoint,float,float) -> a
    boolean isValid(com.google.zxing.ResultPoint) -> a
    int transitionsBetween(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
com.google.zxing.datamatrix.encoder.ASCIIEncoder -> com.google.zxing.c.c.a:
    void <init>() -> <init>
    void encode(com.google.zxing.datamatrix.encoder.EncoderContext) -> a
com.google.zxing.datamatrix.encoder.Base256Encoder -> com.google.zxing.c.c.b:
    void <init>() -> <init>
    void encode(com.google.zxing.datamatrix.encoder.EncoderContext) -> a
com.google.zxing.datamatrix.encoder.C40Encoder -> com.google.zxing.c.c.c:
    void <init>() -> <init>
    int getEncodingMode() -> a
    void encode(com.google.zxing.datamatrix.encoder.EncoderContext) -> a
    int backtrackOneCharacter(com.google.zxing.datamatrix.encoder.EncoderContext,java.lang.StringBuilder,java.lang.StringBuilder,int) -> a
    void writeNextTriplet(com.google.zxing.datamatrix.encoder.EncoderContext,java.lang.StringBuilder) -> a
    void handleEOD(com.google.zxing.datamatrix.encoder.EncoderContext,java.lang.StringBuilder) -> b
    int encodeChar(char,java.lang.StringBuilder) -> a
com.google.zxing.datamatrix.encoder.DataMatrixSymbolInfo144 -> com.google.zxing.c.c.d:
    void <init>() -> <init>
    int getInterleavedBlockCount() -> a
    int getDataLengthForInterleavedBlock(int) -> a
com.google.zxing.datamatrix.encoder.DefaultPlacement -> com.google.zxing.c.c.e:
    java.lang.String codewords$2ac0d95c -> a
    int numrows -> b
    int numcols -> c
    byte[] bits -> d
    void <init>(java.lang.String,int,int) -> <init>
    boolean getBit(int,int) -> a
    void setBit(int,int,boolean) -> a
    boolean noBit(int,int) -> b
    void place() -> a
    void module(int,int,int,int) -> a
    void utah(int,int,int) -> a
com.google.zxing.datamatrix.encoder.EdifactEncoder -> com.google.zxing.c.c.f:
    void <init>() -> <init>
    void encode(com.google.zxing.datamatrix.encoder.EncoderContext) -> a
    java.lang.String encodeToCodewords$12a98759(java.lang.StringBuilder) -> a
com.google.zxing.datamatrix.encoder.Encoder -> com.google.zxing.c.c.g:
    void encode(com.google.zxing.datamatrix.encoder.EncoderContext) -> a
com.google.zxing.datamatrix.encoder.EncoderContext -> com.google.zxing.c.c.h:
    java.lang.String msg -> b
    com.google.zxing.datamatrix.encoder.SymbolShapeHint shape -> c
    com.google.zxing.Dimension minSize -> d
    com.google.zxing.Dimension maxSize -> e
    java.lang.StringBuilder codewords -> f
    int pos -> a
    int newEncoding -> g
    com.google.zxing.datamatrix.encoder.SymbolInfo symbolInfo -> h
    int skipAtEnd -> i
    void <init>(java.lang.String) -> <init>
    void setSymbolShape(com.google.zxing.datamatrix.encoder.SymbolShapeHint) -> a
    void setSizeConstraints(com.google.zxing.Dimension,com.google.zxing.Dimension) -> a
    java.lang.String getMessage() -> a
    void setSkipAtEnd$13462e() -> b
    char getCurrentChar() -> c
    java.lang.StringBuilder getCodewords() -> d
    void writeCodewords(java.lang.String) -> a
    void writeCodeword(char) -> a
    int getCodewordCount() -> e
    int getNewEncoding() -> f
    void signalEncoderChange(int) -> a
    void resetEncoderSignal() -> g
    boolean hasMoreCharacters() -> h
    int getTotalMessageCharCount() -> m
    int getRemainingCharacters() -> i
    com.google.zxing.datamatrix.encoder.SymbolInfo getSymbolInfo() -> j
    void updateSymbolInfo() -> k
    void updateSymbolInfo(int) -> b
    void resetSymbolInfo() -> l
com.google.zxing.datamatrix.encoder.ErrorCorrection -> com.google.zxing.c.c.i:
    int[] FACTOR_SETS -> a
    int[][] FACTORS -> b
    int[] LOG -> c
    int[] ALOG -> d
    java.lang.String encodeECC200(java.lang.String,com.google.zxing.datamatrix.encoder.SymbolInfo) -> a
    java.lang.String createECCBlock$1087b2a(java.lang.String,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.HighLevelEncoder -> com.google.zxing.c.c.j:
    java.lang.String encodeHighLevel(java.lang.String,com.google.zxing.datamatrix.encoder.SymbolShapeHint,com.google.zxing.Dimension,com.google.zxing.Dimension,boolean) -> a
    int lookAheadTest$4d1ed0d4(java.lang.String,int,int) -> a
    int min(int,int,int,int,int) -> a
    int min(int,int,int,int) -> a
    int findMinimums(float[],int[],int,byte[]) -> a
    boolean isDigit(char) -> a
    boolean isExtendedASCII(char) -> b
    boolean isNativeC40(char) -> c
    boolean isNativeText(char) -> d
    boolean isNativeX12(char) -> e
    boolean isX12TermSep(char) -> h
    boolean isNativeEDIFACT(char) -> f
    void illegalCharacter(char) -> g
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.datamatrix.encoder.MinimalEncoder -> com.google.zxing.c.c.k:
    char[] C40_SHIFT2_CHARS -> a
    void <init>() -> <init>
    boolean isExtendedASCII(char,int) -> a
    boolean isInC40Shift1Set(char) -> c
    boolean isInC40Shift2Set(char,int) -> d
    java.lang.String encodeHighLevel(java.lang.String,java.nio.charset.Charset,int,com.google.zxing.datamatrix.encoder.SymbolShapeHint) -> a
    void addEdge(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge[][],com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> a
    int getNumberOfC40Words(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input,int,boolean,int[]) -> a
    void addEdges(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input,com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge[][],int,com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> a
    com.google.zxing.datamatrix.encoder.MinimalEncoder$Result encodeMinimally(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input) -> a
    boolean access$600(char) -> a
    boolean access$700(char) -> b
    boolean access$800(char,int) -> b
    boolean access$900(char,int) -> c
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.MinimalEncoder$1 -> com.google.zxing.c.c.l:
    int[] $SwitchMap$com$google$zxing$datamatrix$encoder$MinimalEncoder$Mode -> a
    int[] $SwitchMap$com$google$zxing$datamatrix$encoder$SymbolShapeHint -> b
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge -> com.google.zxing.c.c.m:
    int[] allCodewordCapacities -> a
    int[] squareCodewordCapacities -> b
    int[] rectangularCodewordCapacities -> c
    com.google.zxing.datamatrix.encoder.MinimalEncoder$Input input -> d
    int mode$57c64b9f -> e
    int fromPosition -> f
    int characterLength -> g
    com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge previous -> h
    int cachedTotalSize -> i
    boolean $assertionsDisabled -> j
    void <init>(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input,int,int,int,com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> <init>
    int getPreviousStartMode$79d90242() -> a
    int getPreviousMode$79d90242() -> f
    int getEndMode$79d90242() -> b
    int getMode$79d90242() -> c
    int getLastASCII() -> g
    int getMinSymbolSize(int) -> a
    byte[] getBytes(int) -> b
    byte[] getBytes(int,int) -> a
    void setC40Word(byte[],int,int,int,int) -> a
    int getX12Value(char) -> a
    int getShiftValue(char,boolean,int) -> a
    int getC40Value(boolean,int,char,int) -> a
    byte[] getC40Words(boolean,int) -> a
    byte[] getLatchBytes() -> d
    byte[] getDataBytes() -> e
    int access$100(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> a
    int access$200(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> b
    int access$300(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> c
    void <init>(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input,int,int,int,com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge,byte) -> <init>
    com.google.zxing.datamatrix.encoder.MinimalEncoder$Input access$1000(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> d
    int access$1100$299708f3(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> e
    com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge access$1200(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> f
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.MinimalEncoder$Input -> com.google.zxing.c.c.n:
    com.google.zxing.datamatrix.encoder.SymbolShapeHint shape -> a
    int macroId -> b
    void <init>(java.lang.String,java.nio.charset.Charset,int,com.google.zxing.datamatrix.encoder.SymbolShapeHint,int) -> <init>
    void <init>(java.lang.String,java.nio.charset.Charset,int,com.google.zxing.datamatrix.encoder.SymbolShapeHint,int,byte) -> <init>
    com.google.zxing.datamatrix.encoder.SymbolShapeHint access$500(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input) -> a
    int access$1300(com.google.zxing.datamatrix.encoder.MinimalEncoder$Input) -> b
com.google.zxing.datamatrix.encoder.MinimalEncoder$Mode -> com.google.zxing.c.c.o:
    int ASCII$57c64b9f -> a
    int C40$57c64b9f -> b
    int TEXT$57c64b9f -> c
    int X12$57c64b9f -> d
    int EDF$57c64b9f -> e
    int B256$57c64b9f -> f
    int[] $VALUES$700d83a4 -> g
    int[] values$dc31565() -> a
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.MinimalEncoder$Result -> com.google.zxing.c.c.p:
    byte[] bytes -> a
    void <init>(com.google.zxing.datamatrix.encoder.MinimalEncoder$Edge) -> <init>
    int prepend$6c48e420(byte[],java.util.ArrayList) -> a
    byte[] getBytes() -> a
com.google.zxing.datamatrix.encoder.SymbolInfo -> com.google.zxing.c.c.q:
    com.google.zxing.datamatrix.encoder.SymbolInfo[] symbols -> c
    boolean rectangular -> d
    int dataCapacity -> e
    int errorCodewords -> f
    int matrixWidth -> a
    int matrixHeight -> b
    int dataRegions -> g
    int rsBlockData -> h
    int rsBlockError -> i
    void <init>(boolean,int,int,int,int,int) -> <init>
    void <init>(boolean,int,int,int,int,int,int,int) -> <init>
    com.google.zxing.datamatrix.encoder.SymbolInfo lookup$4911e0c6(int,com.google.zxing.datamatrix.encoder.SymbolShapeHint,com.google.zxing.Dimension,com.google.zxing.Dimension) -> a
    int getHorizontalDataRegions() -> i
    int getVerticalDataRegions() -> j
    int getSymbolDataWidth() -> b
    int getSymbolDataHeight() -> c
    int getSymbolWidth() -> d
    int getSymbolHeight() -> e
    int getInterleavedBlockCount() -> a
    int getDataCapacity() -> f
    int getErrorCodewords() -> g
    int getDataLengthForInterleavedBlock(int) -> a
    int getErrorLengthForInterleavedBlock$134621() -> h
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.SymbolShapeHint -> com.google.zxing.c.c.r:
    com.google.zxing.datamatrix.encoder.SymbolShapeHint FORCE_NONE -> a
    com.google.zxing.datamatrix.encoder.SymbolShapeHint FORCE_SQUARE -> b
    com.google.zxing.datamatrix.encoder.SymbolShapeHint FORCE_RECTANGLE -> c
    com.google.zxing.datamatrix.encoder.SymbolShapeHint[] $VALUES -> d
    com.google.zxing.datamatrix.encoder.SymbolShapeHint[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.datamatrix.encoder.TextEncoder -> com.google.zxing.c.c.s:
    void <init>() -> <init>
    int getEncodingMode() -> a
    int encodeChar(char,java.lang.StringBuilder) -> a
com.google.zxing.datamatrix.encoder.X12Encoder -> com.google.zxing.c.c.t:
    void <init>() -> <init>
    int getEncodingMode() -> a
    void encode(com.google.zxing.datamatrix.encoder.EncoderContext) -> a
    int encodeChar(char,java.lang.StringBuilder) -> a
    void handleEOD(com.google.zxing.datamatrix.encoder.EncoderContext,java.lang.StringBuilder) -> b
com.google.zxing.maxicode.MaxiCodeReader -> com.google.zxing.d.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.maxicode.decoder.Decoder decoder -> b
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    void <clinit>() -> <clinit>
com.google.zxing.maxicode.decoder.BitMatrixParser -> com.google.zxing.d.a.a:
    int[][] BITNR -> a
    com.google.zxing.common.BitMatrix bitMatrix -> b
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    byte[] readCodewords() -> a
    void <clinit>() -> <clinit>
com.google.zxing.maxicode.decoder.DecodedBitStreamParser -> com.google.zxing.d.a.b:
    byte[] COUNTRY_BYTES -> a
    byte[] SERVICE_CLASS_BYTES -> b
    byte[] POSTCODE_2_LENGTH_BYTES -> c
    byte[] POSTCODE_2_BYTES -> d
    byte[][] POSTCODE_3_BYTES -> e
    java.lang.String[] SETS -> f
    com.google.zxing.common.DecoderResult decode(byte[],int) -> a
    int getBit(int,byte[]) -> a
    int getInt(byte[],byte[]) -> a
    java.lang.String getMessage(byte[],int,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.maxicode.decoder.Decoder -> com.google.zxing.d.a.c:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode$7a1b6c9(com.google.zxing.common.BitMatrix) -> a
    int correctErrors(byte[],int,int,int,int) -> a
com.google.zxing.oned.CodaBarReader -> com.google.zxing.e.a:
    char[] ALPHABET -> a
    int[] CHARACTER_ENCODINGS -> b
    char[] STARTEND_ENCODING -> c
    java.lang.StringBuilder decodeRowResult -> d
    int[] counters -> e
    int counterLength -> f
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void counterAppend(int) -> a
    boolean arrayContains(char[],char) -> a
    int toNarrowWidePattern(int) -> b
    void <clinit>() -> <clinit>
com.google.zxing.oned.CodaBarWriter -> com.google.zxing.e.b:
    char[] START_END_CHARS -> a
    char[] ALT_START_END_CHARS -> b
    char[] CHARS_WHICH_ARE_TEN_LENGTH_EACH_AFTER_DECODED -> c
    char DEFAULT_GUARD -> d
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Reader -> com.google.zxing.e.c:
    int[][] CODE_PATTERNS -> a
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Writer -> com.google.zxing.e.d:
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
    boolean[] encode(java.lang.String,java.util.Map) -> a
    boolean[] produceResult$568ee038(java.util.ArrayList,int) -> a
    int findCType$603e81d$609be4fd(java.lang.String,int) -> a
com.google.zxing.oned.Code128Writer$1 -> com.google.zxing.e.e:
    int[] $SwitchMap$com$google$zxing$oned$Code128Writer$MinimalEncoder$Latch -> a
    int[] $SwitchMap$com$google$zxing$oned$Code128Writer$MinimalEncoder$Charset -> b
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Writer$CType -> com.google.zxing.e.f:
    int UNCODABLE$127b542f -> a
    int ONE_DIGIT$127b542f -> b
    int TWO_DIGITS$127b542f -> c
    int FNC_1$127b542f -> d
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Writer$MinimalEncoder -> com.google.zxing.e.g:
    int[][] memoizedCost -> a
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch[][] minPath -> b
    boolean $assertionsDisabled -> c
    void <init>() -> <init>
    void addPattern$125b4656(java.util.ArrayList,int,int[],int[],int) -> a
    boolean isDigit(char) -> a
    boolean canEncode(java.lang.CharSequence,com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset,int) -> a
    int encode(java.lang.CharSequence,com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset,int) -> b
    void <init>(byte) -> <init>
    boolean[] access$100(com.google.zxing.oned.Code128Writer$MinimalEncoder,java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset -> com.google.zxing.e.h:
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset A -> a
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset B -> b
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset C -> c
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset NONE -> d
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset[] $VALUES -> e
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Charset[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch -> com.google.zxing.e.i:
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch A -> a
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch B -> b
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch C -> c
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch SHIFT -> d
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch NONE -> e
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch[] $VALUES -> f
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch[] values() -> a
    com.google.zxing.oned.Code128Writer$MinimalEncoder$Latch valueOf(java.lang.String) -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code39Reader -> com.google.zxing.e.j:
    int[] CHARACTER_ENCODINGS -> a
    boolean usingCheckDigit -> b
    java.lang.StringBuilder decodeRowResult -> c
    int[] counters -> d
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(boolean,byte) -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int toNarrowWidePattern(int[]) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code39Writer -> com.google.zxing.e.k:
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
    void toIntArray(int,int[]) -> a
com.google.zxing.oned.Code93Reader -> com.google.zxing.e.l:
    char[] ALPHABET -> c
    int[] CHARACTER_ENCODINGS -> a
    int ASTERISK_ENCODING -> b
    java.lang.StringBuilder decodeRowResult -> d
    int[] counters -> e
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int toPattern(int[]) -> a
    void checkOneChecksum$4d1ed0c7(java.lang.StringBuilder,int,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.Code93Writer -> com.google.zxing.e.m:
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
    int appendPattern(boolean[],int,int) -> a
    int computeChecksumIndex(java.lang.String,int) -> a
com.google.zxing.oned.EAN13Reader -> com.google.zxing.e.n:
    int[] FIRST_DIGIT_ENCODINGS -> a
    int[] decodeMiddleCounters -> g
    void <init>() -> <init>
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.EAN13Writer -> com.google.zxing.e.o:
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.EAN8Reader -> com.google.zxing.e.p:
    int[] decodeMiddleCounters -> a
    void <init>() -> <init>
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> a
com.google.zxing.oned.EAN8Writer -> com.google.zxing.e.q:
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.EANManufacturerOrgSupport -> com.google.zxing.e.r:
    java.util.ArrayList ranges$7865b31 -> a
    java.util.ArrayList countryIdentifiers$7865b31 -> b
    void <init>() -> <init>
    java.lang.String lookupCountryIdentifier(java.lang.String) -> a
    void add(int[],java.lang.String) -> a
    void initIfNeeded() -> a
com.google.zxing.oned.ITFReader -> com.google.zxing.e.s:
    int[] DEFAULT_ALLOWED_LENGTHS -> a
    int narrowLineWidth -> b
    int[] START_PATTERN -> c
    int[][] END_PATTERN_REVERSED -> d
    int[][] PATTERNS -> e
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void validateQuietZone(com.google.zxing.common.BitArray,int) -> a
    int skipWhiteSpace(com.google.zxing.common.BitArray) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray) -> b
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,int[]) -> c
    int decodeDigit(int[]) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.ITFWriter -> com.google.zxing.e.t:
    int[] START_PATTERN -> a
    int[] END_PATTERN -> b
    int[][] PATTERNS -> c
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.MultiFormatOneDReader -> com.google.zxing.e.u:
    com.google.zxing.oned.OneDReader[] EMPTY_ONED_ARRAY -> a
    com.google.zxing.oned.OneDReader[] readers -> b
    void <init>(java.util.Map) -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> reset
    void <clinit>() -> <clinit>
com.google.zxing.oned.MultiFormatUPCEANReader -> com.google.zxing.e.v:
    com.google.zxing.oned.UPCEANReader[] EMPTY_READER_ARRAY -> a
    com.google.zxing.oned.UPCEANReader[] readers -> b
    void <init>(java.util.Map) -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> reset
    void <clinit>() -> <clinit>
com.google.zxing.oned.OneDReader -> com.google.zxing.e.w:
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    com.google.zxing.Result doDecode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void recordPattern(com.google.zxing.common.BitArray,int,int[]) -> a
    void recordPatternInReverse(com.google.zxing.common.BitArray,int,int[]) -> b
    float patternMatchVariance(int[],int[],float) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
com.google.zxing.oned.OneDimensionalCodeWriter -> com.google.zxing.e.x:
    java.util.regex.Pattern NUMERIC -> a
    void <init>() -> <init>
    boolean[] encode(java.lang.String) -> a
    boolean[] encode(java.lang.String,java.util.Map) -> a
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    void checkNumeric(java.lang.String) -> b
    int appendPattern(boolean[],int,int[],boolean) -> a
    int getDefaultMargin() -> c
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCAReader -> com.google.zxing.e.y:
    com.google.zxing.oned.EAN13Reader ean13Reader$469bb084 -> a
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> a
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.Result maybeReturnResult(com.google.zxing.Result) -> a
com.google.zxing.oned.UPCAWriter -> com.google.zxing.e.z:
    com.google.zxing.oned.EAN13Writer subWriter -> a
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.oned.UPCEANExtension2Support -> com.google.zxing.e.A:
    int[] decodeMiddleCounters -> a
    java.lang.StringBuilder decodeRowStringBuffer -> b
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[]) -> a
com.google.zxing.oned.UPCEANExtension5Support -> com.google.zxing.e.B:
    int[] CHECK_DIGIT_ENCODINGS -> a
    int[] decodeMiddleCounters -> b
    java.lang.StringBuilder decodeRowStringBuffer -> c
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[]) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCEANExtensionSupport -> com.google.zxing.e.C:
    int[] EXTENSION_START_PATTERN -> a
    com.google.zxing.oned.UPCEANExtension2Support twoSupport -> b
    com.google.zxing.oned.UPCEANExtension5Support fiveSupport -> c
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCEANReader -> com.google.zxing.e.D:
    int[] START_END_PATTERN -> b
    int[] MIDDLE_PATTERN -> c
    int[] END_PATTERN -> d
    int[][] L_PATTERNS -> e
    int[][] L_AND_G_PATTERNS -> f
    java.lang.StringBuilder decodeRowStringBuffer -> a
    com.google.zxing.oned.UPCEANExtensionSupport extensionReader -> g
    com.google.zxing.oned.EANManufacturerOrgSupport eanManSupport -> h
    void <init>() -> <init>
    int[] findStartGuardPattern(com.google.zxing.common.BitArray) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> a
    boolean checkChecksum(java.lang.String) -> a
    boolean checkStandardUPCEANChecksum$76bab11d(java.lang.String) -> b
    int getStandardUPCEANChecksum(java.lang.CharSequence) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> a
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[]) -> a
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[],int[]) -> a
    int decodeDigit(com.google.zxing.common.BitArray,int[],int,int[][]) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> a
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCEANWriter -> com.google.zxing.e.E:
    void <init>() -> <init>
    int getDefaultMargin() -> c
com.google.zxing.oned.UPCEReader -> com.google.zxing.e.F:
    int[] MIDDLE_END_PATTERN -> g
    int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS -> a
    int[] decodeMiddleCounters -> h
    void <init>() -> <init>
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> a
    boolean checkChecksum(java.lang.String) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> a
    java.lang.String convertUPCEtoUPCA(java.lang.String) -> c
    void <clinit>() -> <clinit>
com.google.zxing.oned.UPCEWriter -> com.google.zxing.e.G:
    void <init>() -> <init>
    java.util.Set getSupportedWriteFormats$6d99338e() -> b
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.rss.AbstractRSSReader -> com.google.zxing.e.a.a:
    int[] decodeFinderCounters -> a
    int[] dataCharacterCounters -> b
    float[] oddRoundingErrors -> c
    float[] evenRoundingErrors -> d
    int[] oddCounts -> e
    int[] evenCounts -> f
    void <init>() -> <init>
    int[] getDecodeFinderCounters() -> a
    int[] getDataCharacterCounters() -> b
    float[] getOddRoundingErrors() -> c
    float[] getEvenRoundingErrors() -> d
    int[] getOddCounts() -> e
    int[] getEvenCounts() -> f
    int parseFinderValue(int[],int[][]) -> a
    void increment(int[],float[]) -> a
    void decrement(int[],float[]) -> b
    boolean isFinderPattern(int[]) -> a
com.google.zxing.oned.rss.DataCharacter -> com.google.zxing.e.a.b:
    int value -> a
    int checksumPortion -> b
    void <init>(int,int) -> <init>
    int getValue() -> a
    int getChecksumPortion() -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.FinderPattern -> com.google.zxing.e.a.c:
    int value -> a
    int[] startEnd -> b
    com.google.zxing.ResultPoint[] resultPoints -> c
    void <init>(int,int[],int,int,int) -> <init>
    int getValue() -> a
    int[] getStartEnd() -> b
    com.google.zxing.ResultPoint[] getResultPoints() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.Pair -> com.google.zxing.e.a.d:
    com.google.zxing.oned.rss.FinderPattern finderPattern -> a
    int count -> b
    void <init>(int,int,com.google.zxing.oned.rss.FinderPattern) -> <init>
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> c
    int getCount() -> d
    void incrementCount() -> e
com.google.zxing.oned.rss.RSS14Reader -> com.google.zxing.e.a.e:
    int[] OUTSIDE_EVEN_TOTAL_SUBSET -> a
    int[] INSIDE_ODD_TOTAL_SUBSET -> b
    int[] OUTSIDE_GSUM -> c
    int[] INSIDE_GSUM -> d
    int[] OUTSIDE_ODD_WIDEST -> e
    int[] INSIDE_ODD_WIDEST -> f
    int[][] FINDER_PATTERNS -> g
    java.util.ArrayList possibleLeftPairs$7865b31 -> h
    java.util.ArrayList possibleRightPairs$7865b31 -> i
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void addOrTally$7ac237a0$696e5d60(java.util.ArrayList,com.google.zxing.oned.rss.Pair) -> a
    void reset() -> reset
    com.google.zxing.oned.rss.Pair decodePair(com.google.zxing.common.BitArray,boolean,int,java.util.Map) -> a
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean) -> a
    void adjustOddEvenCounts(boolean,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.BitArrayBuilder -> com.google.zxing.e.a.a.a:
    com.google.zxing.common.BitArray buildBitArray(java.util.List) -> a
com.google.zxing.oned.rss.expanded.ExpandedPair -> com.google.zxing.e.a.a.b:
    com.google.zxing.oned.rss.DataCharacter leftChar -> a
    com.google.zxing.oned.rss.DataCharacter rightChar -> b
    com.google.zxing.oned.rss.FinderPattern finderPattern -> c
    void <init>(com.google.zxing.oned.rss.DataCharacter,com.google.zxing.oned.rss.DataCharacter,com.google.zxing.oned.rss.FinderPattern) -> <init>
    com.google.zxing.oned.rss.DataCharacter getLeftChar() -> a
    com.google.zxing.oned.rss.DataCharacter getRightChar() -> b
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> c
    boolean mustBeLast() -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.expanded.ExpandedRow -> com.google.zxing.e.a.a.c:
    java.util.ArrayList pairs$7865b31 -> a
    int rowNumber -> b
    void <init>(java.util.ArrayList,int) -> <init>
    java.util.ArrayList getPairs$5679c1ce() -> a
    int getRowNumber() -> b
    boolean isEquivalent$61fb9e6a(java.util.ArrayList) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.expanded.RSSExpandedReader -> com.google.zxing.e.a.a.d:
    int[] SYMBOL_WIDEST -> a
    int[] EVEN_TOTAL_SUBSET -> b
    int[] GSUM -> c
    int[][] FINDER_PATTERNS -> d
    int[][] WEIGHTS -> e
    int[][] FINDER_PATTERN_SEQUENCES -> f
    java.util.ArrayList pairs$7865b31 -> g
    java.util.ArrayList rows$7865b31 -> h
    int[] startEnd -> i
    boolean startFromEven -> j
    void <init>() -> <init>
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> reset
    java.util.List decodeRow2pairs(int,com.google.zxing.common.BitArray) -> a
    java.util.List checkRows(boolean) -> a
    java.util.List checkRows$7294ab4a(java.util.ArrayList,int) -> a
    boolean isValidSequence$22871ece(java.util.ArrayList,boolean) -> a
    com.google.zxing.Result constructResult(java.util.List) -> a
    boolean checkChecksum() -> g
    int getNextSecondBar(com.google.zxing.common.BitArray,int) -> a
    com.google.zxing.oned.rss.expanded.ExpandedPair retrieveNextPair$516f6d6e(com.google.zxing.common.BitArray,java.util.ArrayList,int) -> a
    void reverseCounters(int[]) -> b
    com.google.zxing.oned.rss.FinderPattern parseFoundFinderPattern$62410e55(com.google.zxing.common.BitArray,int,boolean,java.util.ArrayList) -> a
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> a
    boolean isNotA1left(com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> a
    void adjustOddEvenCounts$13462e() -> h
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.decoders.AI013103decoder -> com.google.zxing.e.a.a.a.a:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01320xDecoder -> com.google.zxing.e.a.a.a.b:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder -> com.google.zxing.e.a.a.a.c:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder -> com.google.zxing.e.a.a.a.d:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder -> com.google.zxing.e.a.a.a.e:
    java.lang.String dateCode -> a
    java.lang.String firstAIdigits -> b
    void <init>(com.google.zxing.common.BitArray,java.lang.String,java.lang.String) -> <init>
    java.lang.String parseInformation() -> a
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder -> com.google.zxing.e.a.a.a.f:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01AndOtherAIs -> com.google.zxing.e.a.a.a.g:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01decoder -> com.google.zxing.e.a.a.a.h:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void encodeCompressedGtin(java.lang.StringBuilder,int) -> b
    void encodeCompressedGtinWithoutAI(java.lang.StringBuilder,int,int) -> a
    void appendCheckDigit(java.lang.StringBuilder,int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01weightDecoder -> com.google.zxing.e.a.a.a.i:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    void encodeCompressedWeight(java.lang.StringBuilder,int,int) -> b
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder -> com.google.zxing.e.a.a.a.j:
    com.google.zxing.common.BitArray information -> a
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder generalDecoder -> b
    void <init>(com.google.zxing.common.BitArray) -> <init>
    com.google.zxing.common.BitArray getInformation() -> b
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder getGeneralDecoder() -> c
    java.lang.String parseInformation() -> a
    com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder createDecoder(com.google.zxing.common.BitArray) -> a
com.google.zxing.oned.rss.expanded.decoders.AnyAIDecoder -> com.google.zxing.e.a.a.a.k:
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult -> com.google.zxing.e.a.a.a.l:
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodedInformation -> a
    boolean finished -> b
    void <init>() -> <init>
    void <init>(com.google.zxing.oned.rss.expanded.decoders.DecodedInformation,boolean) -> <init>
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation getDecodedInformation() -> a
    boolean isFinished() -> b
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState -> com.google.zxing.e.a.a.a.m:
    int position -> a
    int encoding$1376b33b -> b
    void <init>() -> <init>
    int getPosition() -> a
    void setPosition(int) -> a
    void incrementPosition(int) -> b
    boolean isAlpha() -> b
    boolean isIsoIec646() -> c
    void setNumeric() -> d
    void setAlpha() -> e
    void setIsoIec646() -> f
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State -> com.google.zxing.e.a.a.a.n:
    int NUMERIC$1376b33b -> a
    int ALPHA$1376b33b -> b
    int ISO_IEC_646$1376b33b -> c
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.decoders.DecodedChar -> com.google.zxing.e.a.a.a.o:
    char value -> a
    void <init>(int,char) -> <init>
    char getValue() -> a
    boolean isFNC1() -> b
com.google.zxing.oned.rss.expanded.decoders.DecodedInformation -> com.google.zxing.e.a.a.a.p:
    java.lang.String newString -> a
    int remainingValue -> b
    boolean remaining -> c
    void <init>(int,java.lang.String) -> <init>
    void <init>(int,java.lang.String,int) -> <init>
    java.lang.String getNewString() -> a
    boolean isRemaining() -> b
    int getRemainingValue() -> c
com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric -> com.google.zxing.e.a.a.a.q:
    int firstDigit -> a
    int secondDigit -> b
    void <init>(int,int,int) -> <init>
    int getFirstDigit() -> a
    int getSecondDigit() -> b
    boolean isFirstDigitFNC1() -> c
    boolean isSecondDigitFNC1() -> d
com.google.zxing.oned.rss.expanded.decoders.DecodedObject -> com.google.zxing.e.a.a.a.r:
    int newPosition -> a
    void <init>(int) -> <init>
    int getNewPosition() -> e
com.google.zxing.oned.rss.expanded.decoders.FieldParser -> com.google.zxing.e.a.a.a.s:
    java.util.HashMap TWO_DIGIT_DATA_LENGTH$5a983bf5 -> a
    java.util.HashMap THREE_DIGIT_DATA_LENGTH$5a983bf5 -> b
    java.util.HashMap THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH$5a983bf5 -> c
    java.util.HashMap FOUR_DIGIT_DATA_LENGTH$5a983bf5 -> d
    java.lang.String parseFieldsInGeneralPurpose(java.lang.String) -> a
    java.lang.String processFixedAI(int,int,java.lang.String) -> a
    java.lang.String processVariableAI(int,int,java.lang.String) -> b
    void <clinit>() -> <clinit>
com.google.zxing.oned.rss.expanded.decoders.FieldParser$DataLength -> com.google.zxing.e.a.a.a.t:
    boolean variable -> a
    int length -> b
    void <init>(boolean,int) -> <init>
    com.google.zxing.oned.rss.expanded.decoders.FieldParser$DataLength fixed(int) -> a
    com.google.zxing.oned.rss.expanded.decoders.FieldParser$DataLength variable(int) -> b
com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder -> com.google.zxing.e.a.a.a.u:
    com.google.zxing.common.BitArray information -> a
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState current -> b
    java.lang.StringBuilder buffer -> c
    void <init>(com.google.zxing.common.BitArray) -> <init>
    java.lang.String decodeAllCodes(java.lang.StringBuilder,int) -> a
    boolean isStillNumeric(int) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric decodeNumeric(int) -> b
    int extractNumericValueFromBitArray(int,int) -> a
    int extractNumericValueFromBitArray(com.google.zxing.common.BitArray,int,int) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodeGeneralPurposeField(int,java.lang.String) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation parseBlocks() -> a
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseNumericBlock() -> b
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseIsoIec646Block() -> c
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseAlphaBlock() -> d
    boolean isStillIsoIec646(int) -> c
    com.google.zxing.oned.rss.expanded.decoders.DecodedChar decodeIsoIec646(int) -> d
    boolean isStillAlpha(int) -> e
    com.google.zxing.oned.rss.expanded.decoders.DecodedChar decodeAlphanumeric(int) -> f
    boolean isAlphaTo646ToAlphaLatch(int) -> g
    boolean isAlphaOr646ToNumericLatch(int) -> h
    boolean isNumericToAlphaNumericLatch(int) -> i
com.google.zxing.pdf417.PDF417Common -> com.google.zxing.f.a:
    int[] EMPTY_INT_ARRAY -> b
    int[] SYMBOL_TABLE -> a
    int[] CODEWORD_TABLE -> c
    int[] toIntArray$db9c5c2(java.util.ArrayList) -> a
    int getCodeword(int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.PDF417Reader -> com.google.zxing.f.b:
    com.google.zxing.Result[] EMPTY_RESULT_ARRAY -> a
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    int getMaxWidth(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    int getMinWidth(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> b
    void reset() -> reset
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.PDF417ResultMetadata -> com.google.zxing.f.c:
    java.lang.String fileId -> a
    boolean lastSegment -> b
    void <init>() -> <init>
    java.lang.String getFileId() -> a
    void setFileId(java.lang.String) -> a
    boolean isLastSegment() -> b
    void setLastSegment$1385ff() -> c
com.google.zxing.pdf417.PDF417Writer -> com.google.zxing.f.d:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
    com.google.zxing.common.BitMatrix bitMatrixFromBitArray(byte[][],int) -> a
    byte[][] rotateArray(byte[][]) -> a
com.google.zxing.pdf417.decoder.BarcodeMetadata -> com.google.zxing.f.a.a:
    int columnCount -> a
    int errorCorrectionLevel -> b
    int rowCountUpperPart -> c
    int rowCountLowerPart -> d
    int rowCount -> e
    void <init>(int,int,int,int) -> <init>
    int getColumnCount() -> a
    int getErrorCorrectionLevel() -> b
    int getRowCount() -> c
    int getRowCountUpperPart() -> d
    int getRowCountLowerPart() -> e
com.google.zxing.pdf417.decoder.BarcodeValue -> com.google.zxing.f.a.b:
    java.util.HashMap values$5a983bf5 -> a
    void <init>() -> <init>
    void setValue(int) -> a
    int[] getValue() -> a
com.google.zxing.pdf417.decoder.BoundingBox -> com.google.zxing.f.a.c:
    com.google.zxing.common.BitMatrix image -> a
    com.google.zxing.ResultPoint topLeft -> b
    com.google.zxing.ResultPoint bottomLeft -> c
    com.google.zxing.ResultPoint topRight -> d
    com.google.zxing.ResultPoint bottomRight -> e
    int minX -> f
    int maxX -> g
    int minY -> h
    int maxY -> i
    void <init>(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> <init>
    void <init>(com.google.zxing.pdf417.decoder.BoundingBox) -> <init>
    com.google.zxing.pdf417.decoder.BoundingBox merge(com.google.zxing.pdf417.decoder.BoundingBox,com.google.zxing.pdf417.decoder.BoundingBox) -> a
    com.google.zxing.pdf417.decoder.BoundingBox addMissingRows(int,int,boolean) -> a
    int getMinX() -> a
    int getMaxX() -> b
    int getMinY() -> c
    int getMaxY() -> d
    com.google.zxing.ResultPoint getTopLeft() -> e
    com.google.zxing.ResultPoint getTopRight() -> f
    com.google.zxing.ResultPoint getBottomLeft() -> g
    com.google.zxing.ResultPoint getBottomRight() -> h
com.google.zxing.pdf417.decoder.Codeword -> com.google.zxing.f.a.d:
    int startX -> a
    int endX -> b
    int bucket -> c
    int value -> d
    int rowNumber -> e
    void <init>(int,int,int,int) -> <init>
    boolean hasValidRowNumber() -> a
    boolean isValidRowNumber(int) -> a
    void setRowNumberAsRowIndicatorColumn() -> b
    int getWidth() -> c
    int getStartX() -> d
    int getEndX() -> e
    int getBucket() -> f
    int getValue() -> g
    int getRowNumber() -> h
    void setRowNumber(int) -> b
    java.lang.String toString() -> toString
com.google.zxing.pdf417.decoder.DecodedBitStreamParser -> com.google.zxing.f.a.e:
    char[] PUNCT_CHARS -> a
    char[] MIXED_CHARS -> b
    java.math.BigInteger[] EXP900 -> c
    com.google.zxing.common.DecoderResult decode(int[],java.lang.String) -> a
    int decodeMacroBlock(int[],int,com.google.zxing.pdf417.PDF417ResultMetadata) -> a
    int textCompaction(int[],int,com.google.zxing.common.ECIStringBuilder) -> a
    int decodeTextCompaction$4650d483(int[],int[],int,com.google.zxing.common.ECIStringBuilder,int) -> a
    int numericCompaction(int[],int,com.google.zxing.common.ECIStringBuilder) -> b
    java.lang.String decodeBase900toBase10(int[],int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$1 -> com.google.zxing.f.a.f:
    int[] $SwitchMap$com$google$zxing$pdf417$decoder$DecodedBitStreamParser$Mode -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.f.a.g:
    int ALPHA$72b0c14b -> a
    int LOWER$72b0c14b -> b
    int MIXED$72b0c14b -> c
    int PUNCT$72b0c14b -> d
    int ALPHA_SHIFT$72b0c14b -> e
    int PUNCT_SHIFT$72b0c14b -> f
    int[] $VALUES$3f80ec3a -> g
    int[] values$a5b57b() -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.DetectionResult -> com.google.zxing.f.a.h:
    com.google.zxing.pdf417.decoder.BarcodeMetadata barcodeMetadata -> a
    com.google.zxing.pdf417.decoder.DetectionResultColumn[] detectionResultColumns -> b
    com.google.zxing.pdf417.decoder.BoundingBox boundingBox -> c
    int barcodeColumnCount -> d
    void <init>(com.google.zxing.pdf417.decoder.BarcodeMetadata,com.google.zxing.pdf417.decoder.BoundingBox) -> <init>
    com.google.zxing.pdf417.decoder.DetectionResultColumn[] getDetectionResultColumns() -> a
    void adjustIndicatorColumnRowNumbers(com.google.zxing.pdf417.decoder.DetectionResultColumn) -> a
    int adjustRowNumberIfValid(int,int,com.google.zxing.pdf417.decoder.Codeword) -> a
    int getBarcodeColumnCount() -> b
    int getBarcodeRowCount() -> c
    int getBarcodeECLevel() -> d
    void setBoundingBox(com.google.zxing.pdf417.decoder.BoundingBox) -> a
    com.google.zxing.pdf417.decoder.BoundingBox getBoundingBox() -> e
    void setDetectionResultColumn(int,com.google.zxing.pdf417.decoder.DetectionResultColumn) -> a
    com.google.zxing.pdf417.decoder.DetectionResultColumn getDetectionResultColumn(int) -> a
    java.lang.String toString() -> toString
com.google.zxing.pdf417.decoder.DetectionResultColumn -> com.google.zxing.f.a.i:
    com.google.zxing.pdf417.decoder.BoundingBox boundingBox -> a
    com.google.zxing.pdf417.decoder.Codeword[] codewords -> b
    void <init>(com.google.zxing.pdf417.decoder.BoundingBox) -> <init>
    com.google.zxing.pdf417.decoder.Codeword getCodewordNearby(int) -> a
    int imageRowToCodewordIndex(int) -> b
    void setCodeword(int,com.google.zxing.pdf417.decoder.Codeword) -> a
    com.google.zxing.pdf417.decoder.Codeword getCodeword(int) -> c
    com.google.zxing.pdf417.decoder.BoundingBox getBoundingBox() -> a
    com.google.zxing.pdf417.decoder.Codeword[] getCodewords() -> b
    java.lang.String toString() -> toString
com.google.zxing.pdf417.decoder.DetectionResultRowIndicatorColumn -> com.google.zxing.f.a.j:
    boolean isLeft -> a
    void <init>(com.google.zxing.pdf417.decoder.BoundingBox,boolean) -> <init>
    void adjustCompleteIndicatorColumnRowNumbers(com.google.zxing.pdf417.decoder.BarcodeMetadata) -> a
    int[] getRowHeights() -> c
    com.google.zxing.pdf417.decoder.BarcodeMetadata getBarcodeMetadata() -> d
    void removeIncorrectCodewords(com.google.zxing.pdf417.decoder.Codeword[],com.google.zxing.pdf417.decoder.BarcodeMetadata) -> a
    boolean isLeft() -> e
    java.lang.String toString() -> toString
com.google.zxing.pdf417.decoder.PDF417CodewordDecoder -> com.google.zxing.f.a.k:
    float[][] RATIOS_TABLE -> a
    int getDecodedValue(int[]) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.PDF417ScanningDecoder -> com.google.zxing.f.a.l:
    com.google.zxing.pdf417.decoder.ec.ErrorCorrection errorCorrection -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> a
    com.google.zxing.pdf417.decoder.BoundingBox adjustBoundingBox(com.google.zxing.pdf417.decoder.DetectionResultRowIndicatorColumn) -> a
    int getMax(int[]) -> a
    com.google.zxing.pdf417.decoder.DetectionResultRowIndicatorColumn getRowIndicatorColumn(com.google.zxing.common.BitMatrix,com.google.zxing.pdf417.decoder.BoundingBox,com.google.zxing.ResultPoint,boolean,int,int) -> a
    com.google.zxing.common.DecoderResult createDecoderResultFromAmbiguousValues(int,int[],int[],int[],int[][]) -> a
    boolean isValidBarcodeColumn(com.google.zxing.pdf417.decoder.DetectionResult,int) -> a
    com.google.zxing.pdf417.decoder.Codeword detectCodeword(com.google.zxing.common.BitMatrix,int,int,boolean,int,int,int,int) -> a
    int[] getModuleBitCount(com.google.zxing.common.BitMatrix,int,int,boolean,int,int) -> a
    int adjustCodewordStartColumn(com.google.zxing.common.BitMatrix,int,int,boolean,int,int) -> b
    boolean checkCodewordSkew(int,int,int) -> a
    int[] getBitCountForCodeword(int) -> a
    int getCodewordBucketNumber(int) -> b
    int getCodewordBucketNumber(int[]) -> b
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.ec.ErrorCorrection -> com.google.zxing.f.a.a.a:
    com.google.zxing.pdf417.decoder.ec.ModulusGF field -> a
    void <init>() -> <init>
    int decode(int[],int,int[]) -> a
com.google.zxing.pdf417.decoder.ec.ModulusGF -> com.google.zxing.f.a.a.b:
    com.google.zxing.pdf417.decoder.ec.ModulusGF PDF417_GF -> a
    int[] expTable -> b
    int[] logTable -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly zero -> d
    com.google.zxing.pdf417.decoder.ec.ModulusPoly one -> e
    void <init>() -> <init>
    com.google.zxing.pdf417.decoder.ec.ModulusPoly getZero() -> a
    com.google.zxing.pdf417.decoder.ec.ModulusPoly getOne() -> b
    com.google.zxing.pdf417.decoder.ec.ModulusPoly buildMonomial(int,int) -> a
    int subtract(int,int) -> b
    int exp(int) -> a
    int log(int) -> b
    int inverse(int) -> c
    int multiply(int,int) -> c
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.decoder.ec.ModulusPoly -> com.google.zxing.f.a.a.c:
    com.google.zxing.pdf417.decoder.ec.ModulusGF field -> a
    int[] coefficients -> b
    void <init>(com.google.zxing.pdf417.decoder.ec.ModulusGF,int[]) -> <init>
    int getDegree() -> a
    boolean isZero() -> b
    int getCoefficient(int) -> a
    int evaluateAt(int) -> b
    com.google.zxing.pdf417.decoder.ec.ModulusPoly add(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> a
    com.google.zxing.pdf417.decoder.ec.ModulusPoly subtract(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> b
    com.google.zxing.pdf417.decoder.ec.ModulusPoly multiply(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly negative() -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly multiply(int) -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly multiplyByMonomial(int,int) -> a
    java.lang.String toString() -> toString
com.google.zxing.pdf417.detector.Detector -> com.google.zxing.f.b.a:
    int[] INDEXES_START_PATTERN -> a
    int[] INDEXES_STOP_PATTERN -> b
    int[] START_PATTERN -> c
    int[] STOP_PATTERN -> d
    int[] ROTATIONS -> e
    com.google.zxing.pdf417.detector.PDF417DetectorResult detect$78af5069$57c4d31c(com.google.zxing.BinaryBitmap) -> a
    void copyToResult(com.google.zxing.ResultPoint[],com.google.zxing.ResultPoint[],int[]) -> a
    com.google.zxing.ResultPoint[] findRowsWithPattern(com.google.zxing.common.BitMatrix,int,int,int,int,int,int[]) -> a
    int[] findGuardPattern(com.google.zxing.common.BitMatrix,int,int,int,int[],int[]) -> a
    float patternMatchVariance(int[],int[]) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.detector.PDF417DetectorResult -> com.google.zxing.f.b.b:
    com.google.zxing.common.BitMatrix bits -> a
    java.util.ArrayList points$7865b31 -> b
    int rotation -> c
    void <init>(com.google.zxing.common.BitMatrix,java.util.ArrayList,int) -> <init>
    com.google.zxing.common.BitMatrix getBits() -> a
    java.util.ArrayList getPoints$5679c1ce() -> b
    int getRotation() -> c
com.google.zxing.pdf417.encoder.BarcodeMatrix -> com.google.zxing.f.c.a:
    com.google.zxing.pdf417.encoder.BarcodeRow[] matrix -> a
    int currentRow -> b
    int height -> c
    int width -> d
    void <init>(int,int) -> <init>
    void startRow() -> a
    com.google.zxing.pdf417.encoder.BarcodeRow getCurrentRow() -> b
    byte[][] getScaledMatrix(int,int) -> a
com.google.zxing.pdf417.encoder.BarcodeRow -> com.google.zxing.f.c.b:
    byte[] row -> a
    int currentLocation -> b
    void <init>(int) -> <init>
    void addBar(boolean,int) -> a
    byte[] getScaledRow(int) -> a
com.google.zxing.pdf417.encoder.Compaction -> com.google.zxing.f.c.c:
    com.google.zxing.pdf417.encoder.Compaction AUTO -> a
    com.google.zxing.pdf417.encoder.Compaction TEXT -> b
    com.google.zxing.pdf417.encoder.Compaction BYTE -> c
    com.google.zxing.pdf417.encoder.Compaction NUMERIC -> d
    com.google.zxing.pdf417.encoder.Compaction[] $VALUES -> e
    com.google.zxing.pdf417.encoder.Compaction[] values() -> a
    com.google.zxing.pdf417.encoder.Compaction valueOf(java.lang.String) -> a
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.Dimensions -> com.google.zxing.f.c.d:
    com.google.zxing.common.BitMatrix matrix -> a
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix getMatrix() -> a
    void setMatrix(com.google.zxing.common.BitMatrix) -> a
com.google.zxing.pdf417.encoder.PDF417 -> com.google.zxing.f.c.e:
    int[][] CODEWORD_TABLE -> a
    com.google.zxing.pdf417.encoder.BarcodeMatrix barcodeMatrix -> b
    boolean compact -> c
    com.google.zxing.pdf417.encoder.Compaction compaction -> d
    java.nio.charset.Charset encoding -> e
    int minCols -> f
    int maxCols -> g
    int maxRows -> h
    int minRows -> i
    void <init>() -> <init>
    void <init>(byte) -> <init>
    com.google.zxing.pdf417.encoder.BarcodeMatrix getBarcodeMatrix() -> a
    int calculateNumberOfRows(int,int,int) -> a
    void encodeChar(int,int,com.google.zxing.pdf417.encoder.BarcodeRow) -> a
    void generateBarcodeLogic(java.lang.String,int,boolean) -> a
    void setCompaction(com.google.zxing.pdf417.encoder.Compaction) -> a
    void setCompact(boolean) -> a
    void setEncoding(java.nio.charset.Charset) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417ErrorCorrection -> com.google.zxing.f.c.f:
    int[][] EC_COEFFICIENTS -> a
    int getErrorCorrectionCodewordCount(int) -> a
    java.lang.String generateErrorCorrection$1087b2a(java.lang.String,int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder -> com.google.zxing.f.c.g:
    byte[] TEXT_MIXED_RAW -> a
    byte[] TEXT_PUNCTUATION_RAW -> b
    byte[] MIXED -> c
    byte[] PUNCTUATION -> d
    java.nio.charset.Charset DEFAULT_ENCODING -> e
    boolean $assertionsDisabled -> f
    void <init>() -> <init>
    java.lang.String encodeHighLevel(java.lang.String,com.google.zxing.pdf417.encoder.Compaction,java.nio.charset.Charset,boolean) -> a
    int encodeText$ff5d61$6be3feef(com.google.zxing.ResultPointCallback,int,int,java.lang.StringBuilder,int) -> a
    void encodeMultiECIBinary$319640fc$394e6092(com.google.zxing.ResultPointCallback,int,int,int,java.lang.StringBuilder) -> a
    byte[] subBytes$14a103e9$57be9937(com.google.zxing.ResultPointCallback,int,int) -> a
    void encodeBinary$1f889be4(byte[],int,int,java.lang.StringBuilder) -> a
    void encodeNumeric$7bd6b737$24833d7b(com.google.zxing.ResultPointCallback,int,int,java.lang.StringBuilder) -> a
    boolean isDigit(char) -> a
    boolean isAlphaUpper(char) -> b
    boolean isAlphaLower(char) -> c
    boolean isMixed(char) -> d
    boolean isPunctuation(char) -> e
    void encodingECI(int,java.lang.StringBuilder) -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder$1 -> com.google.zxing.f.c.h:
    int[] $SwitchMap$com$google$zxing$pdf417$encoder$Compaction -> a
    void <clinit>() -> <clinit>
com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder$NoECIInput -> com.google.zxing.f.c.i:
    java.lang.String input -> a
    void <init>(java.lang.String) -> <init>
    int length() -> a
    char charAt(int) -> a
    boolean isECI(int) -> b
    int getECIValue(int) -> c
    java.lang.CharSequence subSequence(int,int) -> a
    java.lang.String toString() -> toString
    void <init>(java.lang.String,byte) -> <init>
com.google.zxing.qrcode.QRCodeReader -> com.google.zxing.g.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.qrcode.decoder.Decoder decoder -> b
    void <init>() -> <init>
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> decode
    void reset() -> reset
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.QRCodeWriter -> com.google.zxing.g.b:
    void <init>() -> <init>
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> encode
com.google.zxing.qrcode.decoder.BitMatrixParser -> com.google.zxing.g.a.a:
    com.google.zxing.common.BitMatrix bitMatrix -> a
    com.google.zxing.qrcode.decoder.Version parsedVersion -> b
    com.google.zxing.qrcode.decoder.FormatInformation parsedFormatInfo -> c
    boolean mirror -> d
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.qrcode.decoder.FormatInformation readFormatInformation() -> a
    com.google.zxing.qrcode.decoder.Version readVersion() -> b
    int copyBit(int,int,int) -> a
    byte[] readCodewords() -> c
    void remask() -> d
    void setMirror$1385ff() -> e
    void mirror() -> f
com.google.zxing.qrcode.decoder.DataBlock -> com.google.zxing.g.a.b:
    int numDataCodewords -> a
    byte[] codewords -> b
    void <init>(int,byte[]) -> <init>
    com.google.zxing.qrcode.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    int getNumDataCodewords() -> a
    byte[] getCodewords() -> b
com.google.zxing.qrcode.decoder.DataMask -> com.google.zxing.g.a.c:
    com.google.zxing.qrcode.decoder.DataMask$1 DATA_MASK_000$74f46e60 -> a
    com.google.zxing.qrcode.decoder.DataMask$2 DATA_MASK_001$74f46e60 -> b
    com.google.zxing.qrcode.decoder.DataMask$3 DATA_MASK_010$74f46e60 -> c
    com.google.zxing.qrcode.decoder.DataMask$4 DATA_MASK_011$74f46e60 -> d
    com.google.zxing.qrcode.decoder.DataMask$5 DATA_MASK_100$74f46e60 -> e
    com.google.zxing.qrcode.decoder.DataMask$6 DATA_MASK_101$74f46e60 -> f
    com.google.zxing.qrcode.decoder.DataMask$7 DATA_MASK_110$74f46e60 -> g
    com.google.zxing.qrcode.decoder.DataMask$8 DATA_MASK_111$74f46e60 -> h
    com.google.zxing.qrcode.decoder.DataMask[] $VALUES -> i
    com.google.zxing.qrcode.decoder.DataMask[] values() -> a
    void <init>(java.lang.String,int) -> <init>
    void unmaskBitMatrix(com.google.zxing.common.BitMatrix,int) -> a
    boolean isMasked(int,int) -> a
    void <init>(java.lang.String,int,byte) -> <init>
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.DataMask$1 -> com.google.zxing.g.a.d:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$2 -> com.google.zxing.g.a.e:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$3 -> com.google.zxing.g.a.f:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$4 -> com.google.zxing.g.a.g:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$5 -> com.google.zxing.g.a.h:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$6 -> com.google.zxing.g.a.i:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$7 -> com.google.zxing.g.a.j:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$8 -> com.google.zxing.g.a.k:
    void <init>(java.lang.String) -> <init>
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DecodedBitStreamParser -> com.google.zxing.g.a.l:
    char[] ALPHANUMERIC_CHARS -> a
    com.google.zxing.common.DecoderResult decode(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> a
    char toAlphaNumericChar(int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.DecodedBitStreamParser$1 -> com.google.zxing.g.a.m:
    int[] $SwitchMap$com$google$zxing$qrcode$decoder$Mode -> a
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Decoder -> com.google.zxing.g.a.n:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    void <init>() -> <init>
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map) -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.qrcode.decoder.BitMatrixParser,java.util.Map) -> a
    int correctErrors(byte[],int) -> a
com.google.zxing.qrcode.decoder.ErrorCorrectionLevel -> com.google.zxing.g.a.o:
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel L -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel M -> b
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel Q -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel H -> d
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] FOR_BITS -> e
    int bits -> f
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel valueOf(java.lang.String) -> a
    void <init>(java.lang.String,int,int) -> <init>
    int getBits() -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel forBits(int) -> a
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.FormatInformation -> com.google.zxing.g.a.p:
    int[][] FORMAT_INFO_DECODE_LOOKUP -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel errorCorrectionLevel -> b
    byte dataMask -> c
    void <init>(int) -> <init>
    int numBitsDiffering(int,int) -> a
    com.google.zxing.qrcode.decoder.FormatInformation decodeFormatInformation(int,int) -> b
    com.google.zxing.qrcode.decoder.FormatInformation doDecodeFormatInformation(int,int) -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel getErrorCorrectionLevel() -> a
    byte getDataMask() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Mode -> com.google.zxing.g.a.q:
    com.google.zxing.qrcode.decoder.Mode TERMINATOR -> a
    com.google.zxing.qrcode.decoder.Mode NUMERIC -> b
    com.google.zxing.qrcode.decoder.Mode ALPHANUMERIC -> c
    com.google.zxing.qrcode.decoder.Mode STRUCTURED_APPEND -> d
    com.google.zxing.qrcode.decoder.Mode BYTE -> e
    com.google.zxing.qrcode.decoder.Mode ECI -> f
    com.google.zxing.qrcode.decoder.Mode KANJI -> g
    com.google.zxing.qrcode.decoder.Mode FNC1_FIRST_POSITION -> h
    com.google.zxing.qrcode.decoder.Mode FNC1_SECOND_POSITION -> i
    com.google.zxing.qrcode.decoder.Mode HANZI -> j
    int[] characterCountBitsForVersions -> k
    int bits -> l
    com.google.zxing.qrcode.decoder.Mode[] $VALUES -> m
    com.google.zxing.qrcode.decoder.Mode[] values() -> a
    void <init>(java.lang.String,int,int[],int) -> <init>
    com.google.zxing.qrcode.decoder.Mode forBits(int) -> a
    int getCharacterCountBits(com.google.zxing.qrcode.decoder.Version) -> a
    int getBits() -> b
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.QRCodeDecoderMetaData -> com.google.zxing.g.a.r:
    void <init>() -> <init>
com.google.zxing.qrcode.decoder.Version -> com.google.zxing.g.a.s:
    int[] VERSION_DECODE_INFO -> a
    com.google.zxing.qrcode.decoder.Version[] VERSIONS -> b
    int versionNumber -> c
    int[] alignmentPatternCenters -> d
    com.google.zxing.qrcode.decoder.Version$ECBlocks[] ecBlocks -> e
    int totalCodewords -> f
    void <init>(int,int[],com.google.zxing.qrcode.decoder.Version$ECBlocks[]) -> <init>
    int getVersionNumber() -> a
    int[] getAlignmentPatternCenters() -> b
    int getTotalCodewords() -> c
    int getDimensionForVersion() -> d
    com.google.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    com.google.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int) -> a
    com.google.zxing.qrcode.decoder.Version getVersionForNumber(int) -> b
    com.google.zxing.qrcode.decoder.Version decodeVersionInformation(int) -> c
    com.google.zxing.common.BitMatrix buildFunctionPattern() -> e
    java.lang.String toString() -> toString
    com.google.zxing.qrcode.decoder.Version[] buildVersions() -> f
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.decoder.Version$ECB -> com.google.zxing.g.a.t:
    int count -> a
    int dataCodewords -> b
    void <init>(int,int) -> <init>
    int getCount() -> a
    int getDataCodewords() -> b
com.google.zxing.qrcode.decoder.Version$ECBlocks -> com.google.zxing.g.a.u:
    int ecCodewordsPerBlock -> a
    com.google.zxing.qrcode.decoder.Version$ECB[] ecBlocks -> b
    void <init>(int,com.google.zxing.qrcode.decoder.Version$ECB[]) -> <init>
    int getECCodewordsPerBlock() -> a
    int getNumBlocks() -> b
    int getTotalECCodewords() -> c
    com.google.zxing.qrcode.decoder.Version$ECB[] getECBlocks() -> d
com.google.zxing.qrcode.detector.AlignmentPattern -> com.google.zxing.g.b.a:
    float estimatedModuleSize -> a
    void <init>(float,float,float) -> <init>
    boolean aboutEquals(float,float,float) -> a
    com.google.zxing.qrcode.detector.AlignmentPattern combineEstimate(float,float,float) -> b
com.google.zxing.qrcode.detector.Detector -> com.google.zxing.g.b.b:
    com.google.zxing.common.BitMatrix image -> a
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.common.DetectorResult detect(java.util.Map) -> a
    com.google.zxing.common.DetectorResult processFinderPatternInfo(com.google.zxing.qrcode.detector.FinderPatternInfo) -> a
    float calculateModuleSizeOneWay$6365da43(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> a
    float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int) -> a
    float sizeOfBlackWhiteBlackRun(int,int,int,int) -> b
com.google.zxing.qrcode.detector.FinderPattern -> com.google.zxing.g.b.c:
    float estimatedModuleSize -> a
    int count -> b
    void <init>(float,float,float) -> <init>
    void <init>(float,float,float,int) -> <init>
    float getEstimatedModuleSize() -> c
    int getCount() -> d
    boolean aboutEquals(float,float,float) -> a
    com.google.zxing.qrcode.detector.FinderPattern combineEstimate(float,float,float) -> b
com.google.zxing.qrcode.detector.FinderPatternFinder -> com.google.zxing.g.b.d:
    com.google.zxing.qrcode.detector.FinderPatternFinder$EstimatedModuleComparator moduleComparator -> a
    com.google.zxing.common.BitMatrix image -> b
    java.util.ArrayList possibleCenters$7865b31 -> c
    boolean hasSkipped -> d
    int[] crossCheckStateCount -> e
    void <init>(com.google.zxing.common.BitMatrix) -> <init>
    com.google.zxing.qrcode.detector.FinderPatternInfo find(java.util.Map) -> a
    float centerFromEnd(int[],int) -> a
    boolean foundPatternCross(int[]) -> a
    int[] getCrossCheckStateCount() -> a
    void doShiftCounts2(int[]) -> b
    boolean crossCheckDiagonal(int,int) -> a
    float crossCheckVertical(int,int,int,int) -> a
    float crossCheckHorizontal(int,int,int,int) -> b
    boolean handlePossibleCenter(int[],int,int) -> a
    boolean haveMultiplyConfirmedCenters() -> b
    double squaredDistance(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> a
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.detector.FinderPatternFinder$1 -> com.google.zxing.g.b.e:
    com.google.zxing.common.BitMatrix image -> a
    java.util.ArrayList possibleCenters$7865b31 -> b
    int startX -> c
    int startY -> d
    int width -> e
    int height -> f
    float moduleSize -> g
    int[] crossCheckStateCount -> h
    void <init>(com.google.zxing.common.BitMatrix,int,int,int,int,float) -> <init>
    com.google.zxing.qrcode.detector.AlignmentPattern find() -> a
    float centerFromEnd(int[],int) -> a
    boolean foundPatternCross(int[]) -> a
    float crossCheckVertical(int,int,int,int) -> a
    com.google.zxing.qrcode.detector.AlignmentPattern handlePossibleCenter(int[],int,int) -> a
com.google.zxing.qrcode.detector.FinderPatternFinder$EstimatedModuleComparator -> com.google.zxing.g.b.f:
    void <init>() -> <init>
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(byte) -> <init>
com.google.zxing.qrcode.detector.FinderPatternInfo -> com.google.zxing.g.b.g:
    com.google.zxing.qrcode.detector.FinderPattern bottomLeft -> a
    com.google.zxing.qrcode.detector.FinderPattern topLeft -> b
    com.google.zxing.qrcode.detector.FinderPattern topRight -> c
    void <init>(com.google.zxing.qrcode.detector.FinderPattern[]) -> <init>
    com.google.zxing.qrcode.detector.FinderPattern getBottomLeft() -> a
    com.google.zxing.qrcode.detector.FinderPattern getTopLeft() -> b
    com.google.zxing.qrcode.detector.FinderPattern getTopRight() -> c
com.google.zxing.qrcode.encoder.ByteMatrix -> com.google.zxing.g.c.a:
    byte[][] bytes -> a
    int width -> b
    int height -> c
    void <init>(int,int) -> <init>
    int getHeight() -> a
    int getWidth() -> b
    byte get(int,int) -> a
    byte[][] getArray() -> c
    void set(int,int,int) -> a
    void set(int,int,boolean) -> a
    void clear$132be7() -> d
    java.lang.String toString() -> toString
com.google.zxing.qrcode.encoder.Encoder -> com.google.zxing.g.c.b:
    int[] ALPHANUMERIC_TABLE -> a
    java.nio.charset.Charset DEFAULT_BYTE_MODE_ENCODING -> b
    com.google.zxing.qrcode.encoder.QRCode encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> a
    int calculateBitsNeeded(com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray,com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.Version) -> a
    int getAlphanumericCode(int) -> a
    boolean isOnlyDoubleByteKanji(java.lang.String) -> a
    com.google.zxing.qrcode.decoder.Version chooseVersion(int,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    boolean willFit(int,com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    void appendModeInfo(com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray) -> a
    void appendBytes(java.lang.String,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray,java.nio.charset.Charset) -> a
    void appendNumericBytes$1ab66b4b(java.lang.String,com.google.zxing.common.BitArray) -> a
    void appendAlphanumericBytes$1ab66b4b(java.lang.String,com.google.zxing.common.BitArray) -> b
    void append8BitBytes(java.lang.String,com.google.zxing.common.BitArray,java.nio.charset.Charset) -> a
    void appendKanjiBytes(java.lang.String,com.google.zxing.common.BitArray) -> c
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.Encoder$1 -> com.google.zxing.g.c.c:
    int[] $SwitchMap$com$google$zxing$qrcode$decoder$Mode -> a
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.MaskUtil -> com.google.zxing.g.c.d:
    byte[] dataBytes -> a
    byte[] errorCorrectionBytes -> b
    int applyMaskPenaltyRule1(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    int applyMaskPenaltyRule3(com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    boolean isWhiteHorizontal(byte[],int,int) -> a
    boolean isWhiteVertical(byte[][],int,int,int) -> a
    int applyMaskPenaltyRule1Internal(com.google.zxing.qrcode.encoder.ByteMatrix,boolean) -> a
    void <init>(byte[],byte[]) -> <init>
    byte[] getDataBytes() -> a
    byte[] getErrorCorrectionBytes() -> b
com.google.zxing.qrcode.encoder.MatrixUtil -> com.google.zxing.g.c.e:
    int[][] POSITION_DETECTION_PATTERN -> a
    int[][] POSITION_ADJUSTMENT_PATTERN -> b
    int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE -> c
    int[][] TYPE_INFO_COORDINATES -> d
    void buildMatrix(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.decoder.Version,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    int calculateBCHCode(int,int) -> a
    boolean isEmpty(int) -> a
    void embedHorizontalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void embedVerticalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    void embedPositionDetectionPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> c
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.MinimalEncoder -> com.google.zxing.g.c.f:
    java.lang.String stringToEncode -> a
    boolean isGS1 -> b
    com.google.zxing.common.ECIEncoderSet encoders -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ecLevel -> d
    void <init>(java.lang.String,java.nio.charset.Charset,boolean,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> <init>
    com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList encode$207e539b() -> a
    com.google.zxing.qrcode.decoder.Version getVersion(com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize) -> a
    boolean canEncode(com.google.zxing.qrcode.decoder.Mode,char) -> a
    void addEdge(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge[][][],int,com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> a
    void addEdges(com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.encoder.MinimalEncoder$Edge[][][],int,com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> a
    com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList encodeSpecificVersion(com.google.zxing.qrcode.decoder.Version) -> a
    java.lang.String access$500(com.google.zxing.qrcode.encoder.MinimalEncoder) -> a
    com.google.zxing.common.ECIEncoderSet access$600(com.google.zxing.qrcode.encoder.MinimalEncoder) -> b
    boolean access$900(com.google.zxing.qrcode.encoder.MinimalEncoder) -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel access$1100(com.google.zxing.qrcode.encoder.MinimalEncoder) -> d
com.google.zxing.qrcode.encoder.MinimalEncoder$1 -> com.google.zxing.g.c.g:
    int[] $SwitchMap$com$google$zxing$qrcode$encoder$MinimalEncoder$VersionSize -> a
    int[] $SwitchMap$com$google$zxing$qrcode$decoder$Mode -> b
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.MinimalEncoder$Edge -> com.google.zxing.g.c.h:
    com.google.zxing.qrcode.decoder.Mode mode -> a
    int fromPosition -> b
    int charsetEncoderIndex -> c
    int characterLength -> d
    com.google.zxing.qrcode.encoder.MinimalEncoder$Edge previous -> e
    int cachedTotalSize -> f
    void <init>(com.google.zxing.qrcode.encoder.MinimalEncoder,com.google.zxing.qrcode.decoder.Mode,int,int,int,com.google.zxing.qrcode.encoder.MinimalEncoder$Edge,com.google.zxing.qrcode.decoder.Version) -> <init>
    int access$000(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> a
    int access$100(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> b
    com.google.zxing.qrcode.decoder.Mode access$200(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> c
    int access$300(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> d
    void <init>(com.google.zxing.qrcode.encoder.MinimalEncoder,com.google.zxing.qrcode.decoder.Mode,int,int,int,com.google.zxing.qrcode.encoder.MinimalEncoder$Edge,com.google.zxing.qrcode.decoder.Version,byte) -> <init>
    com.google.zxing.qrcode.encoder.MinimalEncoder$Edge access$700(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> e
    int access$800(com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> f
com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList -> com.google.zxing.g.c.i:
    java.util.ArrayList list$7865b31 -> b
    com.google.zxing.qrcode.decoder.Version version -> c
    com.google.zxing.qrcode.encoder.MinimalEncoder this$0 -> a
    void <init>(com.google.zxing.qrcode.encoder.MinimalEncoder,com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.encoder.MinimalEncoder$Edge) -> <init>
    int getSize() -> a
    int getSize(com.google.zxing.qrcode.decoder.Version) -> a
    void getBits(com.google.zxing.common.BitArray) -> a
    com.google.zxing.qrcode.decoder.Version getVersion() -> b
    java.lang.String toString() -> toString
    com.google.zxing.qrcode.decoder.Version access$1400(com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList) -> a
com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList$ResultNode -> com.google.zxing.g.c.j:
    com.google.zxing.qrcode.decoder.Mode mode -> a
    int fromPosition -> b
    int charsetEncoderIndex -> c
    int characterLength -> d
    com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList this$1 -> e
    void <init>(com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList,com.google.zxing.qrcode.decoder.Mode,int,int,int) -> <init>
    int getCharacterCountIndicator() -> a
    java.lang.String toString() -> toString
    com.google.zxing.qrcode.decoder.Mode access$1000(com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList$ResultNode) -> a
    int access$1200(com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList$ResultNode,com.google.zxing.qrcode.decoder.Version) -> a
    void access$1300(com.google.zxing.qrcode.encoder.MinimalEncoder$ResultList$ResultNode,com.google.zxing.common.BitArray) -> a
com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize -> com.google.zxing.g.c.k:
    com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize SMALL -> a
    com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize MEDIUM -> b
    com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize LARGE -> c
    java.lang.String description -> d
    com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize[] $VALUES -> e
    com.google.zxing.qrcode.encoder.MinimalEncoder$VersionSize[] values() -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
com.google.zxing.qrcode.encoder.QRCode -> com.google.zxing.g.c.l:
    com.google.zxing.qrcode.decoder.Mode mode -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ecLevel -> b
    com.google.zxing.qrcode.decoder.Version version -> c
    int maskPattern -> d
    com.google.zxing.qrcode.encoder.ByteMatrix matrix -> e
    void <init>() -> <init>
    com.google.zxing.qrcode.encoder.ByteMatrix getMatrix() -> a
    java.lang.String toString() -> toString
    void setMode(com.google.zxing.qrcode.decoder.Mode) -> a
    void setECLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    void setVersion(com.google.zxing.qrcode.decoder.Version) -> a
    void setMaskPattern(int) -> a
    void setMatrix(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    boolean isValidMaskPattern(int) -> b
org.stresstest.StressTestQRCode -> org.stresstest.StressTestQRCode:
    java.lang.String FILE_PATH -> FILE_PATH
    java.lang.String DATA -> DATA
    int SIZE -> SIZE
    void <init>() -> <init>
    void generateQRCode() -> generateQRCode
    void decodeQRCode() -> decodeQRCode
    void main(java.lang.String[]) -> main
